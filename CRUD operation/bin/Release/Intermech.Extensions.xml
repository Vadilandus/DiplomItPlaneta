<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intermech.Extensions</name>
    </assembly>
    <members>
        <member name="M:Intermech.Extensions.Async.Delay(System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>Генерирует задачу не совершающую работу заданное количество миллисекунд, однако регулярно проверяющая
                     cancellationToken на необходимость досрочного завершения ожидания</summary>
            <param name="milliseconds">Сколько миллисекунд должна длиться задача бездействия</param>
            <param name="cancellationToken">(Optional) токен досрочного прерывания выполнения задачи</param>
            <returns>Задача не совершающую работу заданное количество миллисекунд</returns>
        </member>
        <member name="M:Intermech.Extensions.Async.Delay(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>Генерирует задачу не совершающую работу заданное количество миллисекунд, однако регулярно проверяющая
                     cancellationToken на необходимость досрочного завершения ожидания</summary>
            <param name="milliseconds">Сколько миллисекунд должна длиться задача бездействия</param>
            <param name="millisecondsCheckCancelInterval">Раз во сколько миллисекунд задача будет проверять токен досрочного
                                                          прерывания выполнения задачи</param>
            <param name="cancellationToken">(Optional) токен досрочного прерывания выполнения задачи</param>
            <returns>Задача не совершающую работу заданное количество миллисекунд</returns>
        </member>
        <member name="M:Intermech.Extensions.CancellationTokenExtensions.GetAwaiter(System.Threading.CancellationToken)">
            <summary>Позволяет асинхронно ожидать отмены операции с помощью кода вида await cancellationToken;</summary>
            <example>await cancellationToken;</example>
        </member>
        <member name="T:Intermech.Extensions.CancellationTokenSourceExtensions">
            <summary>Расширения для класса CancellationTokenSource</summary>
        </member>
        <member name="M:Intermech.Extensions.CancellationTokenSourceExtensions.ThrowIfCancellationRequested(System.Threading.CancellationTokenSource,System.String)">
            <summary>Проверка токена отмены на необходимость прерывания текущей операции.
                     Прерывание выполняется генерацией исключительной ситуации OperationCanceledException</summary>
            <exception cref="T:System.OperationCanceledException">Thrown when an Operation Canceled error condition occurs</exception>
            <param name="сancellationTokenSource">The сancellationTokenSource to act on. This cannot be null</param>
            <param name="message">(Optional) The message. This may be null</param>
        </member>
        <member name="M:Intermech.Extensions.CancellationTokenSourceExtensions.GetAwaiter(System.Threading.CancellationTokenSource)">
            <summary>Позволяет асинхронно ожидать отмены операции с помощью кода вида await _сancellationTokenSource;</summary>
            <example>await _сancellationTokenSource;</example>
        </member>
        <member name="T:Intermech.Extensions.InitAndShutdownGuardian">
            <summary>
            Гарантия однократного вызова метода инициализации, и завершения,
            Контролирует последовательность выполнения инициализации и завершения.
            Поддерживает асинхронные вызовы.
            </summary>
        </member>
        <member name="T:Intermech.Extensions.InitOnceGuardian">
            <summary>Гарантия однократного вызова, и завершения метода</summary>
            <remarks>В отличии от Intermech.Threading.RunOnce в случае повторного запуска <see cref="M:Intermech.Extensions.InitOnceGuardian.Invoke(System.Action)"/> пока инициализация уже идёт в другом потоке, но ещё не завершилась,
                     заблокирует поток до тех пор, пока инициализация не будет завершена</remarks>
        </member>
        <member name="T:Intermech.Extensions.Helper">
            <summary>Статический класс-хелпер</summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread(System.Action{System.Threading.CancellationToken},System.Threading.CancellationToken,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке. В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком
                     выполнения операции</returns>
            <example>
                 await some_action.RunInThread(cancellationToken, param1);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread(System.Action,System.Threading.CancellationToken,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке. В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком
                     выполнения операции</returns>
            <example>
                 await some_action.RunInThread(cancellationToken, param1);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``1(System.Action{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,``0,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``1(System.Action{``0},System.Threading.CancellationToken,``0,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``2(System.Action{System.Threading.CancellationToken,``0,``1},System.Threading.CancellationToken,``0,``1,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``2(System.Action{``0,``1},System.Threading.CancellationToken,``0,``1,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``3(System.Action{System.Threading.CancellationToken,``0,``1,``2},System.Threading.CancellationToken,``0,``1,``2,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``3(System.Action{``0,``1,``2},System.Threading.CancellationToken,``0,``1,``2,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``4(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3},System.Threading.CancellationToken,``0,``1,``2,``3,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``4(System.Action{``0,``1,``2,``3},System.Threading.CancellationToken,``0,``1,``2,``3,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``5(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4},System.Threading.CancellationToken,``0,``1,``2,``3,``4,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``5(System.Action{``0,``1,``2,``3,``4},System.Threading.CancellationToken,``0,``1,``2,``3,``4,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``6(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``6(System.Action{``0,``1,``2,``3,``4,``5},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``7(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``8(System.Action{System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,``7,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="param8">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7, param8);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,``7,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="action">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="param8">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                await some_action.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7, param8);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``1(System.Func{System.Threading.CancellationToken,``0},System.Threading.CancellationToken,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке. В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком
                     выполнения операции</returns>
            <example>var result = await some_function.RunInThread();</example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``1(System.Func{``0},System.Threading.CancellationToken,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке. В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком
                     выполнения операции</returns>
            <example>var result = await some_function.RunInThread();</example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``2(System.Func{System.Threading.CancellationToken,``0,``1},System.Threading.CancellationToken,``0,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``2(System.Func{``0,``1},System.Threading.CancellationToken,``0,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``3(System.Func{System.Threading.CancellationToken,``0,``1,``2},System.Threading.CancellationToken,``0,``1,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``3(System.Func{``0,``1,``2},System.Threading.CancellationToken,``0,``1,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``4(System.Func{System.Threading.CancellationToken,``0,``1,``2,``3},System.Threading.CancellationToken,``0,``1,``2,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``4(System.Func{``0,``1,``2,``3},System.Threading.CancellationToken,``0,``1,``2,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``5(System.Func{System.Threading.CancellationToken,``0,``1,``2,``3,``4},System.Threading.CancellationToken,``0,``1,``2,``3,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``5(System.Func{``0,``1,``2,``3,``4},System.Threading.CancellationToken,``0,``1,``2,``3,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``6(System.Func{System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5},System.Threading.CancellationToken,``0,``1,``2,``3,``4,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``6(System.Func{``0,``1,``2,``3,``4,``5},System.Threading.CancellationToken,``0,``1,``2,``3,``4,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``7(System.Func{System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``8(System.Func{System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``9(System.Func{System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,``7,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="param8">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7, param8);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.RunInThread``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Threading.CancellationToken,``0,``1,``2,``3,``4,``5,``6,``7,System.Action{System.Threading.Thread})">
            <summary>Запустить действие в отдельном потоке, получить Task этой операции.
                     Передаёт в вызывающий контекст результат вызова делегата и выброшенные им до отмены операции исключительные ситуации.
                     В случае прерывания операции по CancellationToken выполнение Task прерывается немедленно, не дожидаясь завершения потока и вызванного в нём делегата,
                     поток и вызванный в нём метод продолжают выполнятся, освобождают ресурсы и т.д.
                     исключения сгенерированные в потоке после отмены операции в вызывающий контекст не передаются</summary>
            <param name="function">Метод, выполняемый в потоке</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="param1">Параметр метода</param>
            <param name="param2">Параметр метода</param>
            <param name="param3">Параметр метода</param>
            <param name="param4">Параметр метода</param>
            <param name="param5">Параметр метода</param>
            <param name="param6">Параметр метода</param>
            <param name="param7">Параметр метода</param>
            <param name="param8">Параметр метода</param>
            <param name="initThreadAction">(Optional) CallBack для инициализации параметров потока</param>
            <returns>Task, который завершится когда завершится выполнение метода в потоке.
                     В место выполнения Task прилетят все исключительные ситуации, выброшенные потоком выполнения операции</returns>
            <example>
                var result = await some_function.RunInThread(cancellationToken, param1, param2, param3, param4, param5, param6, param7, param8);
            </example>
        </member>
        <member name="M:Intermech.Extensions.Helper.GetOrInit``1(System.Nullable{``0}@,System.Func{``0})">
            <summary>Получить значение из NullAble контейнера, или инициализировать его значение используя внешнюю функцию</summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.CallOnDispose(System.Action)">
            <summary>Оболочка для участка кода, заканчивающаяся вызовом лямбды</summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.StartFinish(System.Action,System.Action)">
            <summary>Оболочка для участка кода, начинающаяся и заканчивающаяся вызовом лямбд</summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.Merge(System.IDisposable[])">
            <summary>Объединение несколько IDisposable в один</summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.PossibleValuesOf``1(System.Boolean)">
            <summary>Коллекция всех возможным флагов перечисления Если includeZero == false, то результата исключается 0, У перечислений
                помеченных атрибутом Flags возвращаются только индивидуальные значения, комбинации флагов отфильтровываются</summary>
            <param name="includeZero">(Optional) Включать ли в результат флаг со значением 0 (по-умолчанию false)</param>
            <returns>Коллекция всех возможных значений перечисления</returns>
        </member>
        <member name="M:Intermech.Extensions.Helper.Holder``1(``0,System.Action{``0})">
            <summary>Обернуть значение в интерфейсом IDisposable, при вызове Dispose которого вызовется лямбда, переданная в этот метод</summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.ValueHolder``1(``0,System.Action{``0})">
            <summary>Обернуть значение в интерфейсом IDisposable, при вызове Dispose которого вызовется лямбда, переданная в этот метод</summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.IgnoreOperationCancelled(System.Action)">
            <summary>Выполнить внешний метод игнорируя возможную отмену операция, фильтруя все <see cref="T:System.OperationCanceledException"/></summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.IgnoreOperationCancelled``1(System.Func{``0})">
            <summary>Выполнить внешний метод игнорируя возможную отмену операция, фильтруя все <see cref="T:System.OperationCanceledException"/></summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.IgnoreOperationCancelledAsync(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Выполнить задачу игнорируя возможную отмену операция, фильтруя все <see cref="T:System.OperationCanceledException"/></summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.IgnoreOperationCancelledAsync``1(System.Threading.Tasks.Task{``0},System.Boolean)">
            <summary>Выполнить задачу игнорируя возможную отмену операция, фильтруя все <see cref="T:System.OperationCanceledException"/></summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.IgnoreOperationCancelledAsync(System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>Выполнить задачу игнорируя возможную отмену операция, фильтруя все <see cref="T:System.OperationCanceledException"/></summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.IgnoreOperationCancelledAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>Выполнить задачу игнорируя возможную отмену операция, фильтруя все <see cref="T:System.OperationCanceledException"/></summary>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``1(System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``2(``1,System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``3(``1,``2,System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``4(``1,``2,``3,System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``5(``1,``2,``3,``4,System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``6(``1,``2,``3,``4,``5,System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``7(``1,``2,``3,``4,``5,``6,System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="M:Intermech.Extensions.Helper.CreateInstance``8(``1,``2,``3,``4,``5,``6,``7,System.Boolean)">
            <summary>Создание экземпляра вызовом конструктора с помощью рефлектора (медленно, но иногда необходимо)</summary>
            <remarks>Ссылка на конструктор не кэшируется, в случае неоднократных обращений получать один раз <see cref="T:System.Reflection.ConstructorInfo"/> и в последующем вызывать <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])"/> у него!"</remarks>
        </member>
        <member name="T:Intermech.Extensions.RunOnce">
            <summary>Гарантия однократного вызова, и завершения действия</summary>
            <remarks>В отличии от Intermech.Threading.RunOnce в случае повторного запуска <see cref="M:Intermech.Extensions.RunOnce.TryRun"/> пока инициализация уже идёт в другом потоке, но ещё не завершилась,
                     заблокирует поток до тех пор, пока вызов не будет завершён</remarks>
        </member>
        <member name="M:Intermech.Extensions.SynchronizationContextExtensions.GetAwaiter(System.Threading.SynchronizationContext)">
            <summary>Расширение, позволяющее переключить асинхронное выполнение в заданный контекст. Использовать осторожно, с пониманием что делается и какие могут последствия</summary>
            <remarks>Реализованно в связи с тем, что <see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/>(true) не гарантирует возвращения в контекст контрола, в частности столкнулся
                     с такой проблемой при написании плагина для MS Project. Причины такого поведения непонятны</remarks>>
            <example>
            SynchronizationContext capturedContext = SynchronizationContext.Current;
            try
            {
                await AsyncMethod();
            }
            finally
            {
                await capturedContext; // Здесь произойдёт возвращение в захваченный ранее контекст
            }
            </example>
        </member>
        <member name="T:Intermech.Extensions.EnumerationList`1">
            <summary>Гибридная оболочка над последовательностью, мимикрирующая под коллекцию-список, например поддерживает чтение
                     кол-ва элементов. При попытке редактировании или обращению к доступу по индексу - преобразует
                     последовательность в список и в дальнейшем работает с ним</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Constructor</summary>
            <param name="enumeration">The enumeration. This cannot be null</param>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Constructor</summary>
            <param name="enumeration">The enumeration. This cannot be null</param>
            <param name="count">The number of elements in the collection</param>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular
                     <see cref="T:System.Array" /> index</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from
                <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins</param>
        </member>
        <member name="P:Intermech.Extensions.EnumerationList`1.Count">
            <summary>Gets the number of elements in the collection</summary>
            <value>The number of elements in the collection</value>
        </member>
        <member name="P:Intermech.Extensions.EnumerationList`1.List">
            <summary>Убедиться что перечисление преобразовано в список, преобразовать если не так</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.AsList">
            <summary>Принудительное преобразование к List_T</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.op_Implicit(Intermech.Extensions.EnumerationList{`0})~System.Collections.Generic.List{`0}">
            <summary>Implicit cast that converts the given EnumerationList{T} to a List</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="enumerationList">List of enumerations. This cannot be null</param>
            <returns>The result of the operation. This will never be null</returns>
        </member>
        <member name="P:Intermech.Extensions.EnumerationList`1.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list</summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="P:Intermech.Extensions.EnumerationList`1.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only</summary>
            <value><see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" /></value>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.Add(`0)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" /></summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only</exception>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /></param>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /></summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only</exception>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.Contains(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value</summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /></param>
            <returns><see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular
                     <see cref="T:System.Array" /> index</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the
                available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" /></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from
                <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins</param>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" /></summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only</exception>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /></param>
            <returns><see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise,
                     <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original
                     <see cref="T:System.Collections.Generic.ICollection`1" /></returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.IndexOf(`0)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" /></summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" /></param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.Insert(System.Int32,`0)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index</summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only</exception>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" /></param>
        </member>
        <member name="M:Intermech.Extensions.EnumerationList`1.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index</summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only</exception>
            <param name="index">The zero-based index of the item to remove</param>
        </member>
        <member name="P:Intermech.Extensions.EnumerationList`1.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" /></summary>
            <value>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" /></value>
        </member>
        <member name="P:Intermech.Extensions.EnumerationList`1.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe)</summary>
            <value><see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" /></value>
        </member>
        <member name="T:Intermech.Extensions.CollectionExtensions">
            <summary>Расширение для ICollection</summary>
            <remarks>Для новых функций желательно писать тесты</remarks>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.Clone``1(System.Collections.Generic.ICollection{``0})">
            <summary>Создаёт копию коллекции</summary>
            <typeparam name="T">Тип элемента коллекции</typeparam>
            <param name="collectionToClone">Коллекция, который должен быть скопирован</param>
            <returns>Созданная копия коллекции. Заполняется клонами объектов из начального списка</returns>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.CloneStructsList``1(System.Collections.Generic.ICollection{``0})">
            <summary>Создаёт копию коллекции</summary>
            <typeparam name="T">Тип элемента коллекции</typeparam>
            <param name="collectionToClone">Коллекция, которая должен быть скопирован</param>
            <returns>Созданная копия коллекции</returns>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.CastCollection``2(System.Collections.Generic.ICollection{``0},System.Boolean)">
            <summary>Преобразование коллекции элементов TSource к неизменной коллекции элементов TOutput, где TOutput - интерфейс реализуемый
                TSource или его базовый класс</summary>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.MapCollection``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1},System.Boolean)">
            <summary>Преобразование коллекции элементов TSource к неизменной коллекции элементов TOutput с помощью внешней функции</summary>
        </member>
        <member name="T:Intermech.Extensions.GeneralCollectionExtensions">
            <summary>Расширение над интерфейсом нетипизированной коллекции (ICollection)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralCollectionExtensions.CastCollection``1(System.Collections.ICollection)">
            <summary>Преобразование нетипизированной коллекции (ICollection) к типизированной без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralCollectionExtensions.MapCollection``1(System.Collections.ICollection,System.Func{System.Object,``0})">
            <summary>Преобразование нетипизированной коллекции (ICollection) к типизированной с помощью внешней функции преобразования без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralCollectionExtensions.Cast2MutableCollection``1(System.Collections.ICollection)">
            <summary>Преобразование нетипизированной коллекции (ICollection) к типизированной без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralCollectionExtensions.Map2MutableCollection``1(System.Collections.ICollection,System.Func{System.Object,``0})">
            <summary>Преобразование нетипизированной коллекции (ICollection) к типизированной с помощью внешней функции преобразования без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="T:Intermech.Extensions.DictionaryExtensions">
            <summary>Расширения для словарей</summary>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.LazyGet``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>Получение значения по ключу, при отсутствии ключа в словаре - инициализация значения, занесение в словарь, возвращение результата</summary>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ</param>
            <param name="initLambda">Процедура инициализации значения на случай отсутствия ключа в словаре</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.LazyGet``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>Получение значения по ключу, при отсутствии ключа в словаре - инициализация значения, занесение в словарь, возвращение результата</summary>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ</param>
            <param name="initLambda">Процедура инициализации значения на случай отсутствия ключа в словаре</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>Получение значения по ключу, при отсутствии ключа в словаре - инициализация значения, занесение в словарь, возвращение
                результата</summary>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ</param>
            <param name="initLambda">Процедура инициализации значения на случай отсутствия ключа в словаре</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>Получение значения по ключу, при отсутствии ключа в словаре - инициализация значения, занесение в словарь, возвращение результата</summary>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ</param>
            <param name="initLambda">Процедура инициализации значения на случай отсутствия ключа в словаре</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>Получение значения по ключу, при отсутствии ключа в словаре - инициализация значения, занесение в словарь, возвращение результата</summary>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ</param>
            <param name="value">Значение на случай отсутствия ключа в словаре</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.LazyGetThreadSafe``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>Потокобезопасное получение значения по ключу, при отсутствии ключа в словаре - инициализация значения, занесение в словарь,
                     возвращение результата</summary>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ</param>
            <param name="initLambda">Процедура инициализации значения на случай отсутствия ключа в словаре</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.LazyGetThreadSafe``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>Потокобезопасное получение значения по ключу, при отсутствии ключа в словаре - инициализация значения, занесение в словарь, возвращение результата</summary>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ</param>
            <param name="initLambda">Процедура инициализации значения на случай отсутствия ключа в словаре</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>Добавить в словарь последовательность</summary>
            <param name="dictionary">Словарь</param>
            <param name="items">An IEnumerable of KeyValuePair to append to this</param>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>Добавить в словарь последовательность</summary>
            <param name="dictionary">Словарь</param>
            <param name="items">An IEnumerable of KeyValuePair to append to this</param>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.ValueTuple{``0,``1}[])">
            <summary>Добавить в словарь последовательность</summary>
            <param name="dictionary">Словарь</param>
            <param name="items">An IEnumerable of KeyValuePair to append to this</param>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>Вернуть значение по ключу или значение по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>Вернуть значение по ключу или значение по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.DictionaryExtensions.GetReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Получить ReadOnly враппер словаря</summary>
            <param name="dictionary">Словарь</param>
            <returns>ReadOnly враппер словаря</returns>
        </member>
        <member name="T:Intermech.Extensions.Enumeration">
            <summary>Методы-расширения класса IEnumerable-T</summary>
        </member>
        <member name="F:Intermech.Extensions.Enumeration.MinimumZeroCapacity">
            <summary>Минимальная базовая размерность списка для хранения последовательности</summary>
        </member>
        <member name="F:Intermech.Extensions.Enumeration.DefaultListCapacity">
            <summary>Минимальная базовая размерность списка для хранения последовательности</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.MoreThanOne``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>True если в перечислении более одного элемента</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Оставляет в последовательности только элементы с уникальным значением ключа</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>Добавление в последовательность элементов</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectManyNotNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>Обычный SelectMany + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectManyNotNull``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>Обычный SelectMany + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectManyNotNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>Обычный SelectMany + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectManyNotNull``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>Обычный SelectMany + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.NullOrSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Если енумератор == null, то вернёт тоже null, иначе выполнит Select</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Если перечисление == null вернёт пустое перечисление того же типа. Иначе - вернёт оригинальное перечисление</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectNotNullNotEmptyStrings``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>Обычный Select с преобразованием в последовательность строк + проверка на NullOrEmpty всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectFirstNotNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectFirstNotNullOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectFirstNotNullOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectFirstNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectFirstNotNull``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.SelectFirstNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0})">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Create``1(``0)">
            <summary>Создание последовательности из одного элемента</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.CreateOrEmptyIfNull``1(``0)">
            <summary>Создание последовательности из одного элемента. Если элемент null - вернёт пустую последовательность</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Create``1(``0[])">
            <summary>Создание последовательности из открытого массива параметров</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.BuildArray``1(``0,Intermech.Extensions.Enumeration.GetNextItemDelegate{``0},System.Int32)">
            <summary>Создание последовательности из первого элемента и метода получения следующего</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Create``1(``0,Intermech.Extensions.Enumeration.GetNextItemDelegate{``0})">
            <summary>Создание последовательности из первого элемента и метода получения следующего</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Create``1(``0,Intermech.Extensions.Enumeration.ExpandFuncDelegate{``0})">
            <summary>Создание последовательности из первого элемента и метода получения следующего</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.CreateUnique``1(``0,System.Func{``0,``0},System.Int32)">
            <summary>Создание последовательности из первого элемента и метода получения следующего</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.CreateUnique``1(``0,Intermech.Extensions.Enumeration.ExpandFuncDelegate{``0},System.Int32)">
            <summary>Создание последовательности из первого элемента и метода получения следующего. Результат содержит только
                     уникальные значения</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Enumerate``1(``0[])">
            <summary>Енумерация по открытому массиву параметров</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.NotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Оставляет в перечислении только элементы, отличные от null</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.NotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>Оставляет в перечислении только элементы, отличные от null</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.NotDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Оставляет в перечислении только элементы, отличные от значения по-умолчанию (null у объектов)</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.InvokeForAll``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``0,``1})">
            <summary>Вызов метода для всех значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.InvokeForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>Вызов метода для всех значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.InvokeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Вызов метода для всех ненулевых значений
                     Если handler вернёт false, то обработка прекращается</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.InvokeForFirst``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Вызов метода для первого ненулевого элемента последовательности</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.InvokeForFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{``0})">
            <summary>Вызов метода для первого ненулевого элемента последовательности, соответствующего переданному условию</summary>
            <param name="enumerable">Перечисление</param>
            <param name="condition">Условие, которому должен соответствовать элемент</param>
            <param name="handler">метод обработки элемента</param>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>Returns elements from a sequence as long as a specified condition is true</summary>
            <exception cref="T:System.ArgumentNullException">enumerable or predicate is null</exception>
            <typeparam name="T">Type of the enumerable</typeparam>
            <param name="enumerable">A sequence to return elements from</param>
            <param name="predicate">A function to test each element for a condition</param>
            <param name="includeLastItem">If true - result will include first element that not</param>
            <returns>An System.Collections.Generic.IEnumerable that contains the elements from the input sequence that occur before
                     the element at which the test no longer passes</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Boolean)">
            <summary>Returns elements from a sequence as long as a specified condition is true;
                     The element's index is used in the logic of the predicate function</summary>
            <exception cref="T:System.ArgumentNullException">enumerable or predicate is null</exception>
            <typeparam name="T">Type of the enumerable</typeparam>
            <param name="enumerable">A sequence to return elements from</param>
            <param name="predicate">A function to test each enumerable element for a condition;
                                    the second parameter of the function represents the index of the enumerable element</param>
            <param name="includeLastItem">Должна ли включать последовательность первый элемент, не удовлетворяющий условию</param>
            <returns>An System.Collections.Generic.IEnumerable that contains the elements from the input sequence that occur before
                     the element at which the test no longer passes</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.IsOrdered``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>Проверка того, что перечисление отсортировано по возрастанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.IsOrdered``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>Проверка того, что перечисление отсортировано по возрастанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.IsOrdered``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Boolean)">
            <summary>Проверка того, что перечисление отсортировано по возрастанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.IsOrderedByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>Проверка того, что перечисление отсортировано по возрастанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.IsOrderedByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <summary>Проверка того, что перечисление отсортировано по убыванию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.IsOrderedByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Boolean)">
            <summary>Проверка того, что перечисление отсортировано по убыванию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.OfTypes``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{System.Type})">
            <summary>Fil objects with types listed in types collection</summary>
            <param name="enumerable">Перечисление</param>
            <param name="types">Types collection to exclude</param>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ExceptTypes``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{System.Type},System.Boolean)">
            <summary>Exclude not null objects with types listed in types collection</summary>
            <param name="enumerable">Перечисление</param>
            <param name="types">Types collection to exclude</param>
            <param name="checkSubTypes">If true, than also check to subtypes</param>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.All``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>Determines whether all elements of a two sequences satisfy a condition</summary>
            <returns>true if it succeeds, false if it fails</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Abs(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>Получить перечисление абсолютных значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Abs(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Получить перечисление абсолютных значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Abs(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Получить перечисление абсолютных значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Abs(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Получить перечисление абсолютных значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Abs(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>Получить перечисление абсолютных значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Abs(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>Получить перечисление абсолютных значений</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Получить первый элемент последовательности, а если такового нет - вызвать action и вернуть значение
                     по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>Получить первый элемент последовательности, а если такового нет - вызвать action и вернуть значение
                     по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.TryGetIndex``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32@)">
            <summary>Получить первый элемент последовательности, а если такового нет - вызвать action и вернуть значение
                     по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>Получить первый элемент последовательности, а если такового нет - вызвать action и вернуть значение
                     по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Получить первый элемент последовательности, а если такового нет - вызвать action и вернуть значение
                     по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Получить первый элемент последовательности, удовлетворяющий некому условию, а если такового нет - вызвать
                     action и вернуть значение по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>Получить первый элемент последовательности, удовлетворяющий некому условию, а если такового нет - вызвать
                     action и вернуть значение по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.FirstOrAction``1(System.Collections.Generic.IEnumerable{``0},System.Action,``0)">
            <summary>Получить первый элемент последовательности, а если такового нет - вызвать action и вернуть значение по-
                     умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.FirstOrAction``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Action,``0)">
            <summary>Получить первый элемент последовательности, удовлетворяющий некому условию, а если такового нет - вызвать
                     action и вернуть значение по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.AsReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Конвертировать интерфейс последовательности в IReadOnlyCollection{T}. Проверяет не реализует ли переданный
                     объект IReadOnlyCollection или ICollection, если реализует ICollection - создаёт и возвращает wrapper над
                     ICollection, иначе конвертирует последовательность в список и возвращает его как IReadOnlyCollection{T}</summary>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <param name="capacity">(Optional) размерность массива (начальное значение может быть как меньше, так и больше
                                   финальной размерности массива, но чем точнее будет указан, тем быстрее отработает метод)</param>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.WrapWithCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Оборачивает последовательность в враппер - гибридную оболочку над перечислением, мимикрирующую под коллекцию-
                     список, например поддерживающий чтение кол-ва элементов. При попытке редактирования или обращению к
                     доступу по индексу - преобразует последовательность в список и в дальнейшем работает с ним</summary>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <param name="count">Известное число элементов. Если перечисление - это коллекция или список, то значение параметра
                                игнорируется</param>
            <returns>Гибридная оболочка над перечислением, мимикрирующая под коллекцию-список, например поддерживает чтение кол-ва
                     элементов. При попытке редактирования или обращению к доступу по индексу - преобразует последовательность
                     в список и в дальнейшем работает с ним</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.WrapAsReadOnlyList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Оборачивает последовательность в враппер - гибридную оболочку над перечислением, мимикрирующую под коллекцию-
                     список, например поддерживающий чтение кол-ва элементов. При попытке редактирования или обращению к
                     доступу по индексу - преобразует последовательность в список и в дальнейшем работает с ним</summary>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <param name="count">Известное число элементов. Если перечисление - это коллекция или список, то значение параметра
                                игнорируется</param>
            <returns>Гибридная оболочка над перечислением, мимикрирующая под коллекцию-список, например поддерживает чтение кол-ва
                     элементов. При попытке редактирования или обращению к доступу по индексу - преобразует последовательность
                     в список и в дальнейшем работает с ним</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.WrapWithCount``1(System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable)">
            <summary>Оборачивает последовательность в враппер - гибридную оболочку над перечислением, мимикрирующую под коллекцию-
                     список, например поддерживающий чтение кол-ва элементов. При попытке редактирования или обращению к
                     доступу по индексу - преобразует последовательность в список и в дальнейшем работает с ним</summary>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <param name="countSource">Источник числа элементов</param>
            <returns>Гибридная оболочка над перечислением, мимикрирующая под коллекцию-список, например поддерживает чтение кол-ва
                     элементов. При попытке редактирования или обращению к доступу по индексу - преобразует последовательность
                     в список и в дальнейшем работает с ним</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.WrapWithCapacity``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Оборачивает последовательность в враппер хранящий информацию о размерности перечисления</summary>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <param name="capacity">Оценка вместимости списка, который должен вместить все элементы перечисления</param>
            <returns>Оболочка над перечислением, содержащая информацию о её размерности</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.WrapWithCountOrCapacity``1(System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable,System.Boolean)">
            <summary>Оборачивает последовательность в враппер, хранящий информацию о размерности массива, который мог бы вместить
                     все элементы перечисления ( >= числа элементов )</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <param name="capacitySource">Источник размерности элементов</param>
            <param name="checkCount">(Optional) Если true то сначала попытается получить число элементов</param>
            <returns>Враппер, хранящий информацию о размерности массива,
                     который мог бы вместить все элементы перечисления ( >= числа элементов)</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.WrapAsLazyList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Оборачивает последовательность в враппер - гибридную оболочку над перечислением, мимикрирующую под коллекцию-
                     список, например поддерживающий чтение кол-ва элементов. При попытке редактирования или обращению к
                     доступу по индексу - преобразует последовательность в список и в дальнейшем работает с ним</summary>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <param name="count">Известное число параметров. Если перечисление - это коллекция или список, то значение параметра
                                игнорируется</param>
            <returns>Гибридная оболочка над перечислением, мимикрирующая под коллекцию-список, например поддерживает чтение кол-ва
                     элементов. При попытке редактирования или обращению к доступу по индексу - преобразует последовательность
                     в список и в дальнейшем работает с ним</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.WrapWithCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>!!! Использовать только объектов, реализующих ICollection, IReadOnlyCollection_T или IList_T Оборачивает
                     последовательность в враппер - гибридную оболочку над перечислением, мимикрирующую под коллекцию-список,
                     например поддерживающий чтение кол-ва элементов. При попытке редактирования или обращению к доступу по
                     индексу - преобразует последовательность в список и в дальнейшем работает с ним</summary>
            <param name="enumeration">The enumeration to act on. This cannot be null</param>
            <returns>Гибридная оболочка над перечислением, мимикрирующая под коллекцию-список, например поддерживает чтение кол-ва
                     элементов. При попытке редактирования или обращению к доступу по индексу - преобразует последовательность
                     в список и в дальнейшем работает с ним</returns>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Преобразование элементов последовательности из TSource в TOutput с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.MapNotNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Преобразование элементов последовательности из TSource в TOutput с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.CastWithCapacity``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>Преобразование типов элементов последовательности из TSource в TOutput, где TOutput - интерфейс,
                     поддерживаемый TSource или его базовый класс</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.Expand``1(System.Collections.Generic.IEnumerable{``0},Intermech.Extensions.Enumeration.ExpandFuncDelegate{``0})">
            <summary>Рекурсивное разворачивание коллекции с помощью внешней функции. Помогает например развернуть дерево, получив
                     список всех дочерних нод вне зависимости от глубины вложенности. Контроль уникальности и/или бесконечных
                     циклов не производится, использовать только там, где есть гарантия отсутствия подобного</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ExpandSafe``1(System.Collections.Generic.IEnumerable{``0},Intermech.Extensions.Enumeration.ExpandFuncDelegate{``0},System.Int32)">
            <summary>Рекурсивное разворачивание коллекции с помощью внешней функции.
                     Помогает например развернуть дерево, получив список всех дочерних нод вне зависимости от глубины вложенности.
                     Производится контроль уникальности</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.AsArrayOf``1(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Быстрое преобразование к массиву заданного типа.
                     По возможности пытается получить число элементов и благодаря этому ускорить преобразование</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll2Long(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из long
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll2Int(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из int
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll2String(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из string
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll2Bool(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из bool
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll2Double(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из double
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll2DateTime(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из DataTime
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll``1(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из long
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из long
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ConvertAll``1(System.Collections.IEnumerable,System.Converter{System.Object,``0})">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из long
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ToOneOrMore``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам
             ICollection, ICollection_T и IReadOnlyCollection_T.
            </summary>
            <param name="enumeration">Последовательность. </param>
        </member>
        <member name="M:Intermech.Extensions.Enumeration.ToOneOrMore``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
             Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам
             ICollection, ICollection_T и IReadOnlyCollection_T.
            </summary>
            <param name="enumeration">Последовательность. </param>
            <param name="convertor">Внешний метод конвертации объектов</param>
            <returns>The given data converted to an OneOrMore&lt;TOutput&gt;</returns>
        </member>
        <member name="T:Intermech.Extensions.EnumerationOfEnumerations">
            <summary>Операции над перечислением перечислений</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationOfEnumerations.IntersectAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Получить список значений, которые содержатся во всех перечислениях</summary>
            <returns>Список значений, которые содержатся во всех перечислениях</returns>
        </member>
        <member name="T:Intermech.Extensions.GeneralEnumerationExtensions">
            <summary>Расширения для интерфейса IEnumeration (нетипизированного)</summary>
        </member>
        <member name="F:Intermech.Extensions.GeneralEnumerationExtensions.MinimumZeroCapacity">
            <summary>Минимальная базовая вместимость списка для хранения последовательности</summary>
        </member>
        <member name="F:Intermech.Extensions.GeneralEnumerationExtensions.DefaultListCapacity">
            <summary>Минимальная базовая вместимость списка для хранения последовательности</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.GetRecommendedCapacity(System.Collections.IEnumerable,System.Int32)">
            <summary>Если это возможно - рассчитать рекомендуемую вместимость внутреннего массива, который должен использоваться
                     коллекцией для хранения всех элементов последовательности</summary>
            <param name="enumeration">Последовательность</param>
            <param name="baseCapacity">(Optional) Минимальная вместимость. Результат не может быть меньше этого значения</param>
            <returns>Рекомендуемая вместимость</returns>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.TryGetCapacity(System.Collections.IEnumerable)">
            <summary>Если это возможно - рассчитать рекомендуемую вместимость внутреннего массива, который должен использоваться
                     коллекцией для хранения всех элементов последовательности</summary>
            <param name="enumeration">Последовательность</param>
            <returns>Размерность коллекции если она найдена, иначе null</returns>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.TryGetCapacity(System.Collections.IEnumerable,System.Int32@)">
            <summary>Если это возможно - рассчитать рекомендуемую вместимость внутреннего массива, который должен использоваться
                     коллекцией для хранения всех элементов последовательности</summary>
            <param name="enumeration">Последовательность</param>
            <param name="result">[out] вместимость коллекции если она найдена, иначе -1</param>
            <returns>True, если вместимость удалось найти, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.TrySetCapacity(System.Collections.IEnumerable,System.Int32)">
            <summary>Попытаться установить вместимость коллекции</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.TryGetCountOrCapacity(System.Collections.IEnumerable)">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <param name="enumeration">Последовательность</param>
            <returns>Число элементов или null если число найти не удалось</returns>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.TryGetCountOrCapacity(System.Collections.IEnumerable,System.Int32@)">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <param name="enumeration">Последовательность</param>
            <param name="result">[out] число элементов или вместимость из ICapacityOwner, если число найти не удалось,
                                 иначе -1</param>
            <returns>True, если число элементов или вместимость из ICapacityOwner удалось найти, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.TryGetCount(System.Collections.IEnumerable)">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <param name="enumeration">Последовательность</param>
            <returns>Число элементов или null если число найти не удалось</returns>
        </member>
        <member name="M:Intermech.Extensions.GeneralEnumerationExtensions.TryGetCount(System.Collections.IEnumerable,System.Int32@)">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <param name="enumeration">Последовательность</param>
            <param name="result">[out] Число элементов если число удалось найти, иначе -1</param>
            <returns>True, если число элементов удалось найти, иначе false</returns>
        </member>
        <member name="T:Intermech.Extensions.HashSetExtensions">
            <summary>Функции-расширения класса HashSet</summary>
        </member>
        <member name="M:Intermech.Extensions.HashSetExtensions.AddCheckUnique``1(System.Collections.Generic.HashSet{``0},``0,System.String)">
            <summary>Добавить в HashSet{T} значение, но перед добавлением проверить что его там нет</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs</exception>
            <param name="hashSet">HashSet, в который должно произойти вставка элементов</param>
            <param name="value">The value</param>
            <param name="exceptMessage">(Optional) Message describing the except. This may be null</param>
        </member>
        <member name="M:Intermech.Extensions.HashSetExtensions.AddCheckUnique``1(System.Collections.Generic.HashSet{``0},``0,System.Func{``0,System.Exception})">
            <summary>Добавить в HashSet{T} значение, но перед добавлением проверить что его там нет</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs</exception>
            <param name="hashSet">HashSet, в который должно произойти вставка элементов</param>
            <param name="value">The value</param>
            <param name="exceptionConstructor">(Optional) Message describing the except. This may be null</param>
        </member>
        <member name="M:Intermech.Extensions.HashSetExtensions.AddRangeCheckUnique``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Добавить в HashSet{T} значение, но перед добавлением проверить что его там нет</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs</exception>
            <param name="hashSet">HashSet, в который должно произойти вставка элементов</param>
            <param name="values">коллекция значений</param>
            <param name="exceptMessage">(Optional) Message describing the except. This may be null</param>
        </member>
        <member name="M:Intermech.Extensions.HashSetExtensions.AddRangeCheckUnique``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Exception})">
            <summary>Добавить в HashSet{T} значение, но перед добавлением проверить что его там нет</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs</exception>
            <param name="hashSet">HashSet, в который должно произойти вставка элементов</param>
            <param name="values">коллекция значений</param>
            <param name="exceptionConstructor">(Optional) Message describing the except. This may be null</param>
        </member>
        <member name="T:Intermech.Extensions.IReadOnlyCollectionExtensions">
            <summary>Расширения для интерфейса IReadOnlyCollection_T</summary>
        </member>
        <member name="T:Intermech.Extensions.IReadOnlyDictionaryExtensions">
            <summary>Расширения для интерфейса IReadOnlyDictionary</summary>
        </member>
        <member name="M:Intermech.Extensions.IReadOnlyDictionaryExtensions.GetOrDefaultReadOnly``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>Вернуть значение по ключу или значение по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.IReadOnlyDictionaryExtensions.GetOrDefaultReadOnly``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>Вернуть значение по ключу или значение по-умолчанию</summary>
        </member>
        <member name="M:Intermech.Extensions.IReadOnlyDictionaryExtensions.CastValuesReadOnlyDictionary``3(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Boolean)">
            <summary>Отложенное преобразование типа значение словаря</summary>
        </member>
        <member name="M:Intermech.Extensions.IReadOnlyDictionaryExtensions.SelectValuesReadOnlyDictionary``3(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Func{``1,``2},System.Boolean)">
            <summary>Отложенное преобразование значений словаря</summary>
        </member>
        <member name="T:Intermech.Extensions.IReadOnlyListExtensions">
            <summary>Расширения для интерфейса IReadOnlyList</summary>
        </member>
        <member name="T:Intermech.Extensions.ListExtensions">
            <summary>Расширение класса List</summary>
            <remarks>Для новых функций желательно писать тесты</remarks>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.GetRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Creates a shallow copy of a range of elements in the source list</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="source">The source to act on. This cannot be null</param>
            <param name="index">The zero-based System.Collections.Generic.List`1 index at which the range starts</param>
            <param name="count">The number of elements in the range</param>
            <returns>A shallow copy of a range of elements in the source list</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.FromIndexToRight``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Енумерация элементов начиная с переданного индекса в сторону последнего элемента списка</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the required range</exception>
            <param name="list">Список, из которого делается выбор элементов</param>
            <param name="startIndex">Начальный индекс списка</param>
            <returns>Енумератор элементов списка</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.FromIndexToLeft``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Енумерация элементов начиная с переданного индекса в сторону первого элемента списка</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the required range</exception>
            <param name="list">Список, из которого делается выбор элементов</param>
            <param name="startIndex">Начальный индекс списка</param>
            <returns>Енумератор элементов списка</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.Between``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Енумерация элементов списка, индексы которых находятся между двумя значениями (включительно)</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the required range</exception>
            <param name="list">Список, из которого делается выбор элементов</param>
            <param name="startIndex">Начальный индекс элемента списка (включительно)</param>
            <param name="finishIndex">Конечный индекс элемента списка (включительно)</param>
            <returns>Енумератор элементов списка, индексы которых находятся между двумя значениями (включительно)</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryIndexOfAnyMatch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает индекс первого попавшегося элемента, удовлетворяющего условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Zero-base индекс найденного элемента (-1 если не нашлось)</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryTryIndexOfAnyMatch``1(System.Collections.Generic.IList{``0},System.Int32@,System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает индекс первого попавшегося элемента, удовлетворяющего условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="index">[out] Zero-base индекс найденного элемента (-1 если не нашлось)</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>True, если индекс был найден, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryGetAnyMatch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает первый попавшийся элемент, удовлетворяющий условию, он не обязательно будет
                     первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Найденный элемент, либо значение по-умолчанию для типа элемента списка (null для классов)</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryTryGetAnyMatch``1(System.Collections.Generic.IList{``0},``0@,System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает первый попавшийся элемент, удовлетворяющий условию, он не обязательно будет
                     первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="result">[out] Найденный элемент, либо значение по-умолчанию для типа элемента списка (null для классов)</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>True, если индекс был найден, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryIndexOfLeftMostMatch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает индекс самого первого в списке элемента, удовлетворяющего условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Zero-base индекс найденного элемента (-1 если не нашлось)</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryTryIndexOfLeftMostMatch``1(System.Collections.Generic.IList{``0},System.Int32@,System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает индекс самого первого в списке элемента, удовлетворяющего условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="index">[out] Zero-base индекс найденного элемента (-1 если не нашлось)</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>True, если индекс был найден, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryGetLeftMostMatch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает самого первого в списке элемента, удовлетворяющий условию, он не обязательно
                     будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Найденный элемент, либо значение по-умолчанию для типа элемента списка (null для классов)</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryTryGetLeftMostMatch``1(System.Collections.Generic.IList{``0},``0@,System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает самого первого в списке элемента, удовлетворяющий условию, он не обязательно
                     будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="result">[out] Найденный элемент, либо значение по-умолчанию для типа элемента списка (null для классов)</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>True, если индекс был найден, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryIndexOfRightMostMatch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает индекс самого последнего в списке элемента, удовлетворяющего условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Zero-base индекс найденного элемента (-1 если не нашлось)</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryTryIndexOfRightMostMatch``1(System.Collections.Generic.IList{``0},System.Int32@,System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает индекс самого последнего в списке элемента, удовлетворяющего условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="index">[out] Zero-base индекс найденного элемента (-1 если не нашлось)</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>True, если индекс был найден, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryGetRightMostMatch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает самого последнего в списке элемента, удовлетворяющий условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Найденный элемент, либо значение по-умолчанию для типа элемента списка (null для классов)</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryTryGetRightMostMatch``1(System.Collections.Generic.IList{``0},``0@,System.Func{``0,System.Int32})">
            <summary>Быстрый поиск в сортированном списке. Возвращает самого последнего в списке элемента, удовлетворяющий условию, он не
                     обязательно будет первым в списке (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="result">[out] Найденный элемент, либо значение по-умолчанию для типа элемента списка (null для классов)</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>True, если индекс был найден, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryTryIndexOfMultipleValues``1(System.Collections.Generic.IList{``0},System.Int32@,System.Int32@,System.Func{``0,System.Int32})">
            <summary>Быстрый (бинарный) поиск индексов нескольких элементов в заранее отсортированном списке. (!!! Использовать только в заранее
                     отсортированном списке !!!)</summary>
            <param name="list">Заранее отсортированный список</param>
            <param name="low">[out] индекс первого элемента, удовлетворяющего переданному условию (-1, если ничего не найдено)</param>
            <param name="high">[out] индекс последнего элемента, удовлетворяющего переданному условию (-1, если ничего не найдено)</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>true если найден хотя бы 1 элемент, удовлетворяющий условию, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryWhere``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Получение енумерации элементов заранее сортированного списка, которые удовлетворяют переданному условию. Для поиска
                     соответствия используется логарифмический алгоритм (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Енумерации элементов, которая удовлетворяет переданному условию</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.BinaryWhereArray``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>Получение массива элементов заранее сортированного списка, которые удовлетворяют переданному условию. Для поиска соответствия
                     используется логарифмический алгоритм (!!! Использовать только в заранее отсортированном списке !!!)</summary>
            <param name="list">Список, в котором будет производиться поиск</param>
            <param name="predicate">Лямбда-функция сравнения элементов</param>
            <returns>Массив элементов, которые удовлетворяет переданному условию</returns>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.CreateFromSingle``1(``0)">
            <summary>Создание списка из существующего элемента</summary>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.RemoveLast``1(System.Collections.Generic.IList{``0},``0)">
            <summary>Удаление последнего вхождения элемента в список</summary>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.CastList``2(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>Преобразование списка элементов TSource к неизменному списку элементов TOutput, где TOutput - интерфейс реализуемый TSource или его базовый класс</summary>
        </member>
        <member name="M:Intermech.Extensions.ListExtensions.MapList``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Boolean)">
            <summary>Преобразование списка элементов TSource к неизменному списку элементов TOutput с помощью внешней функции</summary>
        </member>
        <member name="T:Intermech.Extensions.GeneralListExtensions">
            <summary>Расширение над интерфейсом нетипизированного списка (IList)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralListExtensions.CastList``1(System.Collections.IList)">
            <summary>Преобразование нетипизированного списка (IList) к типизированному без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralListExtensions.MapList``1(System.Collections.IList,System.Func{System.Object,``0})">
            <summary>Преобразование нетипизированного списка (IList) к типизированному с помощью внешней функции преобразования без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralListExtensions.Cast2MutableList``1(System.Collections.IList)">
            <summary>Преобразование нетипизированного списка (IList) к типизированному без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="M:Intermech.Extensions.GeneralListExtensions.Map2MutableList``1(System.Collections.IList,System.Func{System.Object,``0})">
            <summary>Преобразование нетипизированного списка (IList) к типизированному с помощью внешней функции преобразования без клонирования источника (создаётся обёртка)</summary>
        </member>
        <member name="T:Intermech.Extensions.QueueExtensions">
            <summary>Методы-расширения системного класса Queue</summary>
        </member>
        <member name="M:Intermech.Extensions.QueueExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Добавить в очередь перечисление элементов</summary>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.First``1(System.Tuple{``0,``0},System.Func{``0,System.Boolean})">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.TryGetFirst``1(System.Tuple{``0,``0},System.Func{``0,System.Boolean},``0@)">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.First``1(System.Tuple{``0,``0,``0},System.Func{``0,System.Boolean})">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.TryGetFirst``1(System.Tuple{``0,``0,``0},System.Func{``0,System.Boolean},``0@)">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.FirstNotNull``1(System.Tuple{``0,``0},System.Func{``0,System.Boolean})">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.TryGetFirstNotNull``1(System.Tuple{``0,``0},``0@)">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.TryGetFirstNotNull``1(System.Tuple{``0,``0},Intermech.Extensions.TupleExtensions.NotNullFilter{``0},``0@)">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.FirstNotNull``1(System.Tuple{``0,``0,``0},Intermech.Extensions.TupleExtensions.NotNullFilter{``0})">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.TryGetFirstNotNull``1(System.Tuple{``0,``0,``0},``0@)">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.TupleExtensions.TryGetFirstNotNull``1(System.Tuple{``0,``0,``0},Intermech.Extensions.TupleExtensions.NotNullFilter{``0},``0@)">
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in predicate</exception>
        </member>
        <member name="M:Intermech.Extensions.ListFactory.Create``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Creates a new instance of the System.Collections.Generic.List_T class that is empty and has the specified
                     initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="enumeration">The enumeration whose elements are copied to the new list</param>
            <param name="capacity">(Optional) The number of elements that the new list can initially store</param>
            <returns>A List&lt;T&gt;. This will never be null</returns>
        </member>
        <member name="M:Intermech.Extensions.ListFactory.Create``1(``0[])">
            <summary>Creates a new instance of the System.Collections.Generic.List_T class that is empty and has the specified
                     initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="items">The array whose elements are copied to the new list</param>
        </member>
        <member name="M:Intermech.Extensions.ListFactory.Create``1(``0)">
            <summary>Creates a new instance of the System.Collections.Generic.List_T class that is empty and has the specified
                     initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="item">Element to be copied to the new list</param>
        </member>
        <member name="T:Intermech.Extensions.FixedDictionary">
            <summary>
            
            Фиксированный словарь, в котором ключи из значения  являются просто полями объекта
            (для словарей разной размерности создаются объекты разных типов, с разным числом полей).
            
            В том случае, если число элементов больше 15 - создаётся обычный Dictionary
            
            </summary>
            <remarks>
            
            Ориентировано на применение где предполагается частое создание словарей с преимущественно небольшим числом записей, а так же требуется скорость работы.
            Например пара колонка_запроса_в_БД -> колонка_в_наборе_данных, что позволяет отвязаться от индексов.
            Кроме того оптимизация коснулось и того, что поиск элемента по ключу производится из допущения что значений словаря полей производится вероятнее всего
            в том же порядке, как происходило их добавление, либо это будет чтение одинаковых ключей (оно и тоже поле у всех строк таблица результата запросу) -
            линейный в силу этого поиск записи словаря по ключу начинается с того же самого ключа, который был найден последним и далее по кругу
            (то есть после третьего ключа сравнят с четвёртым, и так до конца списка ключей, после чего с его начала)
            Так например с высокой вероятностью будет происходить при чтении значений полей из набора данных полученного из запроса в БД
            
            </remarks>
        </member>
        <member name="F:Intermech.Extensions.FixedDictionary.NoHashTypes">
            <summary>Типы ключей для которых хэширование бессмысленно и даже ухудшит производительность</summary>
        </member>
        <member name="M:Intermech.Extensions.FixedDictionary.Create``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Nullable{System.Int32})">
            <summary>
            
            Создание фиксированный словаря, в котором ключи из значения  являются просто полями объекта
            (для словарей разной размерности создаются объекты разных типов, с разным числом полей).
            
            В том случае, если число элементов больше 15 - создаётся обычный Dictionary
            
            </summary>
            <remarks>
            
            Ориентировано на применение где предполагается частое создание словарей с преимущественно небольшим числом записей, а так же требуется скорость работы.
            Например пара колонка_запроса_в_БД -> колонка_в_наборе_данных, что позволяет отвязаться от индексов.
            Кроме того оптимизация коснулось и того, что поиск элемента по ключу производится из допущения что значений словаря полей производится вероятнее всего
            в том же порядке, как происходило их добавление - линейный поиск записи словаря по ключу начинается с того же самого ключа, который был найден последним и далее по кругу
            (то есть после третьего ключа сравнят с четвёртым, и так до конца списка ключей, после чего с его начала)
            Так например с высокой вероятностью будет происходить при чтении значений полей из набора данных полученного из запроса в БД
            
            </remarks>
        </member>
        <member name="M:Intermech.Extensions.FixedDictionary.Create``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Nullable{System.Int32})">
            <summary>
            
            Создание фиксированный словаря, в котором ключи из значения  являются просто полями объекта
            (для словарей разной размерности создаются объекты разных типов, с разным числом полей).
            
            В том случае, если число элементов больше 15 - создаётся обычный Dictionary
            
            </summary>
            <remarks>
            
            Ориентировано на применение где предполагается частое создание словарей с преимущественно небольшим числом записей, а так же требуется скорость работы.
            Например пара колонка_запроса_в_БД -> колонка_в_наборе_данных, что позволяет отвязаться от индексов.
            Кроме того оптимизация коснулось и того, что поиск элемента по ключу производится из допущения что значений словаря полей производится вероятнее всего
            в том же порядке, как происходило их добавление - линейный поиск записи словаря по ключу начинается с того же самого ключа, который был найден последним и далее по кругу
            (то есть после третьего ключа сравнят с четвёртым, и так до конца списка ключей, после чего с его начала)
            Так например с высокой вероятностью будет происходить при чтении значений полей из набора данных полученного из запроса в БД
            
            </remarks>
        </member>
        <member name="T:Intermech.Extensions.FixedSet">
            <summary>
            
            Фиксированный набор, в котором ключи из значения  являются просто полями объекта
            (для наборов разной размерности создаются объекты разных типов, с разным числом полей).
            
            В том случае, если число элементов больше 15 - создаётся обычный HashSet
            
            Ориентировано на применение где предполагается частое создание наборов с преимущественно небольшим числом записей,
            а так же требуется скорость работы.
            
            </summary>
        </member>
        <member name="F:Intermech.Extensions.FixedSet.NoHashTypes">
            <summary>Типы ключей для которых хэширование бессмысленно и даже ухудшит производительность</summary>
        </member>
        <member name="M:Intermech.Extensions.FixedSet.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Nullable{System.Int32})">
            <summary>
            
            Создание фиксированного набор, в котором ключи из значения  являются просто полями объекта
            (для наборов разной размерности создаются объекты разных типов, с разным числом полей).
            
            В том случае, если число элементов больше 15 - создаётся обычный HashSet
            
            Ориентировано на применение где предполагается частое создание наборов с преимущественно небольшим числом записей,
            а так же требуется скорость работы.
            
            </summary>
        </member>
        <member name="T:Intermech.Extensions.IEnumerableWithCapacity`1">
            <summary>Перечисление элементов с информации о рекомендованной размерности массива,
                     достаточной для хранения всех элементов последовательности</summary>
        </member>
        <member name="T:Intermech.Extensions.IEnumerableWithCapacityExtensions">
            <summary>Расширения для интерфейса IEnumerableWithCapacity_T</summary>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableWithCapacityExtensions.Map``2(Intermech.Extensions.IEnumerableWithCapacity{``0},System.Func{``0,``1})">
            <summary>Преобразование элементов последовательности из TSource в TOutput с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableWithCapacityExtensions.CastWithCapacity``2(Intermech.Extensions.IEnumerableWithCapacity{``0})">
            <summary>Преобразование типов элементов последовательности из TSource в TOutput, где TOutput - интерфейс,
                     поддерживаемый TSource или его базовый класс</summary>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableWithCapacityExtensions.Filter``1(Intermech.Extensions.IEnumerableWithCapacity{``0},System.Func{``0,System.Boolean})">
            <summary>Фильтрация последовательности с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Extensions.IReadOnlySet`1.Contains(`0)">
            <summary>Принадлежит ли набору данных</summary>
        </member>
        <member name="T:Intermech.Extensions.EnumerationCastAdapter`2">
            <summary>Перечисление с информацией о размерности массива, необходимого для хранения результата. Применяется для
                     оптимизации LINQ запросов к коллекциям с последующим преобразованием результата к коллекциям (известна
                     целевая размерность списка-массива). см. N:\Intermech.Bcl\Collections\IEnumerableWithCapacity.cs</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationCastAdapter`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationCastAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Extensions.EnumerationCastAdapter`2.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="T:Intermech.Extensions.EnumerationMapAdapter`2">
            <summary>Перечисление с информацией о размерности массива, необходимого для хранения результата.
                     Применяется для оптимизации LINQ запросов к коллекциям с последующим преобразованием результата к коллекциям (известна целевая размерность списка-массива).
                     см. N:\Intermech.Bcl\Collections\IEnumerableWithCapacity.cs </summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationMapAdapter`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationMapAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Extensions.EnumerationMapAdapter`2.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="T:Intermech.Extensions.EnumerationFilterAdapter`1">
            <summary>Перечисление с информацией о размерности массива, необходимого для хранения результата. Применяется для
                     оптимизации LINQ запросов к коллекциям с последующим преобразованием результата к коллекциям (известна
                     целевая размерность списка-массива). см. N:\Intermech.Bcl\Collections\IEnumerableWithCapacity.cs</summary>
            <typeparam name="T">Generic type parameter</typeparam>
        </member>
        <member name="F:Intermech.Extensions.EnumerationFilterAdapter`1._enumerable">
            <summary>The enumerable</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationFilterAdapter`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationFilterAdapter`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Extensions.EnumerationFilterAdapter`1.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="T:Intermech.Extensions.EnumerationOperationAdapter`1">
            <summary>Перечисление с информацией о размерности массива, необходимого для хранения результата. Применяется для
                     оптимизации LINQ запросов к коллекциям с последующим преобразованием результата к коллекциям (известна
                     целевая размерность списка-массива). см. N:\Intermech.Bcl\Collections\IEnumerableWithCapacity.cs</summary>
            <typeparam name="T">Generic type parameter</typeparam>
        </member>
        <member name="M:Intermech.Extensions.EnumerationOperationAdapter`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationOperationAdapter`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Extensions.EnumerationOperationAdapter`1.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="T:Intermech.Extensions.IUncommittedChangesAware`2">
            <summary>Интерфейс декларации поддержки получение истории модификации.</summary>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChangesAware`2.UncommittedChanges">
            <summary>Получить копленную дельту изменений коллекции.</summary>
        </member>
        <member name="M:Intermech.Extensions.IUncommittedChangesAware`2.MarkChangesAsCommitted">
            <summary>Пометить все изменения как сохранённые (обнулить AddedItems, DeletedItems, UpdatedItems)</summary>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChangesAware`2.TrackChanges">
            <summary>Флаг отслеживания изменений. По-умолчанию true</summary>
        </member>
        <member name="M:Intermech.Extensions.IUncommittedChangesAware`2.LockTrackChangesCount">
            <summary>Временно заблокировать отслеживание изменений</summary>
        </member>
        <member name="M:Intermech.Extensions.IUncommittedChangesAware`2.UnlockTrackChangesCount">
            <summary>Разблокировать отслеживание изменений</summary>
        </member>
        <member name="M:Intermech.Extensions.IUncommittedChangesAware`2.LockTrackChangesBlock">
            <summary>Блокировка отслеживания изменений, должна использоваться в using, на выходе из которого блокировка снимается</summary>
        </member>
        <member name="T:Intermech.Extensions.IUncommittedChangesAware`1">
            <summary>Интерфейс коллекции поддерживающей сохранение истории модификации.</summary>
        </member>
        <member name="T:Intermech.Extensions.IUncommittedChanges`1">
            <summary>Список изменений для коммита</summary>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChanges`1.DeletedItems">
            <value>Удалённые элементы</value>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChanges`1.AddedItems">
            <value>Новые элементы</value>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChanges`1.UpdatedItems">
            <value>Изменённые элементы</value>
        </member>
        <member name="M:Intermech.Extensions.IUncommittedChanges`1.MarkChangesAsCommitted">
            <summary>Пометить все изменения как сохранённые (обнулить AddedItems, DeletedItems, UpdatedItems)</summary>
        </member>
        <member name="T:Intermech.Extensions.CollectionUncommittedChangesAware`2">
            <summary>
            База для коллекции хранящей историю изменений.
            Удобно для использования где коллекции могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware`2.Items">
            <summary>Внутренняя коллекция</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware`2.DeletedItems">
            <summary>Коллекция удалённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware`2.AddedItems">
            <summary>Коллекция новых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware`2.UpdatedItems">
            <summary>Коллекция элементов, подвергшихся модификации</summary>
        </member>
        <member name="F:Intermech.Extensions.CollectionUncommittedChangesAware`2.UncommittedChangesImpl`1.AddedItems">
            <value>Новые элементы</value>
        </member>
        <member name="F:Intermech.Extensions.CollectionUncommittedChangesAware`2.UncommittedChangesImpl`1.UpdatedItems">
            <value>Изменённые элементы</value>
        </member>
        <member name="M:Intermech.Extensions.CollectionUncommittedChangesAware`2.UncommittedChangesImpl`1.MarkChangesAsCommitted">
            <summary>Пометить все изменения как сохранённые (обнулить AddedItems, DeletedItems, UpdatedItems)</summary>
        </member>
        <member name="T:Intermech.Extensions.IUncommittedChangesAware_NotNullItems`1">
            <summary>Интерфейс декларации поддержки получение истории модификации.</summary>
        </member>
        <member name="T:Intermech.Extensions.IUncommittedChanges_NotNullItems`1">
            <summary>Интерфейс истории модификации</summary>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChanges_NotNullItems`1.DeletedItems">
            <value>Удалённые элементы</value>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChanges_NotNullItems`1.AddedItems">
            <value>Новые элементы</value>
        </member>
        <member name="P:Intermech.Extensions.IUncommittedChanges_NotNullItems`1.UpdatedItems">
            <value>Изменённые элементы</value>
        </member>
        <member name="T:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2">
            <summary>
            База для коллекции хранящей историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
            <remarks>
            В отличии от базового класса элементы списка помечены как ItemNotNull - упрощает отладку решарпером
            </remarks>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.DeletedItems">
            <summary>Коллекция удалённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.DeletedItemsCollection">
            <summary>Коллекция удалённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.AddedItems">
            <summary>Коллекция новых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.AddedItemsCollection">
            <summary>Коллекция новых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.UpdatedItems">
            <summary>Коллекция изменённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.UpdatedItemsCollection">
            <summary>Коллекция изменённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.UncommittedChangesImpl_NotNullItems`1.Intermech#Extensions#IUncommittedChanges_NotNullItems{T}#DeletedItems">
            <value>Удалённые элементы</value>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.UncommittedChangesImpl_NotNullItems`1.Intermech#Extensions#IUncommittedChanges_NotNullItems{T}#AddedItems">
            <value>Новые элементы</value>
        </member>
        <member name="P:Intermech.Extensions.CollectionUncommittedChangesAware_NotNullItems`2.UncommittedChangesImpl_NotNullItems`1.Intermech#Extensions#IUncommittedChanges_NotNullItems{T}#UpdatedItems">
            <value>Изменённые элементы</value>
        </member>
        <member name="T:Intermech.Extensions.ItemsWithKeysUncommittedChangesAware`2">
            <summary>
            Список-словарь элементов с ключами хранящего историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ItemsWithKeysUncommittedChangesAware`3">
            <summary>
            База для списка-словаря элементов с ключами хранящего историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов.
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ListUncommittedChangesAware`1">
            <summary>
            Простой список хранящий историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ObservableListUncommittedChangesAware`1">
            <summary>
            Простой список хранящий историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ListUncommittedChangesAware`2">
            <summary>
            База для списка хранящего историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`1">
            <summary>
            Простой список хранящий историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ObservableListUncommittedChangesAware_NotNullItems`1">
            <summary>
            Простой список хранящий историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2">
            <summary>
            База для списка хранящего историю изменений.
            Удобно для использования где списки могут редактироваться,
            а потом при сохранении в БД получить списки удалённых, новых и изменённых элементов
            </summary>
        </member>
        <member name="P:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2.DeletedItems">
            <summary>Коллекция удалённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2.DeletedItemsCollection">
            <summary>Коллекция удалённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2.AddedItems">
            <summary>Коллекция новых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2.AddedItemsCollection">
            <summary>Коллекция новых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2.UpdatedItems">
            <summary>Коллекция изменённых элементов</summary>
        </member>
        <member name="P:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2.UpdatedItemsCollection">
            <summary>Коллекция изменённых элементов</summary>
        </member>
        <member name="T:Intermech.Extensions.ListUncommittedChangesAware_NotNullItems`2.UncommittedChangesImpl_NotNullItems`1">
            <summary>Имплементация интерфейса накопленной дельты изменений</summary>
            <remarks>
            По сути - копия из NotNullItems коллекции, т.к. этот класс из неё не наследуются,
            для облегчения работы в потомках
            </remarks>
        </member>
        <member name="F:Intermech.Extensions.ItemsWithKey`2.CreateDictionaryOnAfterItemMoreThan">
            <summary>После какого числа элементов строится словарь</summary>
        </member>
        <member name="T:Intermech.Extensions.BindingFlagsExtensions">
            <summary>Extensions for <see cref="T:System.Reflection.BindingFlags"/></summary>
        </member>
        <member name="T:Intermech.Extensions.Boxed`1">
            <summary>wrapper class to box the initialized value, this is mainly created to avoid boxing/unboxing the value each
                time the value is called in case T is a value type</summary>
        </member>
        <member name="T:Intermech.Extensions.CallOnDispose">
            <summary>Оболочка для участка кода, заканчивающаяся вызовом лямбды</summary>
        </member>
        <member name="T:Intermech.Extensions.ComparerByKey`2">
            <summary>Реализация IEqualityComparer с помощью лямбды с извлечением ключа, по которому производится сравнение</summary>
        </member>
        <member name="T:Intermech.Extensions.Container`1">
            <summary>Контейнер значения</summary>
        </member>
        <member name="T:Intermech.Extensions.ValueContainer`1">
            <summary>Контейнер значения</summary>
        </member>
        <member name="T:Intermech.Extensions.IEntityRefByKeyBase`2">
            <summary>Интерфейс для ссылки на сущность типа <see cref="!:TEntity"/> по некоторому ключу типа <see cref="!:TKey"/></summary>
        </member>
        <member name="P:Intermech.Extensions.IEntityRefByKeyBase`2.Key">
            <summary>Ключ ко которому сформирована ссылка на сущность</summary>
        </member>
        <member name="P:Intermech.Extensions.IEntityRefByKeyBase`2.Entity">
            <summary>Ссылка на сущность, на которую ссылается ключ <see cref="P:Intermech.Extensions.EntityRefByKeyBase`2.Key"/></summary>
        </member>
        <member name="T:Intermech.Extensions.EntityRefByKeyBase`2">
            <summary>Абстрактный базис для ссылки на сущность типа <see cref="!:TEntity"/> по некоторому ключу типа <see cref="!:TKey"/>.
                     Ссылка не строгая, то есть сущность может быть не найдена и в этом случае будет вызван делегат, переданный в конструктор"/>
                     Поиск сущности по ключу осуществляется с помощью делегата, передаваемого в конструктор</summary>
        </member>
        <member name="P:Intermech.Extensions.EntityRefByKeyBase`2.Entity">
            <summary>Ссылка на сущность, на которую ссылается ключ <see cref="P:Intermech.Extensions.EntityRefByKeyBase`2.Key"/></summary>
        </member>
        <member name="P:Intermech.Extensions.EntityRefByKeyBase`2.KeyIsEmpty">
            <summary>Проверка ключа на пустое значение. При пустом значении ключа сущность не ищется, сразу возвращается null</summary>
        </member>
        <member name="T:Intermech.Extensions.EntityRefByKey`2">
            <summary>Ссылка на сущность типа <see cref="!:TEntity"/> по некоторому ключу типа <see cref="!:TKey"/>.
                     Ссылка не строгая, то есть сущность может быть не найдена в БД и в этом случае будет вызван делегат, переданный в конструктор
                     Поиск сущности по ключу осуществляется с помощью делегата, передаваемого в конструктор</summary>
        </member>
        <member name="T:Intermech.Extensions.EqualityComparerByKey`2">
            <summary>Реализация IEqualityComparer с помощью лямбды с извлечением ключа, по которому производится сравнение</summary>
        </member>
        <member name="T:Intermech.Extensions.EventsAccumulator">
            <summary>
            Класс для накопления и последующей пакетной обработки серии событий.
            
            Был написан при решении следующей проблемы: при листании списка задач в редакторе проекта с помощью колеса мыши начинались тормоза -
            причина проблемы была в том, что колесо мыши генерирует массу событий OnScroll, в обработке каждого из которых вызывалась перерисовка диаграммы Гантта, которая "тяжёлая"
            
            Этот класс откладывает перерисовку до окончания серии событий (используется таймер, который ждет чтобы за указанное время delay, по-умолчанию 0.2 секунды
            не было новых событий, если их не было - вызывает обработку пакета событий).
            
            Потокобезопасен, информировать агрегатор о событиях (метод Event) можно асинхронно, итоговая обработка вызывается
            в том же контексте синхронизации, в котором был вызван конструктор данного класса
            </summary>
            
            <example>Простой пример пакетной обработки событий скролла
            <code lang="C#">
            public class Example : TControl, IDispose
            {
                private EventsAccumulator _scrollEventsAccumulator;
                
                public Example()
                {
                    _scrollEventsAccumulator = new EventsAccumulator(AfterScroll);
                }
                
                public void Dispose()
                {
                    _scrollEventsAccumulator.Dispose();
                }
                
                protected override void OnScroll(ScrollEventArgs e)
                {
                    base.OnScroll(e);
                    
                    _scrollEventsAccumulator.Event(); // Информируем агрегатор о событии
                }
                
                // Данный метод будет вызван агрегатором если в течении 0.2 секунды (или другого заданного в конструкторе) не будет повторно вызван метод Event() агрегатора событий
                public void AfterScroll()
                {
                    Invalidate(); // Или любая другая пакетная обработка серии событий скролла
                }
            }
            </code></example>
        </member>
        <member name="F:Intermech.Extensions.EventsAccumulator.ConstDefaultDelay">
            <summary>
            Время в миллисекундах по-умолчанию, в течении которого должно не произойти ни одного события
            для того, чтобы был вызван внешний метод обработки серии событий
            </summary>
        </member>
        <member name="M:Intermech.Extensions.EventsAccumulator.#ctor(System.Action,System.Int32,System.Boolean)">
            <summary> Конструктор </summary>
            <param name="handler">
            Метод который должен производить итоговую обработку событий,
            который будет вызван когда событие не произойдёт в течении времени <see cref="!:delay"/>
            </param>
            <param name="delay">
            Время в миллисекундах (по-умолчанию <see cref="F:Intermech.Extensions.EventsAccumulator.ConstDefaultDelay"/>), в течении которого должно не произойти ни одного события
            для того, чтобы был вызван внешний метод <see cref="!:handler"/>
            </param>
            <param name="firstEventCallHandler">
            Вызывать ли немедленную внешнюю обработку события <see cref="!:handler"/> для первого события (по-умолчанию true)
            Если true (по-умолчанию), то первый вызов обработки события произойдёт сразу после первого события.
                После этого, если в течении <see cref="!:delay"/> последуют новые события, то итоговая обработка произойдёт в конце серии событий.
                Если вслед за первым событием в течении <see cref="!:delay"/> не последует новых событий, то повторного вызова обработчика не произойдёт.
            Если false, то вызов обработки событий произойдёт только после задержки равной <see cref="!:delay"/> после последнего события серии событий.
            </param>
        </member>
        <member name="M:Intermech.Extensions.EventsAccumulator.#ctor(System.Action,System.Boolean,System.Int32)">
            <summary> Конструктор </summary>
            <param name="handler">
            Метод который должен производить итоговую обработку событий,
            который будет вызван когда событие не произойдёт в течении времени <see cref="!:delay"/>
            </param>
            <param name="firstEventCallHandler">
            Вызывать ли немедленную внешнюю обработку события <see cref="!:handler"/> для первого события
            Если false, то вызов обработки событий произойдёт только после задержки равной <see cref="!:delay"/> после последнего события серии событий.
            Если true, то первый вызов обработки события произойдёт сразу после первого события.
                После этого, если в течении <see cref="!:delay"/> последуют новые события, то итоговая обработка произойдёт в конце серии событий.
                Если вслед за первым событием в течении <see cref="!:delay"/> не последует новых событий, то повторного вызова обработчика не произойдёт.
            </param>
            <param name="delay">
            Время в миллисекундах (по-умолчанию <see cref="F:Intermech.Extensions.EventsAccumulator.ConstDefaultDelay"/>), в течении которого должно не произойти ни одного события
            для того, чтобы был вызван внешний метод <see cref="!:handler"/>
            </param>
        </member>
        <member name="M:Intermech.Extensions.EventsAccumulator.Event">
            <summary>
            Данный метод должен вызывать каждый раз, когда происходит одно из тех событий, которые должны обрабатываться пакетно
            </summary>
        </member>
        <member name="T:Intermech.Extensions.Index`2">
            <summary>Простая реализация свойства с индексом по ключу</summary>
        </member>
        <member name="T:Intermech.Extensions.IndexNotNull`2">
            <summary>Простая реализация свойства с индексом по ключу со значениями, отличными от null</summary>
        </member>
        <member name="T:Intermech.Extensions.CachedIndex`2">
            <summary>Реализация простого кэша на Dictionary</summary>
        </member>
        <member name="T:Intermech.Extensions.CachedIndexNotNull`2">
            <summary>Реализация простого кэша на Dictionary содержащая только значения отличные от null</summary>
        </member>
        <member name="T:Intermech.Extensions.ConcurrentCachedIndex`2">
            <summary>Потокобезопасная реализация простого кэша на Dictionary</summary>
        </member>
        <member name="T:Intermech.Extensions.ConcurrentCachedIndexNotNull`2">
            <summary>Потокобезопасная реализация простого кэша на Dictionary со значениями, отличными от null</summary>
        </member>
        <member name="T:Intermech.Extensions.ILinkedToMany`1">
            <summary>Сущность, связанная с несколькими объектами типа <see cref="!:TOther"/> горизонтальной связью</summary>
            <typeparam name="TOther">Тип объекта, c которым связан данный</typeparam>
        </member>
        <member name="P:Intermech.Extensions.ILinkedToMany`1.LinkedTo">
            <summary>Коллекция объектов, с которым связан данный</summary>
        </member>
        <member name="T:Intermech.Extensions.ILinkedToOne`1">
            <summary>Сущность, горизонтально связанная с одним объектом типа <see cref="!:TOther"/> горизонтальной связью</summary>
            <typeparam name="TOther">Тип объекта, c которым связан данный</typeparam>
        </member>
        <member name="P:Intermech.Extensions.ILinkedToOne`1.LinkedTo">
            <summary>Объект, с которым связан данный</summary>
        </member>
        <member name="T:Intermech.Extensions.INamedObject">
            <summary>Именованная сущность</summary>
        </member>
        <member name="P:Intermech.Extensions.INamedObject.Name">
            <summary>Наименование сущности</summary>
        </member>
        <member name="T:Intermech.Extensions.NamedObjectWithID`1">
            <summary>Абстрактная база для классов реализующих интерфейсы INamedObject и IObjectWithID</summary>
            <typeparam name="TId">Тип идентификатора</typeparam>
        </member>
        <member name="P:Intermech.Extensions.NamedObjectWithID`1.Name">
            <summary>Имя</summary>
        </member>
        <member name="T:Intermech.Extensions.INestedInMany`1">
            <summary>Объект, входящий в несколько других объектов типа <see cref="!:TOwner"/> вертикальной связью</summary>
            <typeparam name="TOwner">Тип объектов, в который может входить данный</typeparam>
        </member>
        <member name="P:Intermech.Extensions.INestedInMany`1.Owners">
            <summary>Коллекция объектов, в которых входит данный</summary>
        </member>
        <member name="T:Intermech.Extensions.INestedInOne`1">
            <summary>Объект, входящий в другой объект типа <see cref="!:TOwner"/> вертикальной связью</summary>
            <typeparam name="TOwner">Тип объекта, в который может входить данный</typeparam>
        </member>
        <member name="P:Intermech.Extensions.INestedInOne`1.Owner">
            <summary>Коллекция объекта, в которых входит данный</summary>
        </member>
        <member name="T:Intermech.Extensions.IObjectWithID`1">
            <summary>Сущность с идентификатором</summary>
            <typeparam name="TId">Тип идентификатора сущности</typeparam>
        </member>
        <member name="P:Intermech.Extensions.IObjectWithID`1.ID">
            <summary>Идентификатор сущности</summary>
        </member>
        <member name="T:Intermech.Extensions.ObjectWithID`1">
            <summary>Абстрактная база для классов реализующего интерфейс IObjectWithID</summary>
            <typeparam name="TId">Тип идентификатора</typeparam>
        </member>
        <member name="P:Intermech.Extensions.ObjectWithID`1.ID">
            <summary>Идентификатор сущности</summary>
        </member>
        <member name="T:Intermech.Extensions.IOwnerOfMany`1">
            <summary>Объект, способный содержать в себе несколько объектов типа <see cref="!:TChild"/></summary>
            <typeparam name="TChild">Тип объектов, которые могут содержаться в данном</typeparam>
        </member>
        <member name="P:Intermech.Extensions.IOwnerOfMany`1.Childs">
            <summary>Коллекция объектов, входящих в данную</summary>
        </member>
        <member name="T:Intermech.Extensions.IOwnerOfOne`1">
            <summary>Объект, способный содержать в себе другой объект типа <see cref="!:TChild"/></summary>
            <typeparam name="TChild">Тип объекта, который может содержаться в данном</typeparam>
        </member>
        <member name="P:Intermech.Extensions.IOwnerOfOne`1.Child">
            <summary>Объект, входящий в данный</summary>
        </member>
        <member name="T:Intermech.Extensions.ITypedObject`1">
            <summary>Сущность с идентификатором</summary>
            <typeparam name="TType">Дескриптор типа сущности</typeparam>
        </member>
        <member name="P:Intermech.Extensions.ITypedObject`1.Type">
            <summary>Дескриптор типа</summary>
        </member>
        <member name="T:Intermech.Extensions.Lazy2`1">
            <remarks>Доработанный системный класс Lazy{T}
                1) Добавлен метод GetValue принимающий в качестве параметра метод фабрику значения, что позволяет не разделять
                использование значения и его загрузку (проще читать)
                2) В GetValue можно передать true что форсирует потокобезопасность (создаст экземплярный объект синхронизации, если он не был создан до сих пор),
                    либо объект, который будет использоваться для синхронизации вызова фабрики-конструктора объекта</remarks>
        </member>
        <member name="T:Intermech.Extensions.Lazy2`1.Boxed">
            <summary>wrapper class to box the initialized value, this is mainly created to avoid boxing/unboxing the value each
                time the value is called in case T is a value type</summary>
        </member>
        <member name="T:Intermech.Extensions.Lazy2`1.LazyInternalExceptionHolder">
            <summary>Wrapper class to wrap the exception thrown by the value factory</summary>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class that uses
                <typeparamref name="T"/>'s default constructor for lazy initialization</summary>
            <remarks>An instance created with this constructor may be used concurrently from multiple threads</remarks>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.#ctor(System.Func{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class that uses a specified
                initialization function</summary>
            <remarks>An instance created with this constructor may be used concurrently from multiple threads</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference (Nothing in Visual
                Basic)</exception>
            <param name="valueFactory">The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it
                is needed</param>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/>
                class that uses <typeparamref name="T"/>'s default constructor and a specified thread-safety mode</summary>
            <param name="isThreadSafe">true if this instance should be usable by multiple threads concurrently; false if the
                instance will only be used by one thread at a time</param>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.#ctor(System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/>
            class that uses <typeparamref name="T"/>'s default constructor and a specified thread-safety mode.
            </summary>
            <param name="mode">The lazy thread-safety mode mode</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode"/> mode contains an invalid value</exception>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class that uses a specified
                initialization function and a specified thread-safety mode</summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference (Nothing in Visual
                Basic)</exception>
            <param name="valueFactory">The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it
                is needed</param>
            <param name="isThreadSafe">true if this instance should be usable by multiple threads concurrently; false if the
                instance will only be used by one thread at a time</param>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
            <summary>Initializes a new instance of the <see cref="T:System.Threading.Lazy{T}"/> class that uses a specified
                initialization function and a specified thread-safety mode</summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory"/> is a null reference (Nothing in Visual
                Basic)</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode"/> mode contains an invalid value</exception>
            <param name="valueFactory">The <see cref="T:System.Func{T}"/> invoked to produce the lazily-initialized value when it
                is needed</param>
            <param name="mode">The lazy thread-safety mode</param>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.GetObjectFromMode(System.Threading.LazyThreadSafetyMode)">
            <summary>Static helper function that returns an object based on the given mode. it also throws an exception if the mode
                is invalid</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when one or more arguments are outside the required range</exception>
            <param name="mode">The lazy thread-safety mode mode</param>
            <returns>The object from mode. This may be null</returns>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>Forces initialization during serialization</summary>
            <param name="context">The StreamingContext for the serialization operation</param>
        </member>
        <member name="P:Intermech.Extensions.Lazy2`1.ValueForDebugDisplay">
            <summary>Gets the value of the Lazy&lt;T&gt; for debugging display purposes</summary>
        </member>
        <member name="P:Intermech.Extensions.Lazy2`1.Mode">
            <summary>Gets a value indicating whether this instance may be used concurrently from multiple threads</summary>
        </member>
        <member name="P:Intermech.Extensions.Lazy2`1.IsValueFaulted">
            <summary>Gets whether the value creation is faulted or not</summary>
        </member>
        <member name="P:Intermech.Extensions.Lazy2`1.IsValueCreated">
            <summary>Gets a value indicating whether the <see cref="T:System.Lazy{T}"/> has been initialized</summary>
            <remarks>The initialization of a <see cref="T:System.Lazy{T}"/> instance may result in either a value being produced or
                an exception being thrown.  If an exception goes unhandled during initialization,
                <see cref="P:Intermech.Extensions.Lazy2`1.IsValueCreated"/> will return false</remarks>
        </member>
        <member name="P:Intermech.Extensions.Lazy2`1.Value">
            <summary>Gets the lazily initialized value of the current <see cref="T:System.Threading.Lazy{T}"/></summary>
            <remarks>If <see cref="P:Intermech.Extensions.Lazy2`1.IsValueCreated"/> is false, accessing <see cref="P:Intermech.Extensions.Lazy2`1.Value"/> will force initialization. Please &lt;
                see cref="System.Threading.LazyThreadSafetyMode"&gt; for more information on how
                <see cref="T:System.Threading.Lazy{T}"/> will behave if an exception is thrown from initialization delegate</remarks>
            <exception cref="T:System.MissingMemberException">The <see cref="T:System.Threading.Lazy{T}"/> was initialized to use
                the default constructor of the type being lazily initialized, and that type does not have a public, paramless
                constructor</exception>
            <exception cref="T:System.MemberAccessException">The <see cref="T:System.Threading.Lazy{T}"/> was initialized to use
                the default constructor of the type being lazily initialized, and permissions to access the constructor were
                missing</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Threading.Lazy{T}"/> was constructed with
                the <see cref="T:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication"/> or
                <see cref="T:System.Threading.LazyThreadSafetyMode.None"/>  and the initialization function attempted to access
                <see cref="P:Intermech.Extensions.Lazy2`1.Value"/> on this instance</exception>
        </member>
        <member name="M:Intermech.Extensions.Lazy2`1.CreateValue(System.Func{`0})">
            <summary>Creates an instance of T using m_valueFactory in case its not null or use reflection to create a new T()</summary>
            <returns>An instance of Boxed</returns>
        </member>
        <member name="T:Intermech.Extensions.SystemLazy2DebugView`1">
            <summary>A debugger view of the Lazy&lt;T&gt; to surface additional debugging properties and
            to ensure that the Lazy&lt;T&gt; does not become initialized if it was not already</summary>
        </member>
        <member name="M:Intermech.Extensions.SystemLazy2DebugView`1.#ctor(Intermech.Extensions.Lazy2{`0})">
            <summary>Constructs a new debugger view object for the provided Lazy object</summary>
            <param name="lazy">A Lazy object to browse in the debugger</param>
        </member>
        <member name="P:Intermech.Extensions.SystemLazy2DebugView`1.IsValueCreated">
            <summary>Returns whether the Lazy object is initialized or not</summary>
        </member>
        <member name="P:Intermech.Extensions.SystemLazy2DebugView`1.Value">
            <summary>Returns the value of the Lazy object</summary>
        </member>
        <member name="P:Intermech.Extensions.SystemLazy2DebugView`1.Mode">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="P:Intermech.Extensions.SystemLazy2DebugView`1.IsValueFaulted">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="T:Intermech.Extensions.LazyReflectionValue`2">
            <summary>Обёртка для ленивого получения значения</summary>
        </member>
        <member name="P:Intermech.Extensions.LazyReflectionValue`2.Obj">
            <summary>Ссылка на объект, чьё поле мы читаем</summary>
        </member>
        <member name="P:Intermech.Extensions.LazyReflectionValue`2.BindingFlags">
            <summary>Флаги привязки, которые используются для чтения значения свойства/поля</summary>
        </member>
        <member name="F:Intermech.Extensions.LazyReflectionValue`2.CacheValue">
            <summary>Если true то значение получается один раз и кэшируется. Сбросить значение можно с помощью метода </summary>
        </member>
        <member name="P:Intermech.Extensions.LazyReflectionValue`2.ValueLoaded">
            <summary>Если true то значение получается один раз и кэшируется. Сбросить значение можно с помощью метода <see cref="M:Intermech.Extensions.LazyReflectionValue`2.RefreshValue"/></summary>
        </member>
        <member name="M:Intermech.Extensions.LazyReflectionValue`2.RefreshValue">
            <summary>Сброс ранее полученного значения. Имеет смысл только в том случае, если <see cref="F:Intermech.Extensions.LazyReflectionValue`2.CacheValue"/> == true</summary>
        </member>
        <member name="P:Intermech.Extensions.LazyReflectionValue`2.ValueName">
            <summary>Наименование источника значения (поле или свойство)</summary>
        </member>
        <member name="P:Intermech.Extensions.LazyReflectionValue`2.MemberInfo">
            <summary>Ссылка на метаданные источника значения (поля или свойства)</summary>
        </member>
        <member name="P:Intermech.Extensions.LazyReflectionValue`2.Value">
            <summary>Значение</summary>
        </member>
        <member name="M:Intermech.Extensions.LazyReflectionValue`2.GetValue">
            <summary>Метод получения актуального значения</summary>
        </member>
        <member name="T:Intermech.Extensions.LazyPropertyReflection`1">
            <summary>Обёртка для ленивого получения значения свойства</summary>
            <typeparam name="TValue">Тип значения свойства</typeparam>
        </member>
        <member name="T:Intermech.Extensions.LazyFieldReflection`1">
            <summary>Обёртка для ленивого получения значения свойства</summary>
            <typeparam name="TValue">Тип значения свойства</typeparam>
        </member>
        <member name="T:Intermech.Extensions.LockHandler">
            <summary>
            Создаёт IDisposable аналог конструкции lock, используется для публикации внутренней синхронизации наружу
            </summary>
        </member>
        <member name="T:Intermech.Extensions.Maybe`1">
            <summary>Контейнер значения, в котором значение может отсутствовать.
                     Отличие от Nullable в том, что может принимать тип объектов в качестве generic параметра</summary>
            <remarks>Важно понимать, что контейнер без значения и контейнер содержащий null не равны и не одно и тоже</remarks>>
        </member>
        <member name="T:Intermech.Extensions.OneOrMore`1">
            <summary>Одно или более значений</summary>
        </member>
        <member name="T:Intermech.Extensions.OneOrMore`1.BeforeCovert2ArrayDelegate">
            <summary>
            Метод препроцессинга нескольких значений перед преобразованием в массив.
            Первоначально в этом возникла необходимость для фильтрации списка дескрипторов
            колонок во избежание дублирования имён колонок генерируемых из дескрипторов на сервере.
            Серверный код может генерировать дубликаты и сваливается с exception,
            контролировать уникальность вручную на клиенте обременительно и может приводить к ошибкам
            если это контролировать не везде - поэтому было принято соломоново решение контролировать
            callback-ом в Extension.Interfaces которые при инициализации перекрывает соотв. callback и осуществляет фильтрацию в нём
            </summary>
        </member>
        <member name="T:Intermech.Extensions.OneOrMore">
            <summary>Common methods</summary>
        </member>
        <member name="T:Intermech.Extensions.SimpleComparer`1">
            <summary>Реализация IComparer с помощью лямбды</summary>
        </member>
        <member name="T:Intermech.Extensions.SimpleEqualityComparer`1">
            <summary>Реализация IEqualityComparer с помощью лямбды</summary>
        </member>
        <member name="T:Intermech.Extensions.SlimLazy`1">
            <remarks>Облегчённый системный класс Lazy{T}.
                1) Не потокобезопасен, применять только в к контексте, не требующем потокобезопасность.
                2) Добавлен метод GetValue принимающий в качестве параметра метод фабрику значения, что позволяет не разделять
                использование значения и его загрузку (проще читать код)</remarks>
        </member>
        <member name="M:Intermech.Extensions.SlimLazy`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>Forces initialization during serialization</summary>
            <param name="context">The StreamingContext for the serialization operation</param>
        </member>
        <member name="P:Intermech.Extensions.SlimLazy`1.ValueForDebugDisplay">
            <summary>Gets the value of the Lazy&lt;T&gt; for debugging display purposes</summary>
        </member>
        <member name="P:Intermech.Extensions.SlimLazy`1.IsValueFaulted">
            <summary>Gets whether the value creation is faulted or not</summary>
        </member>
        <member name="P:Intermech.Extensions.SlimLazy`1.IsValueCreated">
            <summary>Gets a value indicating whether the <see cref="T:System.Lazy{T}"/> has been initialized</summary>
            <remarks>The initialization of a <see cref="T:System.Lazy{T}"/> instance may result in either a value being produced or
                an exception being thrown.  If an exception goes unhandled during initialization,
                <see cref="P:Intermech.Extensions.SlimLazy`1.IsValueCreated"/> will return false</remarks>
        </member>
        <member name="P:Intermech.Extensions.SlimLazy`1.Value">
            <summary>Gets the lazily initialized value of the current <see cref="T:System.Threading.Lazy{T}"/></summary>
            <remarks>If <see cref="P:Intermech.Extensions.SlimLazy`1.IsValueCreated"/> is false, accessing <see cref="P:Intermech.Extensions.SlimLazy`1.Value"/> will force initialization</remarks>
            <exception cref="T:System.MissingMemberException">The <see cref="T:System.Threading.Lazy{T}"/> was initialized to use
                the default constructor of the type being lazily initialized, and that type does not have a public, paramless
                constructor</exception>
            <exception cref="T:System.MemberAccessException">The <see cref="T:System.Threading.Lazy{T}"/> was initialized to use
                the default constructor of the type being lazily initialized, and permissions to access the constructor were
                missing</exception>
        </member>
        <member name="T:Intermech.Extensions.SystemSlimLazyDebugView`1">
            <summary>A debugger view of the Lazy&lt;T&gt; to surface additional debugging properties and
            to ensure that the Lazy&lt;T&gt; does not become initialized if it was not already</summary>
        </member>
        <member name="M:Intermech.Extensions.SystemSlimLazyDebugView`1.#ctor(Intermech.Extensions.SlimLazy{`0})">
            <summary>Constructs a new debugger view object for the provided Lazy object</summary>
            <param name="lazy">A Lazy object to browse in the debugger</param>
        </member>
        <member name="P:Intermech.Extensions.SystemSlimLazyDebugView`1.IsValueCreated">
            <summary>Returns whether the Lazy object is initialized or not</summary>
        </member>
        <member name="P:Intermech.Extensions.SystemSlimLazyDebugView`1.Value">
            <summary>Returns the value of the Lazy object</summary>
        </member>
        <member name="P:Intermech.Extensions.SystemSlimLazyDebugView`1.IsValueFaulted">
            <summary>Returns the execution mode of the Lazy object</summary>
        </member>
        <member name="T:Intermech.Extensions.StartFinish">
            <summary>Оболочка для участка кода, начинающаяся и заканчивающаяся вызовом лямбд</summary>
        </member>
        <member name="M:Intermech.Extensions.ComHelper.GetTypeName(System.Object)">
            <summary>Returns a string value representing the type name of the specified COM object</summary>
        </member>
        <member name="T:Intermech.Extensions.ComHelper.IDispatch">
            <summary>
            Exposes objects, methods and properties to programming tools and other
            applications that support Automation.
            </summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.Select``1(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,``0})">
            <summary>Преобразование коллекции столбцов таблицы данных в новую форму</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.Select``1(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,System.Int32,``0})">
            <summary>Преобразование коллекции столбцов таблицы данных в новую форму</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.Where(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,System.Boolean})">
            <summary>Фильтрация коллекции столбцов таблицы</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.Where(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,System.Int32,System.Boolean})">
            <summary>Фильтрация коллекции столбцов таблицы</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.First(System.Data.DataColumnCollection)">
            <summary>Поиск первой записи, удовлетворяющей условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.First(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,System.Boolean})">
            <summary>Поиск первой записи, удовлетворяющей условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.FirstOrDefault(System.Data.DataColumnCollection)">
            <summary>Поиск первого столбца, удовлетворяющего условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.FirstOrDefault(System.Data.DataColumnCollection,System.Func{System.Data.DataColumn,System.Boolean})">
            <summary>Поиск первой записи, удовлетворяющей условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.InvokeForAll(System.Data.DataColumnCollection,System.Action{System.Data.DataColumn})">
            <summary>Вызов метода для всех колонок</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.InvokeForAll(System.Data.DataColumnCollection,System.Action{System.Int32,System.Data.DataColumn})">
            <summary>Вызов метода для всех колонок</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.GetNames(System.Data.DataColumnCollection)">
            <summary>Получить список имён полей</summary>
        </member>
        <member name="M:Intermech.Extensions.DataColumnCollectionExtensions.GetCaptions(System.Data.DataColumnCollection)">
            <summary>Получить список имён полей</summary>
        </member>
        <member name="T:Intermech.Extensions.DataRowCollectionExtensions">
            <summary>Расширения над DataRowCollection</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.Select``1(System.Data.DataRowCollection,System.Func{System.Data.DataRow,``0})">
            <summary>Преобразование коллекции строк таблицы данных в новую форму</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.Select``1(System.Data.DataRowCollection,System.Func{System.Data.DataRow,System.Int32,``0})">
            <summary>Преобразование коллекции строк таблицы данных в новую форму</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.Where(System.Data.DataRowCollection,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>Фильтрация коллекции строк таблицы</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.Where(System.Data.DataRowCollection,System.Func{System.Data.DataRow,System.Int32,System.Boolean})">
            <summary>Фильтрация коллекции строк таблицы</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.First(System.Data.DataRowCollection)">
            <summary>Поиск первой записи, удовлетворяющей условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.First(System.Data.DataRowCollection,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>Поиск первой записи, удовлетворяющей условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FirstOrDefault(System.Data.DataRowCollection)">
            <summary>Поиск первой записи, удовлетворяющей условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FirstOrDefault(System.Data.DataRowCollection,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>Поиск первой записи, удовлетворяющей условию</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.InvokeForAll(System.Data.DataRowCollection,System.Action{System.Data.DataRow})">
            <summary>Вызов метода для всех ненулевых значений</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.InvokeForAll(System.Data.DataRowCollection,System.Action{System.Int32,System.Data.DataRow})">
            <summary>Вызов метода для всех ненулевых значений</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``1(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@)">
            <summary>Получить перечисление значений поля</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``2(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@,Intermech.Extensions.Field{``1}@)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``3(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@,Intermech.Extensions.Field{``1}@,Intermech.Extensions.Field{``2}@)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``4(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@,Intermech.Extensions.Field{``1}@,Intermech.Extensions.Field{``2}@,Intermech.Extensions.Field{``3}@)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``5(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@,Intermech.Extensions.Field{``1}@,Intermech.Extensions.Field{``2}@,Intermech.Extensions.Field{``3}@,Intermech.Extensions.Field{``4}@)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``6(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@,Intermech.Extensions.Field{``1}@,Intermech.Extensions.Field{``2}@,Intermech.Extensions.Field{``3}@,Intermech.Extensions.Field{``4}@,Intermech.Extensions.Field{``5}@)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <param name="field6">Дескриптор поля</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``7(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@,Intermech.Extensions.Field{``1}@,Intermech.Extensions.Field{``2}@,Intermech.Extensions.Field{``3}@,Intermech.Extensions.Field{``4}@,Intermech.Extensions.Field{``5}@,Intermech.Extensions.Field{``6}@)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <param name="field6">Дескриптор поля</param>
            <param name="field7">Дескриптор поля</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.GetValues``8(System.Data.DataRowCollection,Intermech.Extensions.Field{``0}@,Intermech.Extensions.Field{``1}@,Intermech.Extensions.Field{``2}@,Intermech.Extensions.Field{``3}@,Intermech.Extensions.Field{``4}@,Intermech.Extensions.Field{``5}@,Intermech.Extensions.Field{``6}@,Intermech.Extensions.Field{``7}@)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <param name="field6">Дескриптор поля</param>
            <param name="field7">Дескриптор поля</param>
            <param name="field8">Дескриптор поля</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsStringListDef(System.Data.DataRowCollection,System.String,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsStringListDef(System.Data.DataRowCollection,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsLongListDef(System.Data.DataRowCollection,System.String,System.Int64)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsIntListDef(System.Data.DataRowCollection,System.String,System.Int32)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDoubleDef(System.Data.DataRowCollection,System.String,System.Double)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBoolListDef(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDateTimeListDef(System.Data.DataRowCollection,System.String,System.DateTime,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDateTimeListDef(System.Data.DataRowCollection,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsGuidListDef(System.Data.DataRowCollection,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBytesListDef(System.Data.DataRowCollection,System.String,System.Byte[])">
            <summary>Получить список значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsObjectListDef(System.Data.DataRowCollection,System.String,System.Object)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsStringListDef(System.Data.DataRowCollection,System.Int32,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsStringListDef(System.Data.DataRowCollection,System.Int32,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsLongListDef(System.Data.DataRowCollection,System.Int32,System.Int64)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsIntListDef(System.Data.DataRowCollection,System.Int32,System.Int32)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDoubleListDef(System.Data.DataRowCollection,System.Int32,System.Double)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBoolListDef(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDateTimeListDef(System.Data.DataRowCollection,System.Int32,System.DateTime,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDateTimeListDef(System.Data.DataRowCollection,System.Int32,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsGuidListDef(System.Data.DataRowCollection,System.Int32,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBytesListDef(System.Data.DataRowCollection,System.Int32,System.Byte[])">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsObjectDef(System.Data.DataRowCollection,System.Int32,System.Object)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.SelectNotNull(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Возвращает последовательность значений поля, отличных от DBNull и null.
                     Если failOnNull == true, то при обнаружении поля с пустым значением выбрасывает FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда failOnNull == true и значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.SelectNotNull(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Возвращает последовательность значений поля, отличных от DBNull и null.
                     Если failOnNull == true, то при обнаружении поля с пустым значением выбрасывает FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда failOnNull == true и значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsStringList(System.Data.DataRowCollection,System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsLongList(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsIntList(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDoubleList(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBoolList(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDateTimeList(System.Data.DataRowCollection,System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsGuidList(System.Data.DataRowCollection,System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBytesList(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsObjectList(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsStringList(System.Data.DataRowCollection,System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsLongList(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsIntList(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDoubleList(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBoolList(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsDateTimeList(System.Data.DataRowCollection,System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsGuidList(System.Data.DataRowCollection,System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsBytesList(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowCollectionExtensions.FieldAsObjectList(System.Data.DataRowCollection,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowCollection">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="T:Intermech.Extensions.DataRowEnumerationExtensions">
            <summary>Расширения над IEnumerable_DataRow</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.InvokeForAll(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Action{System.Data.DataRow})">
            <summary>Вызов метода для всех ненулевых значений</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.InvokeForAll(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Action{System.Int32,System.Data.DataRow})">
            <summary>Вызов метода для всех ненулевых значений</summary>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``1(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0})">
            <summary>Получить перечисление значений поля</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field">Дескриптор поля таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``2(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1})">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field1">Дескриптор поля таблицы</param>
            <param name="field2">Дескриптор поля таблицы</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``3(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2})">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field1">Дескриптор поля таблицы</param>
            <param name="field2">Дескриптор поля таблицы</param>
            <param name="field3">Дескриптор поля таблицы</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``4(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3})">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field1">Дескриптор поля таблицы</param>
            <param name="field2">Дескриптор поля таблицы</param>
            <param name="field3">Дескриптор поля таблицы</param>
            <param name="field4">Дескриптор поля таблицы</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``5(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4})">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field1">Дескриптор поля таблицы</param>
            <param name="field2">Дескриптор поля таблицы</param>
            <param name="field3">Дескриптор поля таблицы</param>
            <param name="field4">Дескриптор поля таблицы</param>
            <param name="field5">Дескриптор поля таблицы</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``6(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4},Intermech.Extensions.Field{``5})">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field1">Дескриптор поля таблицы</param>
            <param name="field2">Дескриптор поля таблицы</param>
            <param name="field3">Дескриптор поля таблицы</param>
            <param name="field4">Дескриптор поля таблицы</param>
            <param name="field5">Дескриптор поля таблицы</param>
            <param name="field6">Дескриптор поля таблицы</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``7(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4},Intermech.Extensions.Field{``5},Intermech.Extensions.Field{``6})">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field1">Дескриптор поля таблицы</param>
            <param name="field2">Дескриптор поля таблицы</param>
            <param name="field3">Дескриптор поля таблицы</param>
            <param name="field4">Дескриптор поля таблицы</param>
            <param name="field5">Дескриптор поля таблицы</param>
            <param name="field6">Дескриптор поля таблицы</param>
            <param name="field7">Дескриптор поля таблицы</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.GetValues``8(System.Collections.Generic.IEnumerable{System.Data.DataRow},Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4},Intermech.Extensions.Field{``5},Intermech.Extensions.Field{``6},Intermech.Extensions.Field{``7})">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataRowEnumeration">Перечисление строк данных</param>
            <param name="field1">Дескриптор поля таблицы</param>
            <param name="field2">Дескриптор поля таблицы</param>
            <param name="field3">Дескриптор поля таблицы</param>
            <param name="field4">Дескриптор поля таблицы</param>
            <param name="field5">Дескриптор поля таблицы</param>
            <param name="field6">Дескриптор поля таблицы</param>
            <param name="field7">Дескриптор поля таблицы</param>
            <param name="field8">Дескриптор поля таблицы</param>
            <returns>Перечисление значений полей</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsStringEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.String,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsStringEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsLongEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Int64)">
            <summary>Получить перечисление значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsIntEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Int32)">
            <summary>Получить перечисление значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDoubleDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Double)">
            <summary>Получить перечисление значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBoolEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Получить перечисление значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDateTimeEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.DateTime,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDateTimeEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsGuidEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBytesEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Byte[])">
            <summary>Получить перечисление значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsObjectEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Object)">
            <summary>Получить перечисление значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsStringEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.String,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsStringEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsLongEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Int64)">
            <summary>Получить перечисление значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsIntEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Int32)">
            <summary>Получить перечисление значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDoubleEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Double)">
            <summary>Получить перечисление значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBoolEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Получить перечисление значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDateTimeEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.DateTime,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDateTimeEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsGuidEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBytesEnumerationDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Byte[])">
            <summary>Получить перечисление значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsObjectDef(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Object)">
            <summary>Получить перечисление значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.SelectNotNull(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Возвращает последовательность значений поля, отличных от DBNull и null.
                     Если failOnNull == true, то при обнаружении поля с пустым значением выбрасывает FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда failOnNull == true и значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.SelectNotNull(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Возвращает последовательность значений поля, отличных от DBNull и null.
                     Если failOnNull == true, то при обнаружении поля с пустым значением выбрасывает FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда failOnNull == true и значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsStringEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsLongEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Получить перечисление значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsIntEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Получить перечисление значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDoubleEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Получить перечисление значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBoolEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Получить перечисление значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDateTimeEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsGuidEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBytesEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Получить перечисление значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsObjectEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.String,System.Boolean)">
            <summary>Получить перечисление значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsStringEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsLongEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Получить перечисление значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsIntEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Получить перечисление значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDoubleEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Получить перечисление значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBoolEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Получить перечисление значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsDateTimeEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsGuidEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить перечисление значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsBytesEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Получить перечисление значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowEnumerationExtensions.FieldAsObjectEnumeration(System.Collections.Generic.IEnumerable{System.Data.DataRow},System.Int32,System.Boolean)">
            <summary>Получить перечисление значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRowEnumeration">Коллекция записей таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Перечисление значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsStringDef(System.Data.DataRow,System.String,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsStringDef(System.Data.DataRow,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsLongDef(System.Data.DataRow,System.String,System.Int64)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsIntDef(System.Data.DataRow,System.String,System.Int32)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsEnumDef``1(System.Data.DataRow,System.String,``0)">
            <summary>Получить значение поля в виде Enum. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDoubleDef(System.Data.DataRow,System.String,System.Double)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBoolDef(System.Data.DataRow,System.String,System.Boolean)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDateTimeDef(System.Data.DataRow,System.String,System.DateTime,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDateTimeDef(System.Data.DataRow,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsGuidDef(System.Data.DataRow,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBytesDef(System.Data.DataRow,System.String,System.Byte[])">
            <summary>Получить значение поля в виде массива байтов. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsObjectDef(System.Data.DataRow,System.String,System.Object)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsNotNullStringDef(System.Data.DataRow,System.Int32,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsNotNullString(System.Data.DataRow,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsStringDef(System.Data.DataRow,System.Int32,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsStringDef(System.Data.DataRow,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsLongDef(System.Data.DataRow,System.Int32,System.Int64)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsIntDef(System.Data.DataRow,System.Int32,System.Int32)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsEnumDef``1(System.Data.DataRow,System.Int32,``0)">
            <summary>Получить значение поля в виде Enum. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDoubleDef(System.Data.DataRow,System.Int32,System.Double)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBoolDef(System.Data.DataRow,System.Int32,System.Boolean)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDateTimeDef(System.Data.DataRow,System.Int32,System.DateTime,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDateTimeDef(System.Data.DataRow,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsGuidDef(System.Data.DataRow,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBytesDef(System.Data.DataRow,System.Int32,System.Byte[])">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsObjectDef(System.Data.DataRow,System.Int32,System.Object)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsString(System.Data.DataRow,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">(Optional) Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsString(System.Data.DataRow,System.String,System.String@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде строки. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">(Optional) Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsLong(System.Data.DataRow,System.String)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsLong(System.Data.DataRow,System.String,System.Int64@)">
            <summary>Попытаться получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsInt(System.Data.DataRow,System.String)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsInt(System.Data.DataRow,System.String,System.Int32@)">
            <summary>Попытаться получить значение поля в виде Int. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsEnum``1(System.Data.DataRow,System.String)">
            <summary>Получить значение поля в виде Enum. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsEnum``1(System.Data.DataRow,System.String,``0@)">
            <summary>Попытаться получить значение поля в виде Enum. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDouble(System.Data.DataRow,System.String)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsDouble(System.Data.DataRow,System.String,System.Double@)">
            <summary>Попытаться получить значение поля в виде Double. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBool(System.Data.DataRow,System.String)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsBool(System.Data.DataRow,System.String,System.Boolean@)">
            <summary>Попытаться получить значение поля в виде Bool. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDateTime(System.Data.DataRow,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsDateTime(System.Data.DataRow,System.String,System.DateTime@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsGuid(System.Data.DataRow,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsGuid(System.Data.DataRow,System.String,System.Guid@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде Guid. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBytes(System.Data.DataRow,System.String)">
            <summary>Получить значение поля в виде массива байтов. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsBytes(System.Data.DataRow,System.String,System.Byte[]@)">
            <summary>Попытаться получить значение поля в виде byte[]. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] The result</param>
            <returns>True если поле с таким именем найдено и его значение отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.GetFieldValue(System.Data.DataRow,System.String)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldValue(System.Data.DataRow,System.Int32,System.Object@)">
            <summary>Попытаться получить значение поля указанного имени из записи таблицы</summary>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] данные</param>
            <returns>True если поля с таким именем присутствует в таблице и его значение отлично от null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldValueAcceptNulls(System.Data.DataRow,System.Int32,System.Object@)">
            <summary>Попытаться получить значение поля указанного имени из записи таблицы</summary>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] данные</param>
            <returns>True если поля с таким именем присутствует в таблице и его значение отлично от null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldValue(System.Data.DataRow,System.String,System.Object@)">
            <summary>Попытаться получить значение поля указанного имени из записи таблицы</summary>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldName">Имя поля</param>
            <param name="result">[out] данные</param>
            <returns>True если поля с таким именем присутствует в таблице и его значение отлично от null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsString(System.Data.DataRow,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки.
                Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsString(System.Data.DataRow,System.Int32,System.String@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде строки. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">(Optional) Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsNotNullString(System.Data.DataRow,System.Int32,System.String@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде строки. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">(Optional) Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsLong(System.Data.DataRow,System.Int32)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsLong(System.Data.DataRow,System.Int32,System.Int64@)">
            <summary>Попытаться получить значение поля в виде long. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsInt(System.Data.DataRow,System.Int32)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsInt(System.Data.DataRow,System.Int32,System.Int32@)">
            <summary>Попытаться получить значение поля в виде int. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsEnum``1(System.Data.DataRow,System.Int32)">
            <summary>Получить значение поля в виде Enum. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsEnum``1(System.Data.DataRow,System.Int32,``0@)">
            <summary>Попытаться получить значение поля в виде Enum. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDouble(System.Data.DataRow,System.Int32)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsDouble(System.Data.DataRow,System.Int32,System.Double@)">
            <summary>Попытаться получить значение поля в виде double. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBool(System.Data.DataRow,System.Int32)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsBool(System.Data.DataRow,System.Int32,System.Boolean@)">
            <summary>Попытаться получить значение поля в виде bool. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsDateTime(System.Data.DataRow,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsDateTime(System.Data.DataRow,System.Int32,System.DateTime@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsGuid(System.Data.DataRow,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsGuid(System.Data.DataRow,System.Int32,System.Guid@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде Guid. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.FieldAsBytes(System.Data.DataRow,System.Int32)">
            <summary>Получить значение поля в виде массива байтов. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetFieldAsBytes(System.Data.DataRow,System.Int32,System.Byte[]@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде byte[]. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">(Optional) Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.GetFieldValue(System.Data.DataRow,System.Int32)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataRowExtensions.TryGetGetFieldValue(System.Data.DataRow,System.Int32,System.Object@,System.IFormatProvider)">
            <summary>Попытаться получить значение поля в виде object. Выполняет проверку на Null и DBNull</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:System.InvalidCastException">Конвертация данных в указанный тип не поддерживается</exception>
            <param name="dataRow">Строка таблицы</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="result">[out] The result</param>
            <param name="formatProvider">(Optional) Культура (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>True если значение поля отлично от Null и DBNull</returns>
        </member>
        <member name="T:Intermech.Extensions.DataTableExtensions">
            <summary>Расширения над DataTable</summary>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.DeleteRows(System.Data.DataTable,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>Удаляю из таблицы все записи, для которых переданная лямбда вернёт true</summary>
            <param name="dataTable">Таблица, из которой должно быть произведено удаление строк</param>
            <param name="predicate">Лямбда, в которую передаётся запись таблица, и которая удалять ли эту запись (true) или нет (false)</param>
            <returns>Таблица, из которой было произведено удаление строк</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.Select``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0})">
            <summary>Преобразование коллекции строк таблицы данных в новую форму</summary>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.Select``1(System.Data.DataTable,System.Func{System.Data.DataRow,System.Int32,``0})">
            <summary>Преобразование коллекции строк таблицы данных в новую форму</summary>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.SelectNotNull``1(System.Data.DataTable,System.Func{System.Data.DataRow,``0})">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.Where(System.Data.DataTable,System.Func{System.Data.DataRow,System.Boolean})">
            <summary>Фильтрация коллекции строк таблицы</summary>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.Where(System.Data.DataTable,System.Func{System.Data.DataRow,System.Int32,System.Boolean})">
            <summary>Фильтрация коллекции строк таблицы</summary>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``1(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений поля</summary>
            <param name="dataTable">Таблица</param>
            <param name="columnIndex">Номер колонки таблицы содержащей значения.
                                      Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``1(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений поля</summary>
            <param name="dataTable">Таблица</param>
            <param name="columnName">Имя колонки таблицы содержащей значения</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``1(System.Data.DataTable,Intermech.Extensions.Field{``0})">
            <summary>Получить перечисление значений поля</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field">Дескриптор поля </param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``2(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений полей</summary>
            <typeparam name="T1">Generic type parameter</typeparam>
            <typeparam name="T2">Generic type parameter</typeparam>
            <param name="dataTable">Таблица</param>
            <param name="startColumnIndex">Номер колонки таблицы содержащей значения.
                                           Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``2(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений полей</summary>
            <typeparam name="T1">Generic type parameter</typeparam>
            <typeparam name="T2">Generic type parameter</typeparam>
            <param name="dataTable">Таблица</param>
            <param name="startColumnName">Имя колонки первой таблицы содержащей значения,
                  остальные значения должны последовательно следовать в следующих колонках</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``2(System.Data.DataTable,Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1})">
            <summary>Получить коллекцию значений полей</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``3(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnIndex">Номер колонки таблицы содержащей значения.
                                           Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``3(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnName">Имя колонки первой таблицы содержащей значения,
                  остальные значения должны последовательно следовать в следующих колонках</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``3(System.Data.DataTable,Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2})">
            <summary>Получить коллекцию значений полей</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``4(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnIndex">Номер колонки таблицы содержащей значения.
                                           Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``4(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnName">Имя колонки первой таблицы содержащей значения,
                  остальные значения должны последовательно следовать в следующих колонках</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``4(System.Data.DataTable,Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3})">
            <summary>Получить коллекцию значений полей</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``5(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnIndex">Номер колонки таблицы содержащей значения.
                                           Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``5(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnName">Имя колонки первой таблицы содержащей значения,
                  остальные значения должны последовательно следовать в следующих колонках</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``5(System.Data.DataTable,Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4})">
            <summary>Получить коллекцию значений полей</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``6(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnIndex">Номер колонки таблицы содержащей значения.
                                           Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``6(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnName">Имя колонки первой таблицы содержащей значения,
                  остальные значения должны последовательно следовать в следующих колонках</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``6(System.Data.DataTable,Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4},Intermech.Extensions.Field{``5})">
            <summary>Получить коллекцию значений полей</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <param name="field6">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``7(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnIndex">Номер колонки таблицы содержащей значения.
                                           Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``7(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnName">Имя колонки первой таблицы содержащей значения,
                  остальные значения должны последовательно следовать в следующих колонках</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``7(System.Data.DataTable,Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4},Intermech.Extensions.Field{``5},Intermech.Extensions.Field{``6})">
            <summary>Получить коллекцию значений полей</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <param name="field6">Дескриптор поля</param>
            <param name="field7">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``8(System.Data.DataTable,System.Int32)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnIndex">Номер колонки таблицы содержащей значения.
                                           Если не указывать, то берётся первая колонка таблицы</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``8(System.Data.DataTable,System.String)">
            <summary>Получить перечисление значений полей</summary>
            <param name="dataTable">Таблица</param>
            <param name="startColumnName">Имя колонки первой таблицы содержащей значения,
                  остальные значения должны последовательно следовать в следующих колонках</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.GetValues``8(System.Data.DataTable,Intermech.Extensions.Field{``0},Intermech.Extensions.Field{``1},Intermech.Extensions.Field{``2},Intermech.Extensions.Field{``3},Intermech.Extensions.Field{``4},Intermech.Extensions.Field{``5},Intermech.Extensions.Field{``6},Intermech.Extensions.Field{``7})">
            <summary>Получить коллекцию значений полей</summary>
            <param name="dataTable">Таблица</param>>
            <param name="field1">Дескриптор поля</param>
            <param name="field2">Дескриптор поля</param>
            <param name="field3">Дескриптор поля</param>
            <param name="field4">Дескриптор поля</param>
            <param name="field5">Дескриптор поля</param>
            <param name="field6">Дескриптор поля</param>
            <param name="field7">Дескриптор поля</param>
            <param name="field8">Дескриптор поля</param>
            <returns>Перечисление искомых значений</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsStringListDef(System.Data.DataTable,System.String,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsStringListDef(System.Data.DataTable,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsLongListDef(System.Data.DataTable,System.String,System.Int64)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsIntListDef(System.Data.DataTable,System.String,System.Int32)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDoubleDef(System.Data.DataTable,System.String,System.Double)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBoolListDef(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDateTimeListDef(System.Data.DataTable,System.String,System.DateTime,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDateTimeListDef(System.Data.DataTable,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsGuidListDef(System.Data.DataTable,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBytesListDef(System.Data.DataTable,System.String,System.Byte[])">
            <summary>Получить список значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsObjectListDef(System.Data.DataTable,System.String,System.Object)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsStringListDef(System.Data.DataTable,System.Int32,System.String,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsStringListDef(System.Data.DataTable,System.Int32,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsLongListDef(System.Data.DataTable,System.Int32,System.Int64)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsIntListDef(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDoubleListDef(System.Data.DataTable,System.Int32,System.Double)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBoolListDef(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDateTimeListDef(System.Data.DataTable,System.Int32,System.DateTime,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDateTimeListDef(System.Data.DataTable,System.Int32,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsGuidListDef(System.Data.DataTable,System.Int32,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBytesListDef(System.Data.DataTable,System.Int32,System.Byte[])">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsObjectDef(System.Data.DataTable,System.Int32,System.Object)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.SelectNotNull(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Возвращает последовательность значений поля, отличных от DBNull и null.
                     Если failOnNull == true, то при обнаружении поля с пустым значением выбрасывает FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда failOnNull == true и значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.SelectNotNull(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Возвращает последовательность значений поля, отличных от DBNull и null.
                     Если failOnNull == true, то при обнаружении поля с пустым значением выбрасывает FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда failOnNull == true и значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsStringList(System.Data.DataTable,System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsLongList(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsIntList(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDoubleList(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBoolList(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDateTimeList(System.Data.DataTable,System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsGuidList(System.Data.DataTable,System.String,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBytesList(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsObjectList(System.Data.DataTable,System.String,System.Boolean)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldName">Имя поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsStringList(System.Data.DataTable,System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде строки. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsLongList(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде Long. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsIntList(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде Int. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDoubleList(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде Double. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBoolList(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде bool. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsDateTimeList(System.Data.DataTable,System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде DateTime. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsGuidList(System.Data.DataTable,System.Int32,System.Boolean,System.IFormatProvider)">
            <summary>Получить список значений поля в виде Guid. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.DataRow.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsBytesList(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде массива байтов. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.DataTableExtensions.FieldAsObjectList(System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Получить список значений поля в виде объекта. Если failOnNull == true, выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataTable">Таблица</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="failOnNull">(Optional) Если true, то в случае обнаружения поля со значение null или DBNull будет выброшено исключение FieldIsEmptyException</param>
            <returns>Список значений указанного поля</returns>
        </member>
        <member name="T:Intermech.Extensions.DataReaderExtensions">
            <summary>Расширения для IDataReader</summary>
        </member>
        <member name="M:Intermech.Extensions.DataReaderExtensions.Enumerate(System.Data.IDataReader)">
            <summary>Получение последовательности записей данных одиночного запроса</summary>
        </member>
        <member name="M:Intermech.Extensions.DataReaderExtensions.BatchEnumerate(System.Data.IDataReader)">
            <summary>Получение перечисление последовательностей записей данных пакета запросов</summary>
        </member>
        <member name="T:Intermech.Extensions.IDataRecordExtensions">
            <summary>Методы-расширения для IDataRecord</summary>
            ReSharper disable once InconsistentNaming
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsStringDef(System.Data.IDataRecord,System.String,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsStringDef(System.Data.IDataRecord,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsLongDef(System.Data.IDataRecord,System.String,System.Int64)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsIntDef(System.Data.IDataRecord,System.String,System.Int32)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDoubleDef(System.Data.IDataRecord,System.String,System.Double)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBoolDef(System.Data.IDataRecord,System.String,System.Boolean)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDateTimeDef(System.Data.IDataRecord,System.String,System.DateTime,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDateTimeDef(System.Data.IDataRecord,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsGuidDef(System.Data.IDataRecord,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBytesDef(System.Data.IDataRecord,System.String,System.Byte[])">
            <summary>Получить значение поля в виде массива байтов. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsObjectDef(System.Data.IDataRecord,System.String,System.Object)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsStringDef(System.Data.IDataRecord,System.Int32,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>///
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsStringDef(System.Data.IDataRecord,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - возвращает string.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsLongDef(System.Data.IDataRecord,System.Int32,System.Int64)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsIntDef(System.Data.IDataRecord,System.Int32,System.Int32)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDoubleDef(System.Data.IDataRecord,System.Int32,System.Double)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBoolDef(System.Data.IDataRecord,System.Int32,System.Boolean)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDateTimeDef(System.Data.IDataRecord,System.Int32,System.DateTime,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDateTimeDef(System.Data.IDataRecord,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает DateTime.MinValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsGuidDef(System.Data.IDataRecord,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - возвращает Guid.Empty</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBytesDef(System.Data.IDataRecord,System.Int32,System.Byte[])">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - возвращает defaultValue</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsObjectDef(System.Data.IDataRecord,System.Int32,System.Object)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsString(System.Data.IDataRecord,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsLong(System.Data.IDataRecord,System.String)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsInt(System.Data.IDataRecord,System.String)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDouble(System.Data.IDataRecord,System.String)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBool(System.Data.IDataRecord,System.String)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDateTime(System.Data.IDataRecord,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsGuid(System.Data.IDataRecord,System.String,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBytes(System.Data.IDataRecord,System.String)">
            <summary>Получить значение поля в виде массива байтов. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsObject(System.Data.IDataRecord,System.String)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldName">Имя поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsString(System.Data.IDataRecord,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде строки. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">(Optional) Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsLong(System.Data.IDataRecord,System.Int32)">
            <summary>Получить значение поля в виде Long. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsInt(System.Data.IDataRecord,System.Int32)">
            <summary>Получить значение поля в виде Int. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDouble(System.Data.IDataRecord,System.Int32)">
            <summary>Получить значение поля в виде Double. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBool(System.Data.IDataRecord,System.Int32)">
            <summary>Получить значение поля в виде bool. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsDateTime(System.Data.IDataRecord,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде DateTime. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsGuid(System.Data.IDataRecord,System.Int32,System.IFormatProvider)">
            <summary>Получить значение поля в виде Guid. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <param name="formatProvider">Формат записи Даты-Времени (если null - используется CultureInfo.InvariantCulture)</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsBytes(System.Data.IDataRecord,System.Int32)">
            <summary>Получить значение поля в виде массива байтов. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="M:Intermech.Extensions.IDataRecordExtensions.FieldAsObject(System.Data.IDataRecord,System.Int32)">
            <summary>Получить значение поля в виде объекта. Выполняет проверку на Null и DBNull и если поле пусто - генерирует FieldIsEmptyException</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when no column with the specified name was found</exception>
            <exception cref="T:Intermech.Data.FieldIsEmptyException">Выбрасывается когда значение поля равно null или DBNull.Value</exception>
            <param name="dataRecord">Запись данных</param>
            <param name="fieldIndex">Номер поля</param>
            <returns>Значение указанного поля</returns>
        </member>
        <member name="T:Intermech.Extensions.IDbCommandExtensions">
            <summary>Расширения для класса IDbCommand</summary>
        </member>
        <member name="M:Intermech.Extensions.IDbCommandExtensions.Query(System.Data.IDbCommand,System.Object[])">
            <summary>Перечисление записей результата SQL запроса в БД</summary>
        </member>
        <member name="T:Intermech.Extensions.FieldWithNameNotFoundException">
            <summary>Исключительная ситуация "Поле не найдено"</summary>
        </member>
        <member name="T:Intermech.Extensions.ResourceNotFoundException">
            <summary>Ресурс не найден в сборке</summary>
        </member>
        <member name="T:Intermech.Extensions.IDisposableServiceProvider">
            <summary>IServiceProvider поддерживающий IDisposable</summary>
        </member>
        <member name="T:Intermech.Extensions.IServiceProviderExtensions">
            <summary>Расширения для <see cref="T:System.IServiceProvider"/></summary>
        </member>
        <member name="T:Intermech.Extensions.Library">
            <summary>Статический класс-хелпер для инициализации сервисов, кэшей и т.п. библиотеки Intermech.Extensions</summary>
        </member>
        <member name="M:Intermech.Extensions.Library.Init(System.IServiceProvider)">
            <summary>Инициализация сервисов, кэшей и т.п. библиотеки Intermech.Extensions</summary>
        </member>
        <member name="T:Intermech.Extensions.EnumType">
            <summary>Используйте класс <see cref="T:Intermech.Extensions.EnumHelper"/></summary>
        </member>
        <member name="M:Intermech.Extensions.EnumType.GetValuesList``1">
            <summary>Получить список возможных значений Enum</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumType.GetValuesEnumeration``1">
            <summary>Получить список возможных значений Enum</summary>
        </member>
        <member name="M:Intermech.Extensions.ExpressionExtensions.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Получить дескриптор свойства из выражения обращения к свойству</summary>
        </member>
        <member name="M:Intermech.Extensions.ExpressionExtensions.GetObjectProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Получить объект и дескриптор его свойства из выражения обращения к свойству</summary>
        </member>
        <member name="M:Intermech.Extensions.ExpressionExtensions.GetField``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Получить дескриптор поля из выражения обращения к свойству</summary>
        </member>
        <member name="M:Intermech.Extensions.ExpressionExtensions.GetObjectField``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Получить объект и дескриптор его поля из выражения обращения к свойству</summary>
        </member>
        <member name="M:Intermech.Extensions.ExpressionExtensions.GetMember``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Получить объект и дескриптор его поля из выражения обращения к свойству</summary>
        </member>
        <member name="T:Intermech.Extensions.Resx.Attributes">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intermech.Extensions.Resx.Attributes.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intermech.Extensions.Resx.Attributes.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Intermech.Extensions.Resx.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intermech.Extensions.Resx.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intermech.Extensions.Resx.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Intermech.Extensions.ResourceManagerExtensions">
            <summary>Расширения для класса <see cref="T:System.Resources.ResourceManager"/></summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.FilterOperationCancelled(System.AggregateException)">
            <summary>Изъять из составной исключительной ситуации все OperationCanceled исключительные ситуации, либо содержащие
                     таковые в InnerException. Если после фильтрации останется только одна исключительная ситуация - вернёт её,
                     иначе AggregateException из всех оставшихся</summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.FilterNotComeFrom(System.AggregateException,System.Exception)">
            <summary>Изъять из составной исключительной ситуации все исключительные ситуации равные otherException, либо содержащие
                     таковые в InnerException. Если после фильтрации останется только одна исключительная ситуация - вернёт её,
                     иначе AggregateException из всех оставшихся. Требуется например для исключения повторного показа сообщения
                     об ошибке</summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.ExtractExceptionOfType``1(System.AggregateException)">
            <summary>Ищет исключительную ситуацию заданного типа в составе составной исключительной ситуации,
                     а так же среди всех InnerException всех исключительных ситуаций, входящих в данную составную</summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.TryExtractExceptionOfType``1(System.AggregateException,``0@)">
            <summary>Ищет исключительную ситуацию заданного типа в составе составной исключительной ситуации,
                     а так же среди всех InnerException всех исключительных ситуаций, входящих в данную составную</summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.ExtractOperationCanceled(System.AggregateException)">
            <summary>Ищет OperationCanceled в составе составной исключительной ситуации, а так же среди всех InnerException всех
                     исключительных ситуаций, входящих в данную составную</summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.TryExtractOperationCanceled(System.AggregateException,System.OperationCanceledException@)">
            <summary>Ищет OperationCanceled в составе составной исключительной ситуации, а так же среди всех InnerException всех
                     исключительных ситуаций, входящих в данную составную</summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.ExtractErrorMessageException(System.AggregateException)">
            <summary>Ищет ErrorMessageException в составе составной исключительной ситуации, а так же среди всех InnerException
                     всех исключительных ситуаций, входящих в данную составную</summary>
        </member>
        <member name="M:Intermech.Extensions.AggregateExceptionExtensions.TryExtractErrorMessageException(System.AggregateException,Intermech.Diagnostics.ErrorMessageException@)">
            <summary>Ищет ErrorMessageException в составе составной исключительной ситуации, а так же среди всех InnerException
                     всех исключительных ситуаций, входящих в данную составную</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.GetExceptionOfType``1(System.Exception)">
            <summary>Ищет в переданной исключительной ситуации исключительную ситуацию заданного типа.
                     Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.TryGetExceptionOfType``1(System.Exception,``0@)">
            <summary>Ищет в переданной исключительной ситуации исключительную ситуацию заданного типа.
                     Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.GetOperationCancelled(System.Exception)">
            <summary>Ищет в исключительной ситуации OperationCanceledException. Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.TryGetOperationCancelled(System.Exception,System.OperationCanceledException@)">
            <summary>Ищет в исключительной ситуации OperationCanceledException. Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.GetErrorMessageException(System.Exception)">
            <summary>Ищет в исключительной ситуации ErrorMessageException. Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.TryGetErrorMessageException(System.Exception,Intermech.Diagnostics.ErrorMessageException@)">
            <summary>Ищет в исключительной ситуации ErrorMessageException. Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.TryGetExceptionOfType``1(System.Exception)">
            <summary>Ищет в переданной исключительной ситуации исключительную ситуацию заданного типа.
                     Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.TryGetOperationCancelled(System.Exception)">
            <summary>Ищет в исключительной ситуации OperationCanceledException. Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.TryGetErrorMessageException(System.Exception)">
            <summary>Ищет в исключительной ситуации ErrorMessageException. Ею может быть либо эта исключительная ситуация сама по себе,
                     либо, если это составная исключительная ситуация, - одна из входящих в её состав,
                     либо одна из вложенных (InnerException) исключительных ситуаций</summary>
        </member>
        <member name="M:Intermech.Extensions.ExceptionExtensions.IsDiskFullException(System.Exception)">
            <summary>
            Метод проверяет, является ли exception  - "Not enough disk space"
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Intermech.Extensions.NullableExtensions">
            <summary>Extensions for Nullable</summary>
        </member>
        <member name="M:Intermech.Extensions.NullableExtensions.CheckInitializedIn``1(System.Nullable{``0},System.String)">
            <summary>Проверка, что значение уже было задано, что как правило происходит при инициализации контейнера, которому оно
                     принадлежит</summary>
            <exception cref="T:Intermech.Diagnostics.NotYetInitializedException">Выбрасывается если <see cref="!:nullable"/> == null, что означает, что владелец ещё не
                                                         был инициализирован</exception>
            <param name="nullable">Значение, проверяемое на null</param>
            <param name="containerName">Наименование контейнера, инициализация которого заполняет значение, проверяемое на null</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.NullableExtensions.CheckInitializedIn``1(System.Nullable{``0},System.Type)">
            <summary>Проверка, что значение уже было задано, что как правило происходит при инициализации контейнера, которому оно
                     принадлежит</summary>
            <exception cref="T:Intermech.Diagnostics.NotYetInitializedException">Выбрасывается если <see cref="!:nullable"/> == null, что означает, что владелец ещё не
                                                         был инициализирован</exception>
            <param name="nullable">Значение проверяемое на null</param>
            <param name="staticContainerType">Тип статического класса, полем, либо свойством которого является значение</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.NullableExtensions.CheckInitializedIn``1(System.Nullable{``0},System.Object)">
            <summary>Проверка, что значение уже было задано, что как правило происходит при инициализации контейнера, которому оно
                     принадлежит</summary>
            <exception cref="T:Intermech.Diagnostics.NotYetInitializedException">Выбрасывается если <see cref="!:nullable"/> == null, что означает, что владелец ещё не
                                                         был инициализирован</exception>
            <param name="nullable">Значение, проверяемое на null</param>
            <param name="container">Контейнер, инициализация которого заполняет значение, проверяемое на null</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.InvokeIfNotNull``1(``0,System.Action{``0})">
            <summary>Вызывает обработку объекта если он не null</summary>
            <param name="obj">The obj to act on</param>
            <param name="action">Обработка объекта</param>
            <returns>An object. This may be null</returns>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.InvokeIfNotNull``1(``0,System.Action)">
            <summary>Вызывает делегат если объект не null</summary>
            <param name="obj">The obj to act on</param>
            <param name="action">Обработка объекта</param>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.If``1(``0,System.Func{``0,System.Boolean})">
            <summary>Если условие возвращается - возвращает объекта, иначе null</summary>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.GetIf``1(``0,System.Func{``0,System.Boolean},``0@)">
            <summary>Если условие возвращается - возвращает объекта, иначе null</summary>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.Invoke``1(``0,System.Action{``0})">
            <summary>Вызывает обработку объекта (удобно использовать для значений, получаемых из методов, которые требуют проверки и обработки -
                     не надо объявлять переменную для сохранения значения)</summary>
            <param name="obj">The obj to act on</param>
            <param name="action">Обработка объекта</param>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.Invoke``2(``0,System.Func{``0,``1})">
            <summary>Вызывает обработку объекта (удобно использовать для значений, получаемых из методов, которые требуют проверки и обработки -
                     не надо объявлять переменную для сохранения значения)</summary>
            <param name="obj">The obj to act on</param>
            <param name="func">Обработка объекта</param>
            <returns>Результат обработки объекта</returns>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.InvokeIf``1(``0,System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>Вызывает обработку объекта если объект он не null и условие выполняется</summary>
            <param name="obj">The obj to act on</param>
            <param name="condition">Условие</param>
            <param name="action">Обработка объекта</param>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.InvokeIf``1(``0,System.Func{``0,System.Boolean},System.Action)">
            <summary>Вызывает делегат если объект он не null и условие выполняется</summary>
            <param name="obj">The obj to act on</param>
            <param name="condition">Условие</param>
            <param name="action">Обработка объекта</param>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.GetRoot``1(``0,System.Func{``0,``0})">
            <summary>Получить конец цепочки, построенной с помощью функции-делегата</summary>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.GetRoot``1(``0,System.Func{``0,System.Nullable{``0}})">
            <summary>Получить конец цепочки, построенной с помощью функции-делегата</summary>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CheckInitializedIn``1(``0,System.String)">
            <summary>Проверка, что объект уже был создан, что как правило происходит при инициализации контейнера, которому он
                     принадлежит</summary>
            <exception cref="T:Intermech.Diagnostics.NotYetInitializedException">Выбрасывается если <see cref="!:obj"/> == null, что означает, что владелец ещё не
                                                         был инициализирован</exception>
            <param name="obj">Объект проверяемый на null</param>
            <param name="containerName">Наименование контейнера, инициализация которого создаёт объект, проверяемый на null</param>
            <returns>Объект для которого выполнялась проверка</returns>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CheckInitializedIn``1(``0,System.Type)">
            <summary>Проверка, что объект уже был создан, что как правило происходит при инициализации контейнера, которому он
                     принадлежит</summary>
            <exception cref="T:Intermech.Diagnostics.NotYetInitializedException">Выбрасывается если <see cref="!:obj"/> == null, что означает, что владелец ещё не
                                                         был инициализирован</exception>
            <param name="obj">Объект проверяемый на null</param>
            <param name="staticContainerType">Тип статического класса, полем, либо свойством которого </param>
            <returns>Объект для которого выполнялась проверка</returns>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CheckInitializedIn``1(``0,System.Object)">
            <summary>Проверка, что объект уже был создан, что как правило происходит при инициализации контейнера, которому он
                     принадлежит</summary>
            <exception cref="T:Intermech.Diagnostics.NotYetInitializedException">Выбрасывается если <see cref="!:obj"/> == null, что означает, что владелец ещё не
                                                         был инициализирован</exception>
            <param name="obj">Объект проверяемый на null</param>
            <param name="container">Контейнер, инициализация которого создаёт объект, проверяемый на null</param>
            <returns>Объект для которого выполнялась проверка</returns>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastToInterface``1(System.Object)">
            <summary>Преобразование объекта к интерфейсу</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastToInterface``2(System.Object)">
            <summary>Преобразование объекта к интерфейсу</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastInterfaceToOtherInterface``2(``0)">
            <summary>Преобразование интерфейса к другому интерфейсу</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastInterfaceToOtherInterface``3(``0)">
            <summary>Преобразование интерфейса к другому интерфейсу</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastInterfaceToClass``2(``0)">
            <summary>Преобразование интерфейса к другому типу объекта</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastInterfaceToClass``3(``0)">
            <summary>Преобразование интерфейса к другому типу объекта</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastClassToClass``1(System.Object)">
            <summary>Преобразование объекта к другому типу объекта</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.ObjectExtensions.CastClassToClass``2(System.Object)">
            <summary>Преобразование объекта к другому типу объекта</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <exception cref="T:System.InvalidCastException">Если преобразование невозможно</exception>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a value from the System.Runtime.Serialization.SerializationInfo store</summary>
            <typeparam name="T">Тип запрашиваемых данных</typeparam>
            <param name="serializationInfo"></param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>Запрошенные данные</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetGuid(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a value from the System.Runtime.Serialization.SerializationInfo store</summary>
            <param name="serializationInfo"></param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>Запрошенные данные</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetValueNotNull``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a value from the System.Runtime.Serialization.SerializationInfo store</summary>
            <typeparam name="T">Тип запрашиваемых данных</typeparam>
            <param name="serializationInfo"></param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>Запрошенные данные</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetNotNullString(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a string value from the SerializationInfo store</summary>
            <exception cref="T:System.ArgumentNullException">if serializationInfo or valueName parameter is null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">if valueName parameter is empty string</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">if valueName parameter is whitespace string</exception>
            <exception cref="T:System.NullReferenceException">if result string is null</exception>
            <exception cref="T:System.InvalidCastException">if value associated with name cannot be converted to string</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if element with the specified name is not found in the current instance</exception>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>The System.String associated with name</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetNotEmptyString(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a string value from the SerializationInfo store</summary>
            <exception cref="T:System.NullReferenceException">if result string is null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Thrown when an Empty String Not Allowed error condition occurs</exception>
            <exception cref="T:System.ArgumentNullException">if serializationInfo or valueName parameter is null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">if valueName parameter is empty string</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">if valueName parameter is whitespace string</exception>
            <exception cref="T:System.InvalidCastException">if value associated with name cannot be converted to string</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if element with the specified name is not found in the current instance</exception>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>The System.String associated with name</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetNotWhitespaceString(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a string value from the SerializationInfo store</summary>
            <exception cref="T:System.NullReferenceException">if result string is null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Thrown when an Empty String Not Allowed error condition occurs</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Thrown when a Whitespace Not Allowed error condition occurs</exception>
            <exception cref="T:System.ArgumentNullException">if serializationInfo or valueName parameter is null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">if valueName parameter is empty string</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">if valueName parameter is whitespace string</exception>
            <exception cref="T:System.InvalidCastException">if value associated with name cannot be converted to string</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if element with the specified name is not found in the current instance</exception>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>The System.String associated with name</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetNotNullValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>Retrieves a value from the SerializationInfo store</summary>
            <exception cref="T:System.NullReferenceException">if result value is null</exception>
            <exception cref="T:System.ArgumentNullException">if serializationInfo or valueName parameter is null</exception>
            <exception cref="T:System.InvalidCastException">if value associated with name cannot be converted to type</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if element with the specified name is not found in the current instance</exception>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <param name="type">The System.Type of the value to retrieve. If the stored value cannot be converted to this type,
                               the system will throw a InvalidCastException</param>
            <returns>The value associated with name</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetNotNullValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a value from the SerializationInfo store</summary>
            <typeparam name="T">The type of the value to retrieve. If the stored value cannot be converted to this type,
                               the system will throw a InvalidCastException</typeparam>
            <exception cref="T:System.NullReferenceException">if result value is null</exception>
            <exception cref="T:System.ArgumentNullException">if serializationInfo or valueName parameter is null</exception>
            <exception cref="T:System.InvalidCastException">if value associated with name cannot be converted to type</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if element with the specified name is not found in the current instance</exception>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>The value associated with name</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetNotEmptyValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>Retrieves a value from the SerializationInfo store</summary>
            <typeparam name="T">The type of the value to retrieve. If the stored value cannot be converted to this type,
                               the system will throw a InvalidCastException</typeparam>
            <exception cref="T:System.ArgumentNullException">if serializationInfo or valueName parameter is null</exception>
            <exception cref="T:System.InvalidCastException">if value associated with name cannot be converted to type</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if element with the specified name is not found in the current instance</exception>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">if result value is equal to default value of the type</exception>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <returns>The value associated with name</returns>
        </member>
        <member name="M:Intermech.Extensions.SerializationInfoExtensions.GetType(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean)">
            <summary>Retrieves a type from the SerializationInfo store</summary>
            <exception cref="T:System.ArgumentNullException">if serializationInfo or valueName parameter is null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">if valueName parameter is empty string</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">if valueName parameter is whitespace string</exception>
            <exception cref="T:System.InvalidCastException">if value associated with name cannot be converted to string (type name)</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">if element with the specified name is not found in the current instance</exception>
            <exception cref="T:System.TypeLoadException">if type not found and throwExceptionIfNotFound is true</exception>
            <param name="serializationInfo">SerializationInfo</param>
            <param name="valueName">The name associated with the value to retrieve</param>
            <param name="throwExceptionIfNotFound">if true method will check result is not null and throw TypeLoadException if it is null</param>
            <returns>The type associated with name, or null if type not found and throwExceptionIfNotFound parameter is false</returns>
        </member>
        <member name="T:Intermech.Extensions.StringBuilderExtensions">
            <summary>Расширения для StringBuilder</summary>
        </member>
        <member name="M:Intermech.Extensions.StringBuilderExtensions.AppendWithDelimiter(System.Text.StringBuilder,System.String,System.String,System.Int32)">
            <summary>Добавить в билдер текст. Если в билдере уже есть текст, то так же добавить перед текстом разделитель</summary>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.ReduceWhitespace(System.String)">
            <summary>Убрать двойные, тройные и т.д. пробелы</summary>
        </member>
        <member name="T:Intermech.Extensions.RegexExtensions">
            <summary>Расширения над классом Regex</summary>
        </member>
        <member name="M:Intermech.Extensions.RegexExtensions.GetFirstMatch(System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>Get first match of regex</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <param name="text">The text</param>
            <param name="defaultValue">(Optional) The default value. This may be null</param>
            <returns>List of Regex match values</returns>
        </member>
        <member name="M:Intermech.Extensions.RegexExtensions.GetFirstMatchGroups(System.Text.RegularExpressions.Regex,System.String)">
            <summary>Get groups from first match of regex</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <param name="text">The text</param>
            <returns>List of Regex match values</returns>
        </member>
        <member name="M:Intermech.Extensions.RegexExtensions.GetMatches(System.Text.RegularExpressions.Regex,System.String)">
            <summary>Projects each element of a list of values</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <param name="text">The text</param>
            <returns>List of Regex match values</returns>
        </member>
        <member name="M:Intermech.Extensions.RegexExtensions.GetMatchesGroups(System.Text.RegularExpressions.Regex,System.String)">
            <summary>Projects each element of a list of values</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <param name="text">The text</param>
            <returns>List of Regex match values</returns>
        </member>
        <member name="T:Intermech.Extensions.MatchCollectionExtensions">
            <summary>Расширения над классом MatchCollection</summary>
        </member>
        <member name="M:Intermech.Extensions.MatchCollectionExtensions.Select``1(System.Text.RegularExpressions.MatchCollection,System.Func{System.Text.RegularExpressions.Match,``0})">
            <summary>Projects each element of a sequence into a new form</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <param name="selector">The selector</param>
            <returns>An enumeration that allows foreach to be used to process select in this collection</returns>
        </member>
        <member name="M:Intermech.Extensions.MatchCollectionExtensions.Select``1(System.Text.RegularExpressions.MatchCollection,System.Func{System.Text.RegularExpressions.Match,System.Int32,``0})">
            <summary>Projects each element of a sequence into a new form by incorporating the element's index</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element</param>
            <returns>An enumeration whose elements are the result of invoking the transform function on each element of source</returns>
        </member>
        <member name="M:Intermech.Extensions.MatchCollectionExtensions.Where(System.Text.RegularExpressions.MatchCollection,System.Func{System.Text.RegularExpressions.Match,System.Boolean})">
            <summary>Filters a sequence of values based on a predicate</summary>
            <param name="source">An MatchCollection to filter</param>
            <param name="predicate">A function to test each match for a condition</param>
            <returns>An enumeration that contains matches from the input sequence that satisfy the condition</returns>
        </member>
        <member name="M:Intermech.Extensions.MatchCollectionExtensions.Where(System.Text.RegularExpressions.MatchCollection,System.Func{System.Text.RegularExpressions.Match,System.Int32,System.Boolean})">
            <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function</summary>
            <param name="source">An MatchCollection to filter</param>
            <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element</param>
            <returns>An enumeration that contains matches from the input sequence that satisfy the condition</returns>
        </member>
        <member name="M:Intermech.Extensions.MatchCollectionExtensions.GetFirstGroupValues(System.Text.RegularExpressions.MatchCollection)">
            <summary>Projects each element of a list of values</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <returns>List of Regex match values</returns>
        </member>
        <member name="M:Intermech.Extensions.MatchCollectionExtensions.GetGroupValuesList(System.Text.RegularExpressions.MatchCollection)">
            <summary>Projects each element of a list of values</summary>
            <param name="source">A matchCollection to invoke a transform function on</param>
            <returns>List of Regex match values</returns>
        </member>
        <member name="T:Intermech.Extensions.MatchExtensions">
            <summary>Расширения над классом Match</summary>
        </member>
        <member name="M:Intermech.Extensions.MatchExtensions.GetFirstGroupValue(System.Text.RegularExpressions.Match,System.String)">
            <summary>Get first regex match value</summary>
            <param name="source">A match</param>
            <param name="defaultValue">Default result value if match or any of its group is not success</param>
            <returns>First regex match value</returns>
        </member>
        <member name="M:Intermech.Extensions.MatchExtensions.GetGroupValue(System.Text.RegularExpressions.Match)">
            <summary>Get the list of match group values</summary>
            <param name="source">A match</param>
            <returns>List of match group values</returns>
        </member>
        <member name="T:Intermech.Extensions.IXmlReaderSupport">
            <summary>Поддержка чтения состояния из XmlReader и сохранения в него</summary>
        </member>
        <member name="P:Intermech.Extensions.IXmlReaderSupport.XmlNodeName">
            <summary>Имя xml ноды, в которой хранится состояние объекта</summary>
        </member>
        <member name="M:Intermech.Extensions.IXmlReaderSupport.ReadFromXml(System.Xml.XmlReader)">
            <summary>Чтение состояния из XML</summary>
        </member>
        <member name="T:Intermech.Extensions.XmlReaderExtensions">
            <summary>Расширения для <see cref="T:System.Xml.XmlReader"/></summary>
        </member>
        <member name="T:Intermech.Extensions.IXmlWriterSupport">
            <summary>Поддержка сохранения состояния из XmlReader и сохранения в него</summary>
        </member>
        <member name="M:Intermech.Extensions.IXmlWriterSupport.WriteToXml(System.Xml.XmlWriter,System.String)">
            <summary>Сохранение состояния в XML</summary>
        </member>
        <member name="T:Intermech.Extensions.XmlWriterExtensions">
            <summary>Расширения для <see cref="T:System.Xml.XmlWriter"/></summary>
        </member>
        <member name="T:Intermech.Async.SynchronizationContextAwaiter">
            <summary>Штука, позволяющая переключить асинхронное выполнение в заданный контекст.
                     В паре с методом-расширением <see cref="M:Intermech.Extensions.SynchronizationContextExtensions.GetAwaiter(System.Threading.SynchronizationContext)"/> позволяет использовать как в примере.
                     Использовать осторожно, с пониманием что делается и какие могут быть последствия</summary>
            <remarks>Реализованно в связи с тем, что <see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/>(true) не гарантирует возвращения в контекст контрола, в частности столкнулся
                     с такой проблемой при написании плагина для MS Project</remarks>>
            <example>
            SynchronizationContext capturedContext = SynchronizationContext.Current;
            try
            {
                await AsyncMethod();
            }
            finally
            {
                await capturedContext; // Здесь произойдёт возвращение в захваченный ранее контекст
            }
            </example>
        </member>
        <member name="T:Intermech.Collections.BiDirectDictionary`2">
            <summary>Двусвязанный словарь, с индексацией поиска не только значения по ключу, но и ключа по значению
                     И ключ, и значение должны быть уникальными</summary>
            <typeparam name="TKey">Тип ключа</typeparam>
            <typeparam name="TValue">Тип значения</typeparam>
        </member>
        <member name="F:Intermech.Collections.BiDirectDictionary`2._keyValueDic">
            <summary>Словарь "ключ -> значение"</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.ValueByKey">
            <summary>Публичный read only интерфейс словаря "ключ -> значение"</summary>
        </member>
        <member name="F:Intermech.Collections.BiDirectDictionary`2._valueKeyDic">
            <summary>Словарь "ключ -> значение"</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.KeyByValue">
            <summary>Публичный read only интерфейс словаря "значение -> ключ"</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.Keys">
            <summary>Коллекция ключей</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.Values">
            <summary>Коллекция значений</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.Item(`0)">
            <summary>Ключ -> значение</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.TryGetValue(`0,`1@)">
            <summary>Попытаться получить значение по ключу</summary>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <param name="key">Ключ</param>
            <param name="value">[out] Значение</param>
            <returns>True если значение найдено и возвращено</returns>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.TryGetKey(`1,`0@)">
            <summary>Попытаться получить ключу по значению</summary>
            <param name="value">Значение</param>
            <param name="key">[out] Ключ</param>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.GetEnumerator">
            <summary>Енумератор</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.Add(`0,`1)">
            <summary>Добавить пару ключ + значение</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.Remove(`0)">
            <summary>Удалить ключ</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.RemoveValue(`1)">
            <summary>Удалить значение</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.Remove(`0,`1)">
            <summary>Удалить пару ключ + значение</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.ContainsKey(`0)">
            <summary>Проверить что ключ уже добавлен</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.ContainsValue(`1)">
            <summary>Проверить что значение уже добавлено</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.RebuildValueToKey">
            <summary>Перестройка словаря "Значение -> Ключ", например после десериализации (сериализуется  и десериализуется только
                словарь "ключ -> значение")</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.GetKeyByValue(`1)">
            <summary>Получить ключ по значению</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.OnDeserialization(System.Object)">
            <summary>Вызывается после дес десериализации</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.System#Collections#ICollection#Count">
            <summary>Кол-во элементов</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.Add(System.Object,System.Object)">
            <summary>Добавить</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>Коллекция всех ключей</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>Удаление ключа через интерфейс</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>Коллекция значений</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectionalLookup`2.KeyValueUnique">
            <summary>Признак того, что пара ключ-значение должны быть уникальными</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectionalLookup`2.GetValuesByKey(`0)">
            <summary>Список значений по ключу</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectionalLookup`2.GetKeysByValue(`1)">
            <summary>Список значений по ключу</summary>
        </member>
        <member name="T:Intermech.Collections.BiDirectMultiDictionary`2">
            <summary>Двусвязанный словарь, с индексацией поиска не только значения по ключу, но и ключа по значению
                     Отношения между ключём и значением построены как "много к одному", то есть у разных ключей может быть одно и то же значение</summary>
            <typeparam name="TKey">Тип ключа</typeparam>
            <typeparam name="TValue">Тип значения</typeparam>
        </member>
        <member name="F:Intermech.Collections.BiDirectMultiDictionary`2._keyValueDic">
            <summary>Словарь "ключ -> значение"</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.ValueByKey">
            <summary>Публичный read only интерфейс словаря "ключ -> значение"</summary>
        </member>
        <member name="F:Intermech.Collections.BiDirectMultiDictionary`2._valueKeyDic">
            <summary>Словарь "значение -> ключ"</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.KeysByValue">
            <summary>Публичный read only интерфейс словаря "значение -> список ключей"</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.Keys">
            <summary>Коллекция ключей</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.Values">
            <summary>Коллекция значений</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.Item(`0)">
            <summary>Ключ -> значение</summary>
            <exception cref="T:System.Exception">Если значение уже присутствует в словаре</exception>
            <param name="key">Ключ</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.TryGetValue(`0,`1@)">
            <summary>Попытаться получить значение по ключу</summary>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <param name="key">Ключ</param>
            <param name="value">[out] Значение</param>
            <returns>True если значение найдено и возвращено</returns>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.TryGetKeys(`1,System.Collections.Generic.List{`0}@)">
            <summary> Попытаться получить ключи по значению </summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.GetEnumerator">
            <summary>Енумератор</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.Add(`0,`1)">
            <summary>Добавить пару ключ + значение</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs</exception>
            <param name="key">Ключ</param>
            <param name="value">Значение</param>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.Remove(`0)">
            <summary>Удалить ключ</summary>
            <param name="key">Ключ</param>
            <returns>True если было удалено</returns>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.RemoveValues(`1)">
            <summary>Удалить значение</summary>
            <param name="value">Значение</param>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.Remove(`0,`1)">
            <summary>Удалить пару ключ + значение</summary>
            <param name="key">ключ</param>
            <param name="value">значение</param>
            <returns>True если было удалено</returns>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.ContainsKey(`0)">
            <summary>Проверить что ключ уже добавлен</summary>
            <exception cref="T:System.ArgumentNullException">Если Key is null</exception>
            <param name="key">ключ</param>
            <returns>True если ключ был добавлен</returns>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.ContainsValue(`1)">
            <summary>Проверить что значение уже добавлено</summary>
            <exception cref="T:System.ArgumentNullException">Значение is null</exception>
            <param name="value">[out] Значение</param>
            <returns>True если значение уже присутствует в словаре</returns>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.RebuildValueToKey">
            <summary>Перестройка словаря "Значение -> Ключ", например после десериализации (сериализуется  и десериализуется только словарь "ключ -> значение")</summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.OnDeserialization(System.Object)">
            <summary>Вызывается после десериализации</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.System#Collections#ICollection#Count">
            <summary>
            Кол-во элементов
            </summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.Add(System.Object,System.Object)">
            <summary>Добавить</summary>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys">
            <summary>
            Коллекция всех ключей
            </summary>
        </member>
        <member name="M:Intermech.Collections.BiDirectMultiDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>
            Удаление ключа через интерфейс
            </summary>
            <param name="key">Ключ</param>
            <returns>True если удалено</returns>
        </member>
        <member name="P:Intermech.Collections.BiDirectMultiDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values">
            <summary>
            Коллекция значений
            </summary>
        </member>
        <member name="T:Intermech.Collections.StackExtensions">
            <summary>Расширения для класс Stack{T}</summary>
        </member>
        <member name="M:Intermech.Collections.StackExtensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Поместить в стек перечисление элементов</summary>
        </member>
        <member name="M:Intermech.Collections.StackExtensions.PopRange``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>Изъять из стека некоторое число элементов</summary>
        </member>
        <member name="M:Intermech.Collections.CollectionAdapterBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a Key Not Found error condition occurs</exception>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyCollection_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyCollection_T instance</param>
        </member>
        <member name="M:Intermech.Collections.CollectionAdapterBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="P:Intermech.Collections.CollectionAdapterBase`1.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyCollectionAdapterBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyCollection_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyCollection_T instance</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyCollectionAdapterBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyCollectionAdapterBase`1.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="T:Intermech.Collections.CollectionCastAdapter`2">
            <summary>Адаптер преобразующий элементы коллекции в TMapped - интерфейс, реализуемый элементами, или их базовый класс</summary>
        </member>
        <member name="T:Intermech.Collections.CollectionMapAdapter`2">
            <summary>Адаптер преобразующий элементы коллекции в TMapped с помощью внешней функции</summary>
        </member>
        <member name="T:Intermech.Collections.GeneralCollectionCastAdapter`1">
            <summary>Адаптер преобразующий элементы нетипизированной коллекции (ICollection) в типизированную ICollection_TMapped</summary>
        </member>
        <member name="M:Intermech.Collections.GeneralCollectionCastAdapter`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="M:Intermech.Collections.GeneralCollectionCastAdapter`1.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Intermech.Collections.GeneralCollectionMapAdapter`1">
            <summary>Адаптер преобразующий элементы нетипизированной коллекции (ICollection) в типизированную ICollection_TMapped</summary>
        </member>
        <member name="M:Intermech.Collections.GeneralCollectionMapAdapter`1.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyCollectionCastAdapter`2">
            <summary>Адаптер преобразующий элементы неизменной коллекции в TMapped - интерфейс, реализуемый элементами, или их
                     базовый класс</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyCollectionCastAdapter`2.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyCollectionMapAdapter`2">
            <summary>Адаптер преобразующий элементы неизменной коллекции в TMapped с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyCollectionMapAdapter`2.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.DictionaryAdapterBase`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a Key Not Found error condition occurs</exception>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the instance</param>
        </member>
        <member name="M:Intermech.Collections.DictionaryAdapterBase`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="M:Intermech.Collections.DictionaryAdapterBase`2.Equals(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>Indicates whether the current object is equal to another object of the same type</summary>
            <param name="other">An object to compare with this object</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Collections.DictionaryAdapterBase`2.Equals(System.Collections.IDictionary)">
            <summary>Indicates whether the current object is equal to another object of the same type</summary>
            <param name="other">An object to compare with this object</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryAdapterBase`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a Key Not Found error condition occurs</exception>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyList_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryAdapterBase`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryAdapterBase`2.Equals(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Indicates whether the current object is equal to another object of the same type</summary>
            <param name="other">An object to compare with this object</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryAdapterBase`2.Equals(System.Collections.IDictionary)">
            <summary>Indicates whether the current object is equal to another object of the same type</summary>
            <param name="other">An object to compare with this object</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="T:Intermech.Collections.DictionaryWithCast`3">
            <summary>Словарь с ключом TKey, значениями - объектами TClass поддерживающих интерфейс или унаследованных от
                     TMappedValue. Позволяет получать словарь в виде неизменного словаря со значениями преобразованными к
                     TMappedValue без дополнительных манипуляций</summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Тип объекта значений словаря</typeparam>
            <typeparam name="TMappedValue">Тип интерфейса или тип, от которого унаследованы значения словаря</typeparam>
        </member>
        <member name="P:Intermech.Collections.DictionaryWithCast`3.Mapped">
            <summary>Интерфейс неизменного словаря со значениями, преобразованными к типу TMappedValue</summary>
        </member>
        <member name="T:Intermech.Collections.DictionaryCastValuesAdapter`3">
            <summary>Адаптер для преобразования значений словаря к типу TMappedValue</summary>
        </member>
        <member name="M:Intermech.Collections.DictionaryCastValuesAdapter`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the instance</param>
        </member>
        <member name="M:Intermech.Collections.DictionaryCastValuesAdapter`3.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TMappedValue}}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.DictionaryCastValuesAdapter`3.TryGetValue(`0,`2@)">
            <summary>Gets the value that is associated with the specified key</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="key">The key to locate</param>
            <param name="value">[out] When this method returns, the value associated with the specified key, if the key is found;
                                otherwise, the default value for the type of the <paramref name="value" /> parameter. This
                                parameter is passed uninitialized</param>
            <returns><see langword="true" /> if the object that implements the
                     <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element
                              that has the specified key; otherwise, <see langword="false" /></returns>
        </member>
        <member name="P:Intermech.Collections.DictionaryCastValuesAdapter`3.System#Collections#Generic#IReadOnlyDictionary{TKey,TMappedValue}#Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
                                                                                <paramref name="key" /> is not found</exception>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TMappedValue">Type of the mapped value</typeparam>
            <param name="key">The key to locate</param>
            <returns>The element that has the specified key in the read-only dictionary</returns>
        </member>
        <member name="T:Intermech.Collections.DictionaryWithMapping`3">
            <summary>Словарь, реализующий преобразование значений к типу TMappedValue с помощью внешней функции</summary>
        </member>
        <member name="P:Intermech.Collections.DictionaryWithMapping`3.Mapped">
            <summary>Интерфейс неизменного словаря со значениями, преобразованными к типу TMappedValue</summary>
        </member>
        <member name="T:Intermech.Collections.DictionaryMapValuesAdapter`3">
            <summary>Адаптер для преобразования значений словаря к типу TMappedValue с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Collections.DictionaryMapValuesAdapter`3.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TMappedValue}}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TMappedValue">Type of the mapped value</typeparam>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.DictionaryMapValuesAdapter`3.TryGetValue(`0,`2@)">
            <summary>Gets the value that is associated with the specified key</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="key">The key to locate</param>
            <param name="value">[out] When this method returns, the value associated with the specified key, if the key is found;
                                otherwise, the default value for the type of the <paramref name="value" /> parameter. This
                                parameter is passed uninitialized</param>
            <returns><see langword="true" /> if the object that implements the
                     <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element
                              that has the specified key; otherwise, <see langword="false" /></returns>
        </member>
        <member name="P:Intermech.Collections.DictionaryMapValuesAdapter`3.System#Collections#Generic#IReadOnlyDictionary{TKey,TMappedValue}#Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
                                                                                <paramref name="key" /> is not found</exception>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TMappedValue">Type of the mapped value</typeparam>
            <param name="key">The key to locate</param>
            <returns>The element that has the specified key in the read-only dictionary</returns>
        </member>
        <member name="T:Intermech.Collections.GeneralDictionaryCastAdapter`2">
            <summary>Адаптер преобразующий элементы нетипизированного словаря (IDictionary) в типизированный IDictionary_TKey_TValue</summary>
        </member>
        <member name="M:Intermech.Collections.GeneralDictionaryCastAdapter`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="T:Intermech.Collections.GeneralDictionaryMapAdapter`2">
            <summary>Адаптер преобразующий элементы нетипизированного словаря (IDictionary) в типизированный
                     IDictionary_TKey_TValue с помощью внешней функции преобразования</summary>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyDictionaryWithCast`3">
            <summary>Неизменный словарь с ключом TKey, значениями - объектами TClass поддерживающих интерфейс или унаследованных от
                     TMappedValue. Позволяет получать словарь в виде неизменного словаря со значениями преобразованными к
                     TMappedValue без дополнительных манипуляций</summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Тип объекта значений словаря</typeparam>
            <typeparam name="TMappedValue">Тип интерфейса или тип, от которого унаследованы значения словаря</typeparam>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyDictionaryWithCast`3.Mapped">
            <summary>Интерфейс неизменного словаря со значениями, преобразованными к типу TMappedValue</summary>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyDictionaryCastValuesAdapter`3">
            <summary>Адаптер для преобразования значений неизменяемого словаря к типу TMappedValue</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryCastValuesAdapter`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the instance</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryCastValuesAdapter`3.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TMappedValue}}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TMappedValue">Type of the mapped value</typeparam>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryCastValuesAdapter`3.TryGetValue(`0,`2@)">
            <summary>Gets the value that is associated with the specified key</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="key">The key to locate</param>
            <param name="value">[out] When this method returns, the value associated with the specified key, if the key is found;
                                otherwise, the default value for the type of the <paramref name="value" /> parameter. This
                                parameter is passed uninitialized</param>
            <returns><see langword="true" /> if the object that implements the
                     <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element
                              that has the specified key; otherwise, <see langword="false" /></returns>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyDictionaryCastValuesAdapter`3.System#Collections#Generic#IReadOnlyDictionary{TKey,TMappedValue}#Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
                                                                                <paramref name="key" /> is not found</exception>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TMappedValue">Type of the mapped value</typeparam>
            <param name="key">The key to locate</param>
            <returns>The element that has the specified key in the read-only dictionary</returns>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyDictionaryWithMapping`3">
            <summary>Неизменный словарь, реализующий преобразование значений к типу TMappedValue с помощью внешней функции</summary>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyDictionaryWithMapping`3.Mapped">
            <summary>Интерфейс неизменного словаря со значениями, преобразованными к типу TMappedValue</summary>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyDictionaryMapValuesAdapter`3">
            <summary>Адаптер для преобразования значений неизменного словаря к типу TMappedValue с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryMapValuesAdapter`3.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TMappedValue}}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TMappedValue">Type of the mapped value</typeparam>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyDictionaryMapValuesAdapter`3.TryGetValue(`0,`2@)">
            <summary>Gets the value that is associated with the specified key</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <param name="key">The key to locate</param>
            <param name="value">[out] When this method returns, the value associated with the specified key, if the key is found;
                                otherwise, the default value for the type of the <paramref name="value" /> parameter. This
                                parameter is passed uninitialized</param>
            <returns><see langword="true" /> if the object that implements the
                     <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element
                              that has the specified key; otherwise, <see langword="false" /></returns>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyDictionaryMapValuesAdapter`3.System#Collections#Generic#IReadOnlyDictionary{TKey,TMappedValue}#Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and
                                                                                <paramref name="key" /> is not found</exception>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TMappedValue">Type of the mapped value</typeparam>
            <param name="key">The key to locate</param>
            <returns>The element that has the specified key in the read-only dictionary</returns>
        </member>
        <member name="M:Intermech.Collections.ListAdapterBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a Key Not Found error condition occurs</exception>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyList_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="M:Intermech.Collections.ListAdapterBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="P:Intermech.Collections.ListAdapterBase`1.Count">
            <summary>Gets the number of elements in the collection</summary>
            <value>The number of elements in the collection</value>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListAdapterBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyList_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListAdapterBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyListAdapterBase`1.Count">
            <summary>Gets the number of elements in the collection</summary>
            <value>The number of elements in the collection</value>
        </member>
        <member name="T:Intermech.Collections.GeneralListCastAdapter`1">
            <summary>Адаптер преобразующий элементы списка (IList) в IList_TMapped</summary>
        </member>
        <member name="M:Intermech.Collections.GeneralListCastAdapter`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="M:Intermech.Collections.GeneralListCastAdapter`1.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Intermech.Collections.GeneralListMapAdapter`1">
            <summary>Адаптер преобразующий элементы списка (IList) в IList_TMapped с помощью внешней функции преобразования</summary>
        </member>
        <member name="M:Intermech.Collections.GeneralListMapAdapter`1.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="T:Intermech.Collections.ListWithCast`2">
            <summary>Список сущностей T поддерживающих интерфейс или унаследованных от TMapped. Позволяет получать список в виде
                     неизменного списка TMapped без дополнительных манипуляций</summary>
            <typeparam name="T">Тип элемента списка</typeparam>
            <typeparam name="TMapped">Тип интерфейса или тип, от которого унаследованы элементы списка</typeparam>
        </member>
        <member name="M:Intermech.Collections.ListWithCast`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the Intermech.Collections.ListWithCast_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="capacity">The number of elements that the new list can initially store</param>
            <param name="enumeration">(Optional) The enumeration whose elements are copied to the new list</param>
        </member>
        <member name="M:Intermech.Collections.ListWithCast`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Initializes a new instance of the Intermech.Collections.ListWithCast_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="enumeration">(Optional) The enumeration whose elements are copied to the new list</param>
            <param name="capacity">(Optional) The number of elements that the new list can initially store</param>
        </member>
        <member name="M:Intermech.Collections.ListWithCast`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ListWithCast_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="T:Intermech.Collections.ListCastAdapter`2">
            <summary>Адаптер преобразующий элементы списка в TMapped - интерфейс, реализуемый элементами, или их базовый класс</summary>
        </member>
        <member name="M:Intermech.Collections.ListCastAdapter`2.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.ListCastAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Collections.ListCastAdapter`2.System#Collections#Generic#IReadOnlyList{TMapped}#Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list</summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="T:Intermech.Collections.ListWithMapping`2">
            <summary>Список сущностей T реализующий преобразование к TMapped с помощью внешней функции. Позволяет получать список в
                     виде неизменного списка TMapped без дополнительных манипуляций</summary>
            <typeparam name="T">Тип элемента списка</typeparam>
            <typeparam name="TMapped">Тип интерфейса или тип, от которого унаследованы элементы списка</typeparam>
        </member>
        <member name="T:Intermech.Collections.ListMapAdapter`2">
            <summary>Адаптер преобразующий элементы списка в TMapped с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Collections.ListMapAdapter`2.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.ListMapAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Collections.ListMapAdapter`2.System#Collections#Generic#IReadOnlyList{TMapped}#Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list</summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyListWithCast`2">
            <summary>Неизменный список сущностей T поддерживающих интерфейс или унаследованных от TMapped. Позволяет получать
                     список в виде неизменного списка TMapped без дополнительных манипуляций</summary>
            <typeparam name="T">Тип элемента списка</typeparam>
            <typeparam name="TMapped">Тип интерфейса или тип, от которого унаследованы элементы списка</typeparam>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListWithCast`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the Intermech.Collections.ReadOnlyListWithCast_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="capacity">The number of elements that the new list can initially store</param>
            <param name="enumeration">(Optional) The enumeration whose elements are copied to the new list</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListWithCast`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Initializes a new instance of the Intermech.Collections.ReadOnlyListWithCast_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="enumeration">The enumeration whose elements are copied to the new list</param>
            <param name="capacity">(Optional) The number of elements that the new list can initially store</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListWithCast`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyListWithCast_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyListCastAdapter`2">
            <summary>Адаптер преобразующий элементы неизменного списка в интерфейсы</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListCastAdapter`2.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListCastAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyListCastAdapter`2.System#Collections#Generic#IReadOnlyList{TMapped}#Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list</summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyListWithMapping`2">
            <summary>Неизменяемый список сущностей T реализующий преобразование к TMapped с помощью внешней функции. Позволяет
                     получать список в виде неизменного списка TMapped без дополнительных манипуляций</summary>
            <typeparam name="T">Тип элемента списка</typeparam>
            <typeparam name="TMapped">Тип интерфейса или тип, от которого унаследованы элементы списка</typeparam>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyListMapAdapter`2">
            <summary>Адаптер преобразующий элементы неизменяемого списка в TMapped с помощью внешней функции</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListMapAdapter`2.System#Collections#Generic#IEnumerable{TMapped}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyListMapAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyListMapAdapter`2.System#Collections#Generic#IReadOnlyList{TMapped}#Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list</summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="T:Intermech.Collections.MutableCollection`1">
            <summary>Коллекция, имеющая признак WasChanged (был изменён)</summary>
        </member>
        <member name="F:Intermech.Collections.MutableCollection`1._ignoreChangedCounter">
            <summary>Счётчик блокировок событий о изменении коллекции</summary>
        </member>
        <member name="M:Intermech.Collections.MutableCollection`1.#ctor">
            <summary>Initializes a new instance of the class</summary>
        </member>
        <member name="M:Intermech.Collections.MutableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the class that contains elements copied
                     from the specified collection</summary>
        </member>
        <member name="M:Intermech.Collections.MutableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>Initializes a new instance of the class that contains elements copied
                     from the specified list</summary>
        </member>
        <member name="M:Intermech.Collections.MutableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the notify collection changed event</summary>
            <param name="e">Event information to send to registered event handlers</param>
        </member>
        <member name="E:Intermech.Collections.MutableCollection`1.CollectionChangedFirstTime">
            <summary>Вызывается в том случае если коллекция была изменена впервые (_wasChanged == false)</summary>
        </member>
        <member name="M:Intermech.Collections.MutableCollection`1.OnCollectionChangedFirstTime(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the notify collection changed event</summary>
            <param name="e">Event information to send to registered event handlers</param>
        </member>
        <member name="P:Intermech.Collections.MutableCollection`1.WasChanged">
            <summary>Признак того, что коллекция была изменена</summary>
        </member>
        <member name="M:Intermech.Collections.MutableCollection`1.StartCollectionQuietCollectionChange">
            <summary>Заблокировать сработку события CollectionChanged</summary>
        </member>
        <member name="M:Intermech.Collections.MutableCollection`1.FinishCollectionQuietCollectionChange">
            <summary>Разблокировать сработку события CollectionChanged</summary>
        </member>
        <member name="T:Intermech.Collections.ReadOnlyList`1">
            <summary>Неизменный список</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.#ctor">
            <summary>Initializes a new instance of the System.Lists.Generic.List_T class that is empty and has the default initial
                     capacity</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the Intermech.Collections.ReadOnlyList_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="capacity">The number of elements that the new list can initially store</param>
            <param name="enumeration">(Optional) The enumeration whose elements are copied to the new list</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Initializes a new instance of the Intermech.Collections.ReadOnlyList_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="enumeration">The enumeration whose elements are copied to the new list</param>
            <param name="capacity">(Optional) The number of elements that the new list can initially store</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyList_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.OnDeserialization(System.Object)">
            <summary>Runs when the entire object graph has been deserialized</summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently
                                 implemented</param>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Lists.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyList`1.Count">
            <summary>Gets the number of elements in the collection</summary>
            <value>The number of elements in the collection</value>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyList`1.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list</summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="P:Intermech.Collections.ReadOnlyList`1.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object</summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><see langword="true" /> if the specified object  is equal to the current object; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.Equals(Intermech.Collections.ReadOnlyList{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type</summary>
            <param name="other">An object to compare with this object</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.Equals(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type</summary>
            <param name="other">An object to compare with this object</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.Equals(System.Collections.IList)">
            <summary>Indicates whether the current object is equal to another object of the same type</summary>
            <param name="other">An object to compare with this object</param>
            <returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" /></returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.GetHashCode">
            <summary>Serves as the default hash function</summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="M:Intermech.Collections.ReadOnlyList`1.ToString">
            <summary>Returns a string that represents the current object</summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="M:Intermech.Collections.IListReadOnlyWrap.WrapAsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>Получить неизменяемую оболочку над IList_T</summary>
        </member>
        <member name="T:Intermech.Collections.IList2IReadOnlyListAdapter`1">
            <summary>Оболочка над IList_T отображающая его в неизменяемый список</summary>
        </member>
        <member name="M:Intermech.Collections.IList2IReadOnlyListAdapter`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection</summary>
            <returns>An enumerator that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Intermech.Collections.IList2IReadOnlyListAdapter`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Intermech.Collections.IList2IReadOnlyListAdapter`1.Count">
            <summary>Gets the number of elements in the collection</summary>
            <value>The number of elements in the collection</value>
        </member>
        <member name="P:Intermech.Collections.IList2IReadOnlyListAdapter`1.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list</summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index in the read-only list</returns>
        </member>
        <member name="M:Intermech.Collections.IList2IReadOnlyListAdapter`1.GetHashCode">
            <summary>Serves as the default hash function</summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="M:Intermech.Collections.IList2IReadOnlyListAdapter`1.ToString">
            <summary>Returns a string that represents the current object</summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="M:Intermech.Collections.IList2IReadOnlyListAdapter`1.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object</summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><see langword="true" /> if the specified object  is equal to the current object; otherwise,
                     <see langword="false" /></returns>
        </member>
        <member name="P:Intermech.Collections.IList2IReadOnlyListAdapter`1.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="T:Intermech.Collections.SerializableList`1">
            <summary>Список, поддерживающий сериализацию</summary>
            <typeparam name="T">Generic type parameter</typeparam>
        </member>
        <member name="M:Intermech.Collections.SerializableList`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the Intermech.Collections.SerializableList_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="capacity">The number of elements that the new list can initially store</param>
            <param name="enumeration">(Optional) The enumeration whose elements are copied to the new list</param>
        </member>
        <member name="M:Intermech.Collections.SerializableList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Initializes a new instance of the Intermech.Collections.SerializableList_T class that is empty and has the
                     specified initial capacity</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity is less than 0</exception>
            <param name="enumeration">(Optional) The enumeration whose elements are copied to the new list</param>
            <param name="capacity">(Optional) The number of elements that the new list can initially store</param>
        </member>
        <member name="M:Intermech.Collections.SerializableList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.SerializableList_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="M:Intermech.Collections.SerializableList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="M:Intermech.Collections.SerializableList`1.OnDeserialization(System.Object)">
            <summary>Runs when the entire object graph has been deserialized</summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently
                                 implemented</param>
        </member>
        <member name="T:Intermech.Collections.SerializableReadOnlyDictionary`2">
            <summary>Неизменяемый словарь с ключами TKey и значениями TValue</summary>
            <typeparam name="TKey">Ключ</typeparam>
            <typeparam name="TValue">Значение</typeparam>
        </member>
        <member name="M:Intermech.Collections.SerializableReadOnlyDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                               information required to deserialize the Intermech.Collections.ReadOnlyList_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                                  source and destination of the serialized stream associated with the
                                  Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="M:Intermech.Collections.SerializableReadOnlyDictionary`2.OnDeserialization(System.Object)">
            <summary>Runs when the entire object graph has been deserialized</summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently
                                 implemented</param>
        </member>
        <member name="M:Intermech.Collections.SerializableReadOnlyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
                     the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this
                                  serialization</param>
        </member>
        <member name="P:Intermech.Collections.SerializableReadOnlyDictionary`2.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="M:Intermech.Collections.IDictionaryReadOnlyWrap.WrapAsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Получить неизменяемую оболочку над IList_T</summary>
        </member>
        <member name="T:Intermech.Collections.IDictionary2IReadOnlyDictionaryAdapter`2">
            <summary>Оболочка над IDictionary_TKey_TValue отображающая его в неизменяемый словарь</summary>
        </member>
        <member name="T:Intermech.Collections.ValuesDictionary`2">
            <summary>Словарь, позволяющий работать с собой как перечислением/коллекцией ValueTuple, а не KeyValuePair как в оригинальном словаре.
                     Позволяет например строить циклы с помощью foreach с именованными полями</summary>
        </member>
        <member name="T:Intermech.Common.ICanBeReadOnly">
            <summary>Интерфейс для объектов, содержимое которых может быть защищено от изменений</summary>
        </member>
        <member name="P:Intermech.Common.ICanBeReadOnly.IsReadOnly">
            <summary>Признак того, что содержимое объекта недоступно для изменения</summary>
        </member>
        <member name="T:Intermech.Common.ICanBeReadOnly2">
            <summary>Расширенный интерфейс для объектов, содержимое которых может быть защищено от изменений</summary>
        </member>
        <member name="P:Intermech.Common.ICanBeReadOnly2.ForceIsReadOnly">
            <summary>Принудительная блокировка редактирования. Включение этого флага исключает возможность разблокировать возможность редактирования перекрывая IsReadOnlyCanBeChanged в потомках и вызывая UpdateReadOnly</summary>
        </member>
        <member name="E:Intermech.Common.ICanBeReadOnly2.ReadOnlyCanBeChangedEvent">
            <summary>Событие которое вызывается перед сменой значения свойства IsReadOnly. Если любой из обработчиков возвращает false, то изменение значения IsReadOnly будет заблокировано</summary>
        </member>
        <member name="M:Intermech.Common.ICanBeReadOnly2.UpdateReadOnly">
            <summary>Проверяет нет ли необходимости изменить статус ReadOnly и если да, то изменяет</summary>
            <returns>true если статус IsReadOnly был изменён</returns>
        </member>
        <member name="E:Intermech.Common.ICanBeReadOnly2.ReadOnlyWasChanged">
            <summary>Событие вызывается после изменения статуса IsReadOnly</summary>
        </member>
        <member name="T:Intermech.Common.CanBeReadOnlyCommon">
            <summary>Базовые функции для работы с объектами, реализующими ICanBeReadOnly</summary>
        </member>
        <member name="T:Intermech.Common.CanBeReadOnlyCommon.IsReadOnlyCanBeChangedEventHandler">
            <summary>Событие которое вызывается перед сменой значения свойства IsReadOnly. Если любой из обработчиков возвращает false, то изменение значения IsReadOnly будет заблокировано</summary>
        </member>
        <member name="M:Intermech.Common.WrapperBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialization constructor</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the
                information required to deserialize the Intermech.Collections.SerializableList_T instance</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the
                source and destination of the serialized stream associated with the Intermech.Collections.ReadOnlyList_T instance</param>
        </member>
        <member name="M:Intermech.Common.WrapperBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization</param>
        </member>
        <member name="M:Intermech.Common.WrapperBase`1.OnDeserialization(System.Object)">
            <summary>Runs when the entire object graph has been deserialized</summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented</param>
        </member>
        <member name="T:Intermech.Common.RussianCase">
            <summary>
            Падежи русского языка
            </summary>
        </member>
        <member name="F:Intermech.Common.RussianCase.Nominative">
            <summary>
            Именительный (Есть... кто? что?)
            </summary>
            <remarks>
            Вспомогательное слово: Есть...
            Сущестительные и местоимения: кто? что?
            Прилагательные, причастия, порядковые числительные: какой? какая? какое? какие?
            Количественные числительные: сколько?
            </remarks>
        </member>
        <member name="F:Intermech.Common.RussianCase.Genitive">
            <summary>
            Родительный (Нет... кого? чего?)
            </summary>
            <remarks>
            Вспомогательное слово: Нет...
            Сущестительные и местоимения: кого? чего?
            Прилагательные, причастия, порядковые числительные: какого? какой? какого? каких?
            Количественные числительные: скольких?
            </remarks>
        </member>
        <member name="F:Intermech.Common.RussianCase.Dative">
            <summary>
            Дательный (Рад... кому? чему?)
            </summary>
            <remarks>
            Вспомогательное слово: Рад...
            Сущестительные и местоимения: кому? чему?
            Прилагательные, причастия, порядковые числительные: какому? какой? какому? каким?
            Количественные числительные: скольким?
            </remarks>
        </member>
        <member name="F:Intermech.Common.RussianCase.Accusative">
            <summary>
            Винительный (Вижу... кого? что?)
            </summary>
            <remarks>
            Вспомогательное слово: Вижу...
            Сущестительные и местоимения: кого? что?
            Прилагательные, причастия, порядковые числительные: какого? (одуш) какой? (неодуш) какую? какое? каких? (одуш) какие? (неодуш)
            Количественные числительные: скольких? (одуш) сколько? (неодуш)
            </remarks>
        </member>
        <member name="F:Intermech.Common.RussianCase.Instrumental">
            <summary>
            Творительный (Любуюсь... кем? чем?)
            </summary>
            <remarks>
            Вспомогательное слово: Любуюсь...
            Сущестительные и местоимения: кем? чем?
            Прилагательные, причастия, порядковые числительные: каким? какой? каким? какими?
            Количественные числительные: сколькими?
            </remarks>
        </member>
        <member name="F:Intermech.Common.RussianCase.Prepositional">
            <summary>
            Предложный (Думаю (о)... о ком? о чём?)
            </summary>
            <remarks>
            Вспомогательное слово: Думаю (о)...
            Сущестительные и местоимения: о ком? о чём?
            Прилагательные, причастия, порядковые числительные: о каком? о какой? о каком? о каких?
            Количественные числительные: о скольких?
            </remarks>
        </member>
        <member name="T:Intermech.Int">
            <summary>Класс для групповой работы с несколькими значениями int</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Int.Coalesce(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Value.GetOrInit``1(System.Nullable{``0}@,System.Func{``0})">
            <summary>Получить значение из NullAble контейнера, или инициализировать его значение используя внешнюю функцию</summary>
        </member>
        <member name="T:Intermech.Values">
            <summary>Класс для групповой работы с несколькими значениями</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0[])">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.Coalesce``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Возвращает либо первое значение, отличное от значения по-умолчанию (null для nullable типов, 0 для int и так далее)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Возвращает первую непустую строку (пробелы не игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="M:Intermech.Values.CoalesceNotWhitespace(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Возвращает первую непустую строку (пробелы игнорируются)</summary>
        </member>
        <member name="T:Intermech.Data.FieldIsEmptyException">
            <summary>Выбрасывается тогда, когда значение поля равно null или DBNull.Value в тех случаях, когда это недопустимо</summary>
        </member>
        <member name="F:Intermech.Data.FieldIsEmptyException.FieldName">
            <summary>Имя поля</summary>
        </member>
        <member name="F:Intermech.Data.FieldIsEmptyException.FieldIndex">
            <summary>Номер поля</summary>
        </member>
        <member name="M:Intermech.Data.FieldIsEmptyException.#ctor(System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Intermech.Data.FieldIsEmptyException.#ctor(System.Int32)">
            <summary>Constructor</summary>
        </member>
        <member name="M:Intermech.Data.FieldIsEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the UnknownCatalogTypeException class with serialized data</summary>
            <exception cref="T:System.ArgumentNullException">The info parameter is null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or System.Exception.HResult is zero (0)</exception>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Intermech.Data.FieldIsEmptyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Intermech.Data.FieldIsEmptyException.ToString">
            <summary>Creates and returns a string representation of the current exception</summary>
            <returns>A string representation of the current exception</returns>
        </member>
        <member name="T:IPS.Resources">
            <summary>Класс для работы с ресурсами</summary>
        </member>
    </members>
</doc>
