<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intermech.Bcl</name>
    </assembly>
    <members>
        <member name="T:Intermech.ApplicationModel.AbstractConsoleCommand">
            <summary>
            Реализует базовый класс для команд консоли сервера приложений.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.AbstractConsoleCommand.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.AbstractConsoleCommand.Invoke(Intermech.ApplicationModel.IConsoleService,System.Collections.Generic.List{System.String})">
            <summary>
            Выполняет команду.
            </summary>
            <param name="consoleService">Сервис консоли сервера приложений</param>
            <param name="commandArgs">Аргументы команды</param>
            <exception cref="T:System.ArgumentNullException">consoleService or commandArgs</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.AbstractConsoleCommand.DoInvoke(Intermech.ApplicationModel.IConsoleService,System.Collections.Generic.List{System.String})">
            <summary>
            Выполняет команду.
            </summary>
            <param name="consoleService">Сервис консоли сервера приложений</param>
            <param name="commandArgs">Аргументы команды</param>
        </member>
        <member name="T:Intermech.ApplicationModel.ApplicationBase">
            <summary>
            Базовый класс для приложений.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Создает объект приложения.
            </summary>
            <param name="arguments">Аргументы приложения</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="arguments"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.ApplicationModel.ApplicationBase.Arguments">
            <summary>
            Возвращает список аргументов приложения.
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.ApplicationBase.ExitCode">
            <summary>
            Возвращает или задает код завершения приложения.
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.ApplicationBase.IsRunning">
            <summary>
            Возвращает признак, что приложение выполняется в данный момент.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.Run">
            <summary>
            Выполняет приложение.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.DoPrepareToRun">
            <summary>
            Реализует инициализацию приложения перед выполнением.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.DoRun">
            <summary>
            Реализует выполнение приложения.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.DoCleanup(System.Boolean)">
            <summary>
            Реализует освобождение ресурсов приложения перед завершением работы. Метод вызывается как при нормальном завершении приложения,
            так и в случае необработанного исключения в процессе выполнения приложения. Реализация метода должна учитывать, что он 
            может быть вызван для частично инициализированного приложения.
            </summary>
            <param name="errorMode">Признак завершения работы приложения из-за необработанного исключения</param>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.DoReportUnhandledException(System.Exception)">
            <summary>
            Позволяет сообщить пользователю о возникновении необработанного исключения при выполнении приложения.
            Метод вызывается сразу после обнаружения аварийной ситуации.
            </summary>
            <param name="exception">Объект исключения</param>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.DoReportUnexpectedExit">
            <summary>
            Позволяет сообщить пользователю о неожиданном завершении приложения из-за необработанного исключения.
            Метод вызывается после освобождения всех ресурсов приложения.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.InvokeSilently(System.Action,System.String)">
            <summary>
            Выполняет указанный метод или блок кода с контролем необработанных исключений. Если при выполнении произойдет необработанное исключение,
            оно будет подавлено, и, если требуется, информация об этом событии будет записана в журнал трассировки.
            </summary>
            <param name="action">Выполняемый метод или блок кода</param>
            <param name="exceptionLocation">Описание места падения исключения, используется только в случае падения исключения. Значение параметра может быть равно null, в этом случае место падения будет вычислено автоматически</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="action"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.ApplicationBase.TryGetExceptionDisplayService">
            <summary>
            Возвращает сервис для отображения исключительных ситуаций, если он доступен.
            </summary>
            <returns>Объект сервиса или null</returns>
        </member>
        <member name="T:Intermech.ApplicationModel.ConsoleApplicationBase">
            <summary>
            Базовый класс для консольных приложений.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleApplicationBase.#ctor(System.String[])">
            <summary>
            Создает объект приложения.
            </summary>
            <param name="arguments">Аргументы приложения</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="arguments"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleApplicationBase.DoPrepareToRun">
            <inheritdoc/>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleApplicationBase.DoCleanup(System.Boolean)">
            <summary>
            Реализует освобождение ресурсов приложения перед завершением работы. Метод вызывается как при нормальном завершении приложения,
            так и в случае необработанного исключения в процессе выполнения приложения. Реализация метода должна учитывать, что он 
            может быть вызван для частично инициализированного приложения.
            </summary>
            <param name="errorMode">Признак завершения работы приложения из-за необработанного исключения</param>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleApplicationBase.DoEmergencyExit">
            <summary>
            Обработчик для события аварийного завершения работы консольного приложения. Вызывается по нажатию кнопки "Закрыть" у консоли приложения.
            Метод обработчика вызывается из фонового потока, у него есть всего 2 секунды, чтобы обработать событие.
            </summary>
        </member>
        <member name="T:Intermech.ApplicationModel.ConsoleCommandDispatcher">
            <summary>
            Реализует ввод с клавиатуры и выполнение команд, не блокируя надолго основной поток приложения.
            Такой режим работы необходим для корректной выгрузки дополнительных AppDomain, создаваемых движком скриптов.
            </summary>
        </member>
        <member name="T:Intermech.ApplicationModel.ConsoleCommandInfo">
            <summary>
            Описывает команду для консоли сервера приложений.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCommandInfo.#ctor(System.String,System.String,System.String,Intermech.ApplicationModel.IConsoleCommand)">
            <summary>
            Создает объект.
            </summary>
            <param name="name">Имя команды</param>
            <param name="shortName">Краткое имя команды или пустая строка</param>
            <param name="help">Краткая справка по команде или пустая строка</param>
            <param name="handler">Обработчик команды</param>
            <exception cref="T:System.ArgumentNullException">shortName or help or handler</exception>
            <exception cref="T:System.ArgumentException">name - имя команды пусто</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCommandInfo.#ctor(System.String,System.String,System.String,Intermech.ApplicationModel.ConsoleCommandMethod)">
            <summary>
            Создает объект.
            </summary>
            <param name="name">Имя команды</param>
            <param name="shortName">Краткое имя команды или пустая строка</param>
            <param name="help">Краткая справка по команде или пустая строка</param>
            <param name="methodHandler">Метод-обработчик команды</param>
            <exception cref="T:System.ArgumentNullException">shortName or help or methodHandler</exception>
            <exception cref="T:System.ArgumentException">name - имя команды пусто</exception>
        </member>
        <member name="P:Intermech.ApplicationModel.ConsoleCommandInfo.Name">
            <summary>
            Возвращает имя команды, с помощью которой она запускается из консоли.
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.ConsoleCommandInfo.ShortName">
            <summary>
            Возвращает краткое имя команды, с помощью которой она запускается из консоли. Например, "?" - краткое имя для команды "help".
            Свойство может быть не задано и содержать пустую строку.
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.ConsoleCommandInfo.Help">
            <summary>
            Возвращает краткую справку по использованию команды. Свойство может быть не задано и содержать пустую строку.
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.ConsoleCommandInfo.Handler">
            <summary>
            Возвращает обработчик команды.
            </summary>
        </member>
        <member name="T:Intermech.ApplicationModel.ConsoleCommandRegistry">
            <summary>
            Сервис реестра команд, которые можно выполнить в консоли сервера приложений.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCommandRegistry.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCommandRegistry.Add(Intermech.ApplicationModel.ConsoleCommandInfo)">
            <summary>
            Добавляет команду в реестр.
            </summary>
            <param name="command">Команда</param>
            <exception cref="T:System.ArgumentNullException">command</exception>
            <exception cref="T:System.InvalidOperationException">Команда с таким именем уже зарегистрирована</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCommandRegistry.Remove(Intermech.ApplicationModel.ConsoleCommandInfo)">
            <summary>
            Удаляет команду из реестра.
            </summary>
            <param name="command">Команда</param>
            <exception cref="T:System.ArgumentNullException">command</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCommandRegistry.GetAll">
            <summary>
            Возвращает коллекцию зарегистрированных команд.
            </summary>
            <returns>Коллекция зарегистрированных команд</returns>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCommandRegistry.FindByName(System.String)">
            <summary>
            Находит команду по имени.
            </summary>
            <param name="commandName">Имя команды</param>
            <returns>Найденная команда или null</returns>
            <exception cref="T:System.ArgumentNullException">commandName</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleCompat.CreateSystemEventsHandler(System.Object)">
            <summary>
            Создает обработчик событий консольного приложения, специфичных для конкретной операционной системы.
            </summary>
            <param name="owner">Владелец обработчика</param>
            <returns>Объект обработчика</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="owner"/> не должен быть null</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.ConsoleService">
            <summary>
            Обработчик серверных консольных команд
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleService.ReadLine">
            <summary>
            Читает пользовательский ввод из консоли.
            </summary>
            <returns>Введенный пользователем текст</returns>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleService.TryReadLine">
            <summary>
            Читает пользовательский ввод из консоли, если он имеется. Иначе возвращает null.
            </summary>
            <returns>Введенный пользователем текст или null</returns>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleService.Write(System.String)">
            <summary>
            Выдать в консоль указанный текст.
            </summary>
            <param name="text">Текст</param>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleService.Write(System.String,System.ConsoleColor)">
            <summary>
            Выдать в консоль указанный текст.
            Старый цвет текста сохраняется перед выводом, затем восстанавливается
            </summary>
            <param name="text">Текст</param>
            <param name="color">Цвет</param>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleService.WriteLine(System.String)">
            <summary>
            Выдать в консоль указанный текст.
            </summary>
            <param name="text">Текст</param>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleService.WriteLine(System.String,System.ConsoleColor)">
            <summary>
            Выдать в консоль указанный текст.
            Старый цвет текста сохраняется перед выводом, затем восстанавливается
            </summary>
            <param name="text">Текст</param>
            <param name="color">Цвет</param>
        </member>
        <member name="T:Intermech.ApplicationModel.ConsoleSystemEventsEmptyHandler">
            <summary>
            Пустой обработчик событий консольного приложения, используемый при отсутствии реализации под конкретную операционную систему.
            </summary>
            <remarks>
            Реализация не является thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleSystemEventsEmptyHandler.Activate">
            <inheritdoc/>
        </member>
        <member name="M:Intermech.ApplicationModel.ConsoleSystemEventsEmptyHandler.Deactivate(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="E:Intermech.ApplicationModel.ConsoleSystemEventsEmptyHandler.OnCloseWindow">
            <inheritdoc/>
        </member>
        <member name="T:Intermech.ApplicationModel.IConsoleCommand">
            <summary>
            Позволяет реализовать обработчик команды для консоли сервера приложений в виде объекта.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleCommand.Invoke(Intermech.ApplicationModel.IConsoleService,System.Collections.Generic.List{System.String})">
            <summary>
            Выполняет команду.
            </summary>
            <param name="consoleService">Сервис консоли сервера приложений</param>
            <param name="commandArgs">Аргументы команды</param>
            <exception cref="T:System.ArgumentNullException">consoleService or commandArgs</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.ConsoleCommandMethod">
            <summary>
            Позволяет реализовать обработчик команды для консоли сервера приложений в виде метода.
            </summary>
            <param name="consoleService">Сервис консоли сервера приложений</param>
            <param name="commandArgs">Аргументы команды</param>
            <exception cref="T:System.ArgumentNullException">consoleService or commandArgs</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.IConsoleCommandRegistry">
            <summary>
            Сервис реестра команд, которые можно выполнить в консоли сервера приложений.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleCommandRegistry.Add(Intermech.ApplicationModel.ConsoleCommandInfo)">
            <summary>
            Добавляет команду в реестр.
            </summary>
            <param name="command">Команда</param>
            <exception cref="T:System.ArgumentNullException">command</exception>
            <exception cref="T:System.InvalidOperationException">Команда с таким именем уже зарегистрирована</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleCommandRegistry.Remove(Intermech.ApplicationModel.ConsoleCommandInfo)">
            <summary>
            Удаляет команду из реестра.
            </summary>
            <param name="command">Команда</param>
            <exception cref="T:System.ArgumentNullException">command</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleCommandRegistry.GetAll">
            <summary>
            Возвращает коллекцию зарегистрированных команд.
            </summary>
            <returns>Коллекция зарегистрированных команд</returns>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleCommandRegistry.FindByName(System.String)">
            <summary>
            Находит команду по имени.
            </summary>
            <param name="commandName">Имя команды</param>
            <returns>Найденная команда или null</returns>
            <exception cref="T:System.ArgumentNullException">commandName</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.IConsolePAL">
            <summary>
            Интерфейс PAL-сервиса для платформенно-зависимой реализации <see cref="T:Intermech.ApplicationModel.ConsoleCompat"/>.
            Реализация должна быть thread safe.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsolePAL.CreateSystemEvenstHandler(System.Object)">
            <summary>
            Создает обработчик событий консольного приложения, специфичных для конкретной операционной системы.
            </summary>
            <param name="owner">Владелец обработчика</param>
            <returns>Объект обработчика</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="owner"/> не должен быть null</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.IConsoleService">
            <summary>
            Сервис для работы с консолью сервера приложений. Позволяет выводить текст, а также читать пользовательский ввод.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleService.ReadLine">
            <summary>
            Читает пользовательский ввод из консоли.
            </summary>
            <returns>Введенный пользователем текст</returns>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleService.TryReadLine">
            <summary>
            Читает пользовательский ввод из консоли, если он имеется. Иначе возвращает null.
            </summary>
            <returns>Введенный пользователем текст или null</returns>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleService.Write(System.String)">
            <summary>
            Выдать в консоль указанный текст.
            </summary>
            <param name="text">Текст</param>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleService.Write(System.String,System.ConsoleColor)">
            <summary>
            Выдать в консоль указанный текст.
            Старый цвет текста сохраняется перед выводом, затем восстанавливается
            </summary>
            <param name="text">Текст</param>
            <param name="color">Цвет</param>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleService.WriteLine(System.String)">
            <summary>
            Выдать в консоль указанный текст.
            </summary>
            <param name="text">Текст</param>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleService.WriteLine(System.String,System.ConsoleColor)">
            <summary>
            Выдать в консоль указанный текст.
            Старый цвет текста сохраняется перед выводом, затем восстанавливается
            </summary>
            <param name="text">Текст</param>
            <param name="color">Цвет</param>
        </member>
        <member name="T:Intermech.ApplicationModel.IConsoleSystemEventsHandler">
            <summary>
            Интерфейс подключаемого обработчика событий консольного приложения, специфичных для конкретной операционной системы.
            Реализация не обязана быть thread safe.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleSystemEventsHandler.Activate">
            <summary>
            Активирует обработчик.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IConsoleSystemEventsHandler.Deactivate(System.Boolean)">
            <summary>
            Деактивирует обработчик.
            </summary>
            <param name="throwOnError">Признак, нужно ли бросать исключение при ошибках отключения обработчика</param>
        </member>
        <member name="E:Intermech.ApplicationModel.IConsoleSystemEventsHandler.OnCloseWindow">
            <summary>
            Событие закрытия UI-окна консоли.
            </summary>
        </member>
        <member name="T:Intermech.ApplicationModel.IExceptionDisplayService">
            <summary>
            Интерфейс сервиса для отображения исключительных ситуаций.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IExceptionDisplayService.ShowException(System.Exception)">
            <summary>
            Показывает сообщение пользователю с информацией об исключении. 
            </summary>
            <param name="exception">Объект исключения</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="exception"/> не должен быть равен null</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.IInitializerModuleFactory">
            <summary>
            Интерфейс фабрики модулей инициализации.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.IInitializerModuleFactory.Create``1">
            <summary>
            Создает модуль инициализации указанного типа.
            </summary>
            <typeparam name="TModule">Тип создаваемого модуля иницилизации</typeparam>
            <returns>Созданный модуль инициализации</returns>
        </member>
        <member name="M:Intermech.ApplicationModel.IInitializerModuleFactory.Create(System.Type)">
            <summary>
            Создает модуль инициализации указанного типа.
            </summary>
            <param name="moduleType">Тип модуля инициализации</param>
            <returns>Созданный модуль инициализации</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="moduleType"/> не должен быть равен null</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.InitializerExceptionPolicy">
            <summary>
            Политики обработки исключений инициализации модулей
            </summary>
        </member>
        <member name="F:Intermech.ApplicationModel.InitializerExceptionPolicy.Normal">
            <summary>
            При возникновении исключения инициализации модуля оно будет брошено дальше.
            </summary>
        </member>
        <member name="F:Intermech.ApplicationModel.InitializerExceptionPolicy.Suppress">
            <summary>
            При возникновении исключения инициализации модуля оно будет подавлено.
            </summary>
        </member>
        <member name="T:Intermech.ApplicationModel.InitializerModule">
            <summary>
            Позволяет реализовать инициализацию и завершение работы сервиса или подсистемы приложения в виде объекта.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModule.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.InitializerModule.ExceptionPolicy">
            <summary>
            Возвращает или задает политику обработки исключений, возникающих при инициализации модуля.
            </summary>
            <exception cref="T:System.InvalidOperationException">Нельзя изменить значение свойства, так как модуль уже был инициализирован</exception>
        </member>
        <member name="P:Intermech.ApplicationModel.InitializerModule.ExceptionHandler">
            <summary>
            Возвращает или задает обработчик для исключений инициализации модуля. Обработчик вызывается всегда, независимо от заданной политики обработки исключений.
            Он может использоваться для вывода исключения в журнал приложения, либо для показа исключения пользователю.
            </summary>
            <exception cref="T:System.InvalidOperationException">Нельзя изменить значение свойства, так как модуль уже был инициализирован</exception>
        </member>
        <member name="P:Intermech.ApplicationModel.InitializerModule.AssemblyInitializer">
            <summary>
            Возвращает или задает имя открытого статического метода, который в процессе инициализации сборки инициализирует этот модуль.
            Имя этого метода используется в сообщении об ошибке в методе RequireInitialized(), если оказалось, что модуль не был не инициализирован.
            </summary>
            <exception cref="T:System.InvalidOperationException">Нельзя изменить значение свойства, так как модуль уже был инициализирован</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModule.Initialize">
            <summary>
            Выполняет инициализацию объектов и сервисов, предоставляемых модулем. Если в процессе выполнения этого метода будет сброшено исключение, 
            то будет вызвано аварийное завершение работы модуля с помощью метода DoShutdown().
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.InitializerModule.IsInitialized">
            <summary>
            Возвращает признак, что модуля был успешно инициализирован.
            </summary>
        </member>
        <member name="P:Intermech.ApplicationModel.InitializerModule.Group">
            <summary>
            Возвращает группу модулей, если этот модуль является частью группы.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModule.DoInitialize">
            <summary>
            Выполняет инициализацию объектов и сервисов, предоставляемых модулем.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModule.Shutdown">
            <summary>
            Завершает работу объектов и сервисов, предоставленных модулем.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModule.DoShutdown">
            <summary>
            Завершает работу объектов и сервисов, предоставленных модулем.
            Если свойство модуля IsInitialized возвращает false, то DoShutdown вызван как реакция на необработанное исключение при инициализации модуля.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModule.RequireNotInitialized">
            <summary>
            Позволяет убедиться, что инициализация модуля еще не была выполнена.
            </summary>
            <exception cref="T:System.InvalidOperationException">Инициализация модуля уже была выполнена</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModule.RequireInitialized">
            <summary>
            Позволяет убедиться, что модуля был успешно инициализирован.
            </summary>
            <exception cref="T:System.InvalidOperationException">Инициализация модуля не была выполнена</exception>
        </member>
        <member name="T:Intermech.ApplicationModel.InitializerModuleGroup">
            <summary>
            Позволяет реализовать группу модулей, инициализация которых выполняется в определенном порядке.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModuleGroup.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModuleGroup.Add(Intermech.ApplicationModel.InitializerModule)">
            <summary>
            Добавляет модуль в группу в конец последовательности инициализации модулей.
            </summary>
            <param name="module">Объект модуля</param>
            <exception cref="T:System.ArgumentNullException">module</exception>
            <exception cref="T:System.InvalidOperationException">Группа уже была инициализирована; добавляемый модуль уже был инициализирован; добавляемый модуль уже входит в другую группу</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModuleGroup.AddRange(System.Collections.Generic.IEnumerable{Intermech.ApplicationModel.InitializerModule})">
            <summary>
            Добавляет указанную коллекцию модулей инициализации в группу в конец последовательности инициализации модулей.
            </summary>
            <param name="modules">Коллекция модулей инициализации</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="modules"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModuleGroup.DoInitialize">
            <summary>
            Выполняет инициализацию модулей в порядке их добавления в группу.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.InitializerModuleGroup.DoShutdown">
            <summary>
            Завершает работу модулей в порядке, обратном порядку их добавления в группу.
            Если свойство модуля IsInitialized возвращает false, то DoShutdown вызван как реакция на необработанное исключение при инициализации модуля.
            </summary>
        </member>
        <member name="T:Intermech.ApplicationModel.IOptionalService`1">
            <summary>
            Интерфейс провайдера сервиса, получение которого не является гарантированным.
            </summary>
            <typeparam name="T">Тип сервиса, предоставляемого провайдером</typeparam>
        </member>
        <member name="M:Intermech.ApplicationModel.IOptionalService`1.TryGet">
            <summary>
            Возвращает объект сервиса или нулевое значение для данного типа объекта, если объект не может быть получен.
            </summary>
            <returns>Объект или нулевое значение для данного типа объектов</returns>
        </member>
        <member name="T:Intermech.ApplicationModel.LazyInitializerModuleGroup">
            <summary>
            Базовый класс для групп модулей инициализации, использующих ленивое создание модулей.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.LazyInitializerModuleGroup.#ctor(Intermech.ApplicationModel.IInitializerModuleFactory)">
            <summary>
            Создает объект.
            </summary>
            <param name="moduleFactory">Фабрика модулей инициализации</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="moduleFactory"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.ApplicationModel.LazyInitializerModuleGroup.ModuleFactory">
            <summary>
            Возвращает фабрику модулей инициализации.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.LazyInitializerModuleGroup.Add``1">
            <summary>
            Добавляет модуль в группу в конец последовательности инициализации модулей.
            Метод может быть вызван только у неинициализированной группы.
            Создание экземпляров модулей будет выполнено только при инициализации группы.
            </summary>
            <typeparam name="TModule">Тип модуля</typeparam>
            <exception cref="T:System.InvalidOperationException">Группа уже была инициализирована.</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.LazyInitializerModuleGroup.DoInitialize">
            <summary>
            Выполняет инициализацию объектов и сервисов, предоставляемых модулем.
            </summary>
        </member>
        <member name="M:Intermech.ApplicationModel.LazyInitializerModuleGroup.DoShutdown">
            <summary>
            Завершает работу объектов и сервисов, предоставленных модулем.
            Если свойство модуля IsInitialized возвращает false, то DoShutdown вызван как реакция на необработанное исключение при инициализации модуля.
            </summary>
        </member>
        <member name="T:Intermech.ApplicationModel.MissingService`1">
            <summary>
            Провайдер опционального сервиса, используемый в случае отсутствия сервиса.
            </summary>
            <typeparam name="T">Тип сервиса, предоставляемого провайдером</typeparam>
        </member>
        <member name="M:Intermech.ApplicationModel.MissingService`1.TryGet">
            <summary>
            Возвращает объект сервиса или нулевое значение для данного типа объекта, если объект не может быть получен.
            </summary>
            <returns>Объект или нулевое значение для данного типа объектов</returns>
        </member>
        <member name="T:Intermech.ApplicationModel.OptionalService`1">
            <summary>
            Провайдер сервиса, получение которого не является гарантированным.
            </summary>
            <typeparam name="T">Тип сервиса, предоставляемого провайдером</typeparam>
        </member>
        <member name="M:Intermech.ApplicationModel.OptionalService`1.#ctor(System.IServiceProvider)">
            <summary>
            Создает объект.
            </summary>
            <param name="container">Контейнер сервисов</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="container"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.ApplicationModel.OptionalService`1.TryGet">
            <summary>
            Возвращает объект сервиса или нулевое значение для данного типа объекта, если объект не может быть получен.
            </summary>
            <returns>Объект или нулевое значение для данного типа объектов</returns>
        </member>
        <member name="T:Intermech.Cache.Expirations.AbsoluteTime">
            <summary>
            Реализует алгоритм устаревания элементов кэша, основанные на задании
            точного момента времени, когда элемент должен считаться устаревшим.
            Проверка факта устаревания будет выполняться при каждом обращении к
            контролируемому элементу кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.AbsoluteTime.absoluteTime">
            <summary>
            Дата и время, указывающие момент устаревания элемента кэша.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            Создает объект, который будет контролировать устаревание элемента
            кэша, основываясь на знание момента времени, когда элемент можно
            считать устаревшим.
            </summary>
            <param name="dateTime">Дата и время устаревания элемента кэша</param>
        </member>
        <member name="P:Intermech.Cache.Expirations.AbsoluteTime.HasExpired">
            <summary>
            Возвращает true, если контролируемый элемент кэша устарел.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.AbsoluteTime.Notify">
            <summary>
            Вызывается каждый раз, когда пользователь обращается к контролируемому
            элементу кэша.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Expirations.Polled.AbsoluteTime">
            <summary>
            Реализует алгоритм устаревания элементов кэша, основанные на задании
            точного момента времени, когда элемент должен считаться устаревшим.
            Проверка факта устаревания будет выполняться с некоторой периодичностью
            монитором кэша, выполняющимся в фоновом потоке.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.Polled.AbsoluteTime.absoluteTime">
            <summary>
            Дата и время, указывающие момент устаревания элемента кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.Polled.AbsoluteTime.expired">
            <summary>
            Признак того, что элемент устарел.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.Polled.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            Создает объект, который будет контролировать устаревание элемента
            кэша, основываясь на знание момента времени, когда элемент можно
            считать устаревшим.
            </summary>
            <param name="dateTime">Дата и время устаревания элемента кэша</param>
        </member>
        <member name="P:Intermech.Cache.Expirations.Polled.AbsoluteTime.HasExpired">
            <summary>
            Возвращает true, если контролируемый элемент кэша устарел.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.Polled.AbsoluteTime.Notify">
            <summary>
            Вызывается каждый раз, когда пользователь обращается к контролируемому
            элементу кэша.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.Polled.AbsoluteTime.CheckExpired">
            <summary>
            Выполняет проверку условия, от которого зависит устаревание элемента.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Expirations.Polled.SlidingTime">
            <summary>
            Реализует алгоритм устаревания элементов кэша, при котором элемент 
            устаревает, если время между двумя последовательными обращениями к нему
            превышает заданный интервал.
            Проверка факта устаревания будет выполняться с некоторой периодичностью
            монитором кэша, выполняющимся в фоновом потоке.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.Polled.SlidingTime.duration">
            <summary>
            Продолжительность интервала между двумя последовательными обращениями
            к контролируемому элементу кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.Polled.SlidingTime.lastAccessTime">
            <summary>
            Дата и время последнего обращения к элементу кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.Polled.SlidingTime.expired">
            <summary>
            Признак того, что контролируемый элемент устарел.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.Polled.SlidingTime.#ctor(System.TimeSpan)">
            <summary>
            Создает объект, который будет контролировать устаревание элемента
            кэша.
            </summary>
            <param name="duration">
            Продолжительность интервала между двумя последовательными обращениями
            к контролируемому элементу кэша
            </param>
        </member>
        <member name="P:Intermech.Cache.Expirations.Polled.SlidingTime.HasExpired">
            <summary>
            Возвращает true, если контролируемый элемент кэша устарел.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.Polled.SlidingTime.Notify">
            <summary>
            Вызывается каждый раз, когда пользователь обращается к контролируемому
            элементу кэша.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.Polled.SlidingTime.CheckExpired">
            <summary>
            Выполняет проверку условия, от которого зависит устаревание элемента.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Expirations.SlidingTime">
            <summary>
            Реализует алгоритм устаревания элементов кэша, при котором элемент 
            устаревает, если время между двумя последовательными обращениями к нему
            превышает заданный интервал.
            Проверка факта устаревания будет выполняться при каждом обращении к
            контролируемому элементу кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.SlidingTime.duration">
            <summary>
            Продолжительность интервала между двумя последовательными обращениями
            к контролируемому элементу кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Expirations.SlidingTime.lastAccessTimeUtc">
            <summary>
            Дата и время последнего обращения к элементу кэша.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.SlidingTime.#ctor(System.TimeSpan)">
            <summary>
            Создает объект, который будет контролировать устаревание элемента
            кэша.
            </summary>
            <param name="duration">
            Продолжительность интервала между двумя последовательными обращениями
            к контролируемому элементу кэша
            </param>
        </member>
        <member name="P:Intermech.Cache.Expirations.SlidingTime.HasExpired">
            <summary>
            Возвращает true, если контролируемый элемент кэша устарел.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Expirations.SlidingTime.Notify">
            <summary>
            Вызывается каждый раз, когда пользователь обращается к контролируемому
            элементу кэша.
            </summary>
        </member>
        <member name="T:Intermech.Cache.CacheItem">
            <summary>
            Реализует контейнер метаданных, относящихся к элементу, помещенному в кэш.
            </summary>
        </member>
        <member name="F:Intermech.Cache.CacheItem.key">
            <summary>
            Уникальный ключ элемента в кэше.
            </summary>
        </member>
        <member name="F:Intermech.Cache.CacheItem.beforeRemove">
            <summary>
            Делегат метода, вызываемого перед удалением элемента из кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.CacheItem.afterRemove">
            <summary>
            Делегат метода, вызываемого после удаления элемента из кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.CacheItem.expirations">
            <summary>
            Массив объектов, контролирующих устаревание элемента.
            </summary>
        </member>
        <member name="M:Intermech.Cache.CacheItem.#ctor(System.Object,Intermech.Cache.BeforeRemoveEventHandler,Intermech.Cache.AfterRemoveEventHandler,Intermech.Cache.IExpiration[])">
            <summary>
            Создает новый контейнер метаданных.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="beforeRemove">Делегат метода, вызываемого перед удалением элемента из кэша</param>
            <param name="afterRemove">Делегат метода, вызываемого после удалениея элемента из кэша</param>
            <param name="expirations">Массив объектов, контролирующих устаревание элемента</param>
        </member>
        <member name="M:Intermech.Cache.CacheItem.#ctor(Intermech.Cache.CacheItem)">
            <summary>
            Создает клон контейнера метаданных.
            </summary>
            <param name="clonedItem">Клонируемый контейнер</param>
        </member>
        <member name="P:Intermech.Cache.CacheItem.Key">
            <summary>
            Возвращает уникальный ключ элемента в кэше.
            </summary>
        </member>
        <member name="P:Intermech.Cache.CacheItem.BeforeRemove">
            <summary>
            Возвращает делегат, вызываемый при удалении элемента из кэша.
            </summary>
        </member>
        <member name="P:Intermech.Cache.CacheItem.AfterRemove">
            <summary>
            Возвращает делегат, вызываемый при удалении элемента из кэша.
            </summary>
        </member>
        <member name="P:Intermech.Cache.CacheItem.Expirations">
            <summary>
            Возвращает массив объектов, контролирующих устаревание элемента.
            </summary>
        </member>
        <member name="M:Intermech.Cache.CacheItem.Clone">
            <summary>
            Создает и возвращает клон этого контейнера метаданных.
            </summary>
            <returns>Клон контейнера</returns>
        </member>
        <member name="T:Intermech.Cache.BeforeRemoveEventHandler">
            <summary>
            Представляет метод, который вызывается перед удалением элемента из кэша.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">"Элемент кэша</param>
            <param name="cause">Причина удаления элемента из кэша</param>
        </member>
        <member name="T:Intermech.Cache.AfterRemoveEventHandler">
            <summary>
            Представляет метод, который вызывается после удаления элемента из кэша.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="cause">Причина удаления элемента из кэша</param>
        </member>
        <member name="T:Intermech.Cache.ICacheManager">
            <summary>
            Предоставляет доступ к содержимому кэша, позволяя добавлять в него 
            элементы, получать их и удалять. 
            </summary>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.Add(System.Object,System.Object)">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.Add(System.Object,System.Object,Intermech.Cache.BeforeRemoveEventHandler,Intermech.Cache.AfterRemoveEventHandler)">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="beforeRemove">Делегат метода, который будет вызван перед удалением элемента из кэша</param>
            <param name="afterRemove">Делегат метода, который будет вызван после удаления элемента из кэша</param>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.Add(System.Object,System.Object,Intermech.Cache.IExpiration[])">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="expirations">Массив объектов, которые будут контролировать устаревание элемента</param>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.Add(System.Object,System.Object,Intermech.Cache.BeforeRemoveEventHandler,Intermech.Cache.AfterRemoveEventHandler,Intermech.Cache.IExpiration[])">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="beforeRemove">Делегат метода, который будет вызван перед удалением элемента из кэша</param>
            <param name="afterRemove">Делегат метода, который будет вызван после удаления элемента из кэша</param>
            <param name="expirations">Массив объектов, которые будут контролировать устаревание элемента</param>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.Remove(System.Object)">
            <summary>
            Удалает указанный элемент из кэша.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.Flush">
            <summary>
            Очищает кэш, удаляя все помещенные в него элементы.
            </summary>
        </member>
        <member name="P:Intermech.Cache.ICacheManager.Item(System.Object)">
            <summary>
            Возвращает элемент из кэша. Если элемент отсутствует в кэше, то результатом будет null.
            </summary>
            <param name="key">Уникальный ключ элемента</param>
            <returns>Элемент</returns>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.GetData(System.Object)">
            <summary>
            Возвращает элемент из кэша. Если элемент отсутствует в кэше, то результатом будет null.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <returns>Элемент</returns>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.GetKeys">
            <summary>
            Возвращает массив ключей всех элементов, помещенных в кэш.
            </summary>
            <returns>Массив ключей элементов в кэше</returns>
        </member>
        <member name="M:Intermech.Cache.ICacheManager.GetItem(System.Object)">
            <summary>
            Возвращает контейнер, содержащий метаданные для указанного элемента
            кэша.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <returns>Контейнер с метаданными элемента</returns>
        </member>
        <member name="P:Intermech.Cache.ICacheManager.PerformanceCounters">
            <summary>
            Возвращает коллекцию счетчиков производительности кэша, позволяющих оценивать
            эффективность его работы.
            </summary>
        </member>
        <member name="T:Intermech.Cache.IExpiration">
            <summary>
            Позволяет реализовать различные алгоритмы устаревания элементов, 
            помещенных в кэш.
            </summary>
        </member>
        <member name="P:Intermech.Cache.IExpiration.HasExpired">
            <summary>
            Возвращает true, если элемент устарел и его нельзя использовать.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IExpiration.Notify">
            <summary>
            Вызывается всякий раз, когда пользователь обращается к контролируемому
            элементу кэша.
            </summary>
        </member>
        <member name="T:Intermech.Cache.ILimitedStorage">
            <summary>
            Позволяет реализовать хранилище, имеющее ограниченный объем.
            </summary>
        </member>
        <member name="P:Intermech.Cache.ILimitedStorage.LimitsEnabled">
            <summary>
            Возвращает true, если у хранилища включен режим ограничения объема.
            </summary>
        </member>
        <member name="P:Intermech.Cache.ILimitedStorage.TotalSpace">
            <summary>
            Возвращает объем хранилища.
            </summary>
        </member>
        <member name="P:Intermech.Cache.ILimitedStorage.FreeSpace">
            <summary>
            Возвращает объем свободного пространства в хранилище.
            </summary>
        </member>
        <member name="M:Intermech.Cache.ILimitedStorage.EstimateSpace(System.Object)">
            <summary>
            Возвращает объем, который займет элемент после помещения в кэш.
            </summary>
            <param name="data">Элемент</param>
            <returns>Объем элемента</returns>
        </member>
        <member name="T:Intermech.Cache.IMonitor">
            <summary>
            Позволяет реализовать различные схемы проверки устаревания элементов в
            кэше, основанные на периодическом опросе источника данных или получении
            событий обновления от источника данных.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IMonitor.Add(System.Object,Intermech.Cache.IExpiration[])">
            <summary>
            Добавляет в список контролиремых монитором элементов новый элемент.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="expirations">Массив объектов, с помощью которых кэш определяет устаревание элементов</param>
        </member>
        <member name="M:Intermech.Cache.IMonitor.Remove(System.Object)">
            <summary>
            Удалает из списка контролируемых монитором элементов указанный элемент.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.IMonitor.Flush">
            <summary>
            Очищает список контролируемых монитором элементов.
            </summary>
        </member>
        <member name="T:Intermech.Cache.IPackedStorage">
            <summary>
            Позволяет реализовать хранилище, которое преобразует
            помещаемые в него элементы.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IPackedStorage.PackObject(System.Object,System.Object)">
            <summary>
            Упаковывает исходный элемент в объект, пригодный для
            помещения в хранилище.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <returns>Упакованное представление элемента</returns>
        </member>
        <member name="M:Intermech.Cache.IPackedStorage.UnpackObject(System.Object,System.Object)">
            <summary>
            Восстанавливает элемент из упакованного после извлечения из хранилища.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="packedData">Упакованное представление элемента</param>
            <returns>Элемент</returns>
        </member>
        <member name="T:Intermech.Cache.IPolledExpiration">
            <summary>
            Позволяет реализовать различные алгоритмы устаревания элементов кэша,
            основанные на периодической проверке какого-либо условия.
            помещенных в кэш.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IPolledExpiration.CheckExpired">
            <summary>
            Выполняет проверку условия, от которого зависит устаревание элемента.
            </summary>
        </member>
        <member name="T:Intermech.Cache.IReplacementPolicy">
            <summary>
            Позволяет реализовать различные алгоритмы замещения объектов в кэше для
            поддержания фиксированного размера кэша.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IReplacementPolicy.Add(System.Object,System.Object,System.Int64)">
            <summary>
            Добавляет новый элемент кэша в список элементов, которые
            должны обрабатываться алгоритмом.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="usedSpace">Объем, который данные занимают в хранилище</param>
        </member>
        <member name="M:Intermech.Cache.IReplacementPolicy.Remove(System.Object)">
            <summary>
            Удаляет элемент кэша с указанным ключем из списка элементов,
            которые должны обрабатываться алгоритмом.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.IReplacementPolicy.Flush">
            <summary>
            Удаляет все элементы из списка элементов, обрабатываемых
            алгоритмом.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IReplacementPolicy.Notify(System.Object)">
            <summary>
            Уведомляет алгоритм, что к элементу кэша с указанным ключем
            было обращение.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.IReplacementPolicy.GetKeyForEvict">
            <summary>
            Возвращает ключ элемента, который может быт удален из 
            заполненного кэша, для того чтобы освободить место для нового
            элемента.
            </summary>
            <returns>Ключ элемента</returns>
        </member>
        <member name="T:Intermech.Cache.IStorage">
            <summary>
            Позволяет реализовать различные хранилища для элементов, помещенных в кэш.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IStorage.Add(System.Object,System.Object)">
            <summary>
            Добавляет элемент с указанным ключем в хранилище.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
        </member>
        <member name="M:Intermech.Cache.IStorage.Remove(System.Object)">
            <summary>
            Удаляет из хранилища элемент с указанным ключем.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.IStorage.Flush">
            <summary>
            Очищает хранилище, удаляя все элементы.
            </summary>
        </member>
        <member name="M:Intermech.Cache.IStorage.GetData(System.Object)">
            <summary>
            Возвращает из хранилища элемент с указанным ключем. Если элемента с указанным ключем 
            нет в хранилище, то результатом будет null.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <returns>Элемент</returns>
        </member>
        <member name="T:Intermech.Cache.RemoveCause">
            <summary>
            Описывает причины, по которым элемент был удален из кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.RemoveCause.Evicted">
            <summary>
            Удален из кэша политикой замещения элементов
            </summary>
        </member>
        <member name="F:Intermech.Cache.RemoveCause.Expired">
            <summary>
            Удален из кэша по причине устаревания
            </summary>
        </member>
        <member name="F:Intermech.Cache.RemoveCause.Removed">
            <summary>
            Удален из кэша пользователем
            </summary>
        </member>
        <member name="F:Intermech.Cache.RemoveCause.Flushed">
            <summary>
            Удален в результате полной очистки кэша пользователем
            </summary>
        </member>
        <member name="T:Intermech.Cache.CacheManager">
            <summary>
            Реализует менеджер кэша.
            </summary>
        </member>
        <member name="M:Intermech.Cache.CacheManager.#ctor(Intermech.Cache.IStorage)">
            <summary>
            Создает менеджер кэша.
            </summary>
            <param name="storage">Хранилище элементов кэша</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.#ctor(Intermech.Cache.IStorage,Intermech.Cache.IReplacementPolicy)">
            <summary>
            Создает менеджер кэша.
            </summary>
            <param name="storage">Хранилище элементов кэша</param>
            <param name="policy">
            Алгоритм замещения элементов в кэше. Должен быть отличен от null, если хранилище
            имеет ограниченный объем (т.е. реализует интерфейс <see cref="T:Intermech.Cache.ILimitedStorage"/>
            </param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.#ctor(Intermech.Cache.IStorage,Intermech.Cache.IMonitor)">
            <summary>
            Создает менеджер кэша.
            </summary>
            <param name="storage">Хранилище элементов кэша</param>
            <param name="monitor">Монитор состояния элементов в кэше</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.#ctor(Intermech.Cache.IStorage,Intermech.Cache.IReplacementPolicy,Intermech.Cache.IMonitor)">
            <summary>
            Создает менеджер кэша.
            </summary>
            <param name="storage">Хранилище элементов кэша</param>
            <param name="policy">
            Алгоритм замещения элементов в кэше. Должен быть отличен от null, если хранилище
            имеет ограниченный объем (т.е. реализует интерфейс <see cref="T:Intermech.Cache.ILimitedStorage"/>
            </param>
            <param name="monitor">Монитор состояния элементов в кэше</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.Add(System.Object,System.Object)">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.Add(System.Object,System.Object,Intermech.Cache.BeforeRemoveEventHandler,Intermech.Cache.AfterRemoveEventHandler)">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="beforeRemove">Делегат метода, который будет вызван перед удалением элемента из кэша</param>
            <param name="afterRemove">Делегат метода, который будет вызван после удаления элемента из кэша</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.Add(System.Object,System.Object,Intermech.Cache.IExpiration[])">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="expirations">Массив объектов, которые будут контролировать устаревание элемента</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.Add(System.Object,System.Object,Intermech.Cache.BeforeRemoveEventHandler,Intermech.Cache.AfterRemoveEventHandler,Intermech.Cache.IExpiration[])">
            <summary>
            Добавляет новый элемент в кэш. Если в кэше уже есть элемент с 
            указанным ключем, то он будет предварительно удален.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="beforeRemove">Делегат метода, который будет вызван перед удалением элемента из кэша</param>
            <param name="afterRemove">Делегат метода, который будет вызван после удаления элемента из кэша</param>
            <param name="expirations">Массив объектов, которые будут контролировать устаревание элемента</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.Remove(System.Object)">
            <summary>
            Удалает указанный элемент из кэша.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше.</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.Flush">
            <summary>
            Очищает кэш, удаляя все помещенные в него элементы.
            </summary>
        </member>
        <member name="P:Intermech.Cache.CacheManager.Item(System.Object)">
            <summary>
            Возвращает элемент из кэша. Если элемент отсутствует в кэше, то результатом будет null.
            </summary>
            <param name="key">Уникальный ключ элемента</param>
            <returns>Элемент</returns>
        </member>
        <member name="M:Intermech.Cache.CacheManager.GetData(System.Object)">
            <summary>
            Возвращает элемент из кэша. Если элемент отсутствует в кэше, то результатом будет null.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <returns>Элемент</returns>
        </member>
        <member name="M:Intermech.Cache.CacheManager.GetKeys">
            <summary>
            Возвращает массив ключей всех элементов, помещенных в кэш.
            </summary>
            <returns>Массив ключей элементов в кэше</returns>
        </member>
        <member name="M:Intermech.Cache.CacheManager.GetItem(System.Object)">
            <summary>
            Возвращает контейнер, содержащий метаданные для указанного элемента
            кэша.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <returns>Контейнер с метаданными элемента</returns>
        </member>
        <member name="P:Intermech.Cache.CacheManager.PerformanceCounters">
            <summary>
            Возвращает коллекцию счетчиков производительности кэша, позволяющих оценивать
            эффективность его работы.
            </summary>
        </member>
        <member name="M:Intermech.Cache.CacheManager.InternalAdd(System.Object,System.Object,Intermech.Cache.BeforeRemoveEventHandler,Intermech.Cache.AfterRemoveEventHandler,Intermech.Cache.IExpiration[])">
            <summary>
            Выполняет вставку элемента в кэш.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="beforeRemove">Делегат метода, который будет вызван перед удалением элемента из кэша</param>
            <param name="afterRemove">Делегат метода, который будет вызван после удаления элемента из кэша</param>
            <param name="expirations">Массив объектов, которые будут контролировать устаревание элемента</param>
        </member>
        <member name="M:Intermech.Cache.CacheManager.InternalRemove(System.Object,Intermech.Cache.RemoveCause)">
            <summary>
            Выполняет удаление элемента из кэша.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше.</param>
            <param name="cause">Причина, по которой элемент удаляется.</param>
        </member>
        <member name="T:Intermech.Cache.PollingMonitor">
            <summary>
            Реализует монитор кэша, предназначенный для периодической проверки
            устаревания элементов кэша. Фоновый поток монитора обновляет объекты,
            контролирующие устаревание элементов, которые поддерживают интерфейс
            IPolledExpiration.
            </summary>
        </member>
        <member name="F:Intermech.Cache.PollingMonitor.interval">
            <summary>
            Продолжительность интервала времени между периодическими обновлениями
            объектов, контролирующих устаревание элементов кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.PollingMonitor.expirations">
            <summary>
            Коллекция объектов, контролирующих устаревание элементов кэша.
            </summary>
        </member>
        <member name="F:Intermech.Cache.PollingMonitor.tempList">
            <summary>
            Временный список объектов.
            </summary>
        </member>
        <member name="M:Intermech.Cache.PollingMonitor.#ctor(System.Int32)">
            <summary>
            Создает монитор кэша.
            </summary>
            <param name="interval">
            Интервал в миллисекундах между периодическими обновлениями
            объектов, контролирующих устаревание элементов кэша
            </param>
        </member>
        <member name="M:Intermech.Cache.PollingMonitor.#ctor(System.TimeSpan)">
            <summary>
            Создает монитора кэша.
            </summary>
            <param name="interval">
            Интервал между периодическими обновлениями
            объектов, контролирующих устаревание элементов кэша
            </param>
        </member>
        <member name="M:Intermech.Cache.PollingMonitor.Add(System.Object,Intermech.Cache.IExpiration[])">
            <summary>
            Добавляет в список контролиремых монитором элементов новый элемент.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="expirations">Массив объектов, с помощью которых кэш определяет устаревание элементов</param>
        </member>
        <member name="M:Intermech.Cache.PollingMonitor.Remove(System.Object)">
            <summary>
            Удалает из списка контролируемых монитором элементов указанный элемент.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.PollingMonitor.Flush">
            <summary>
            Очищает список контролируемых монитором элементов.
            </summary>
        </member>
        <member name="M:Intermech.Cache.PollingMonitor.Worker">
            <summary>
            Метод фонового потока монитора, который выполняет обновление
            объектов, контролирующих устаревание элементов кэша.
            </summary>
        </member>
        <member name="M:Intermech.Cache.PollingMonitor.PollExpirations">
            <summary>
            Выполняет обновление контролирующих устаревание объектов.
            </summary>
        </member>
        <member name="T:Intermech.Cache.DoubleLinkedList">
            <summary>
            Реализует двусвязный список объектов. На основе таких списков построены
            некоторые алгоритмы замещения содержимого кэша (например, LRU).
            </summary>
        </member>
        <member name="M:Intermech.Cache.DoubleLinkedList.#ctor">
            <summary>
            Создает пустой двусвязный список.
            </summary>
        </member>
        <member name="M:Intermech.Cache.DoubleLinkedList.Clear">
            <summary>
            Очищает список, удаляя все элементы.
            </summary>
        </member>
        <member name="M:Intermech.Cache.DoubleLinkedList.Remove(Intermech.Cache.DoubleLinkedList.Item)">
            <summary>
            Удаляет элемент из списка.
            </summary>
            <param name="item">Элемент списка</param>
        </member>
        <member name="P:Intermech.Cache.DoubleLinkedList.Head">
            <summary>
            Возвращает или устанавливает первый элемент списка.
            </summary>
            <returns>Элемент списка</returns>
        </member>
        <member name="P:Intermech.Cache.DoubleLinkedList.Tail">
            <summary>
            Возвращает или устанавливает последний элемент списка.
            </summary>
            <returns>Элемент списка</returns>
        </member>
        <member name="T:Intermech.Cache.DoubleLinkedList.Item">
            <summary>
            Реализует элемент двусвязного списка объектов.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Resources">
            <summary>
            Хранит текстовые ресурсы, подлежащие локализации.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Resources.GetString(System.String)">
            <summary>
            Возвращает локализованную текстовую строку по ее имени.
            </summary>
            <param name="name">Имя текстовой строки</param>
            <returns></returns>
        </member>
        <member name="T:Intermech.Cache.Validator">
            <summary>
            Содержит часто используемые методы проверки корректности аргументов
            методов.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Performance.AverageNumberOfItems">
            <summary>
            Реализует счетчик производительности, который показывает среднее значение количества или
            объема ресурса.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Performance.AverageNumberOfItems.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Создает счетчик производительности
            </summary>
            <param name="categoryName">Название категории счетчика</param>
            <param name="counterName">Название счетчика</param>
            <param name="measure">Единица измерения счетчика</param>
            <param name="description">Описание счетчика</param>
        </member>
        <member name="M:Intermech.Cache.Performance.AverageNumberOfItems.IncrementBy(System.Int64)">
            <summary>
            Увеличивает и уменьшает значение счетчика на указанную величину.
            </summary>
            <param name="value">Величина для увеличения (или уменьшения, если оно отрицательное)</param>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="P:Intermech.Cache.Performance.AverageNumberOfItems.RawValue">
            <summary>
            Возвращает или устанавливает непосредственное (т.е. нерассчитанное) значение счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.AverageNumberOfItems.Value">
            <summary>
            Возвращает рассчитанное значение счетчика, пригодное для оценки производительности.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Performance.IPerformanceCounter">
            <summary>
            Позволяет реализовать счетчик производительности.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.IPerformanceCounter.CategoryName">
            <summary>
            Возвращает название категории счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.IPerformanceCounter.CounterName">
            <summary>
            Возвращает название счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.IPerformanceCounter.Measure">
            <summary>
            Возвращает единицу измерения счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.IPerformanceCounter.Description">
            <summary>
            Возвращает описание счетчика.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Performance.IPerformanceCounter.Increment">
            <summary>
            Увечичивает значение счетчика на единицу.
            </summary>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="M:Intermech.Cache.Performance.IPerformanceCounter.Decrement">
            <summary>
            Уменьшает значение счетчика на единицу.
            </summary>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="M:Intermech.Cache.Performance.IPerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Увеличивает и уменьшает значение счетчика на указанную величину.
            </summary>
            <param name="value">Величина для увеличения (или уменьшения, если оно отрицательное)</param>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="P:Intermech.Cache.Performance.IPerformanceCounter.RawValue">
            <summary>
            Возвращает или устанавливает непосредственное (т.е. нерассчитанное) значение счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.IPerformanceCounter.Value">
            <summary>
            Возвращает рассчитанное значение счетчика, пригодное для оценки производительности.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Performance.NumberOfItems">
            <summary>
            Реализует счетчик производительности, который показываем текущее количество или
            объем ресурса.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Performance.NumberOfItems.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Создает счетчик производительности
            </summary>
            <param name="categoryName">Название категории счетчика</param>
            <param name="counterName">Название счетчика</param>
            <param name="measure">Единица измерения счетчика</param>
            <param name="description">Описание счетчика</param>
        </member>
        <member name="M:Intermech.Cache.Performance.NumberOfItems.IncrementBy(System.Int64)">
            <summary>
            Увеличивает и уменьшает значение счетчика на указанную величину.
            </summary>
            <param name="value">Величина для увеличения (или уменьшения, если оно отрицательное)</param>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="P:Intermech.Cache.Performance.NumberOfItems.RawValue">
            <summary>
            Возвращает или устанавливает непосредственное (т.е. нерассчитанное) значение счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.NumberOfItems.Value">
            <summary>
            Возвращает рассчитанное значение счетчика, пригодное для оценки производительности.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Performance.PerformanceCounter">
            <summary>
            Базовый класс для создания счетчиков производительности.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Создает счетчик производительности.
            </summary>
            <param name="categoryName">Название категории счетчика</param>
            <param name="counterName">Название счетчика</param>
            <param name="measure">Единица измерения счетчика</param>
            <param name="description">Описание счетчика</param>
        </member>
        <member name="P:Intermech.Cache.Performance.PerformanceCounter.CategoryName">
            <summary>
            Возвращает название категории счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.PerformanceCounter.CounterName">
            <summary>
            Возвращает название счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.PerformanceCounter.Measure">
            <summary>
            Возвращает единицу измерения счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.PerformanceCounter.Description">
            <summary>
            Возвращает описание счетчика.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounter.Increment">
            <summary>
            Увечичивает значение счетчика на единицу.
            </summary>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounter.Decrement">
            <summary>
            Уменьшает значение счетчика на единицу.
            </summary>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounter.IncrementBy(System.Int64)">
            <summary>
            Увеличивает и уменьшает значение счетчика на указанную величину.
            </summary>
            <param name="value">Величина для увеличения (или уменьшения, если оно отрицательное)</param>
            <returns>Результирующее значение счетчика</returns>
        </member>
        <member name="P:Intermech.Cache.Performance.PerformanceCounter.RawValue">
            <summary>
            Возвращает или устанавливает непосредственное (т.е. нерассчитанное) значение счетчика.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Performance.PerformanceCounter.Value">
            <summary>
            Возвращает рассчитанное значение счетчика, пригодное для оценки производительности.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Performance.PerformanceCounterCollection">
            <summary>
            Реализует коллекцию счетчиков производительности.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounterCollection.#ctor">
            <summary>
            Создает пустую коллекцию счетчиков.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounterCollection.Add(Intermech.Cache.Performance.IPerformanceCounter)">
            <summary>
            Добавляет новый счетчик в коллекцию.
            </summary>
            <param name="counter">Счетчик производительности</param>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounterCollection.Remove(Intermech.Cache.Performance.IPerformanceCounter)">
            <summary>
            Удаляет счетчик из коллекции.
            </summary>
            <param name="counter">Счетчик производительности</param>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounterCollection.Contains(Intermech.Cache.Performance.IPerformanceCounter)">
            <summary>
            Возвращает true, если указанный счетчик есть в коллекции.
            </summary>
            <param name="counter">Счетчик производительности</param>
            <returns>Признак наличия счетчика в коллекции</returns>
        </member>
        <member name="M:Intermech.Cache.Performance.PerformanceCounterCollection.IndexOf(Intermech.Cache.Performance.IPerformanceCounter)">
            <summary>
            Возвращает порядковый номер счетчика в коллекции или -1, если
            счетчика нет в коллекции.
            </summary>
            <param name="counter">Счетчик производительности</param>
            <returns>Порядковый номер счетчика</returns>
        </member>
        <member name="P:Intermech.Cache.Performance.PerformanceCounterCollection.Item(System.Int32)">
            <summary>
            Возвращает счетчик производительности по его порядковому номеру.
            </summary>
        </member>
        <member name="T:Intermech.Cache.Policies.Lru">
            <summary>
            Реализует алгоритм замещения элементов кэша, известный как LRU (частный
            случай семейства алгоритмов LRU-k при k = 1). Он выталкивает элемент, к
            которому дольше всего не было обращений.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Policies.Lru.Add(System.Object,System.Object,System.Int64)">
            <summary>
            Добавляет новый элемент кэша в список элементов, которые
            должны обрабатываться алгоритмом.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
            <param name="usedSpace">Объем, который данные занимают в хранилище</param>
        </member>
        <member name="M:Intermech.Cache.Policies.Lru.Remove(System.Object)">
            <summary>
            Удаляет элемент кэша с указанным ключем из списка элементов,
            которые должны обрабатываться алгоритмом.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.Policies.Lru.Flush">
            <summary>
            Удаляет все элементы из списка элементов, обрабатываемых
            алгоритмом.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Policies.Lru.Notify(System.Object)">
            <summary>
            Уведомляет алгоритм, что к элементу кэша с указанным ключем
            было обращение.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.Policies.Lru.GetKeyForEvict">
            <summary>
            Возвращает ключ элемента, который может быт удален из 
            заполненного кэша, для того чтобы освободить место для нового
            элемента.
            </summary>
            <returns>Ключ элемента</returns>
        </member>
        <member name="T:Intermech.Cache.Storages.InMemoryStorage">
            <summary>
            Реализует хранилище данных элементов кэша в оперативной памяти. Данное
            хранилище допускает использование объектов любых типов в качестве ключей 
            и данных элементов. Объем любого элемента, помещаемого в хранилище,
            всегда оценивается равным 1. Поэтому максимальный объем хранилища - это
            максимальное количество элементов, которые можно поместить в хранилище.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Storages.InMemoryStorage.totalSpace">
            <summary>
            Максимально допустимое количество элементов в хранилище.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Storages.InMemoryStorage.freeSpace">
            <summary>
            Количество свободных слотов в хранилище.
            </summary>
        </member>
        <member name="F:Intermech.Cache.Storages.InMemoryStorage.data">
            <summary>
            Таблица с данными элементов, помещенных в хранилище.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Storages.InMemoryStorage.#ctor">
            <summary>
            Создает хранилище элементов кэша неограниченного размера.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Storages.InMemoryStorage.#ctor(System.Int64)">
            <summary>
            Создает хранилище элементов кэша.
            </summary>
            <param name="totalSpace">Максимальное количество элементов, которое можно поместить в хранилище</param>
        </member>
        <member name="P:Intermech.Cache.Storages.InMemoryStorage.LimitsEnabled">
            <summary>
            Возвращает true, если у хранилища включен режим ограничения объема.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Storages.InMemoryStorage.TotalSpace">
            <summary>
            Возвращает объем хранилища.
            </summary>
        </member>
        <member name="P:Intermech.Cache.Storages.InMemoryStorage.FreeSpace">
            <summary>
            Возвращает объем свободного пространства в хранилище.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Storages.InMemoryStorage.EstimateSpace(System.Object)">
            <summary>
            Возвращает объем, который займет элемент после помещения в кэш.
            </summary>
            <param name="data">Элемент</param>
            <returns>Объем элемента</returns>
        </member>
        <member name="M:Intermech.Cache.Storages.InMemoryStorage.Add(System.Object,System.Object)">
            <summary>
            Добавляет элемент с указанным ключем в хранилище.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <param name="data">Элемент</param>
        </member>
        <member name="M:Intermech.Cache.Storages.InMemoryStorage.Remove(System.Object)">
            <summary>
            Удаляет из хранилища элемент с указанным ключем.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
        </member>
        <member name="M:Intermech.Cache.Storages.InMemoryStorage.Flush">
            <summary>
            Очищает хранилище, удаляя все элементы.
            </summary>
        </member>
        <member name="M:Intermech.Cache.Storages.InMemoryStorage.GetData(System.Object)">
            <summary>
            Возвращает из хранилища элемент с указанным ключем. Если элемента с указанным ключем 
            нет в хранилище, то результатом будет null.
            </summary>
            <param name="key">Уникальный ключ элемента в кэше</param>
            <returns>Элемент</returns>
        </member>
        <member name="T:Intermech.Cache.WriteSeqKeyValueCache`2">
            <summary>
            Реализует кэш для значений, идентифицируемых по ключам и хранящихся в постоянном хранилище. 
            Для проверки валидности значений в кэше используется счетчик изменений в хранилище, изменяющийся при каждой записи в хранилище.
            </summary>
            <typeparam name="TKey">Тип ключей</typeparam>
            <typeparam name="TValue">Тип кэшируемых значений</typeparam>
        </member>
        <member name="M:Intermech.Cache.WriteSeqKeyValueCache`2.#ctor(System.TimeSpan,System.Func{`0,`1},System.Func{System.Int64})">
            <summary>
            Создает объект.
            </summary>
            <param name="storageCheckPeriod">Время жизни значений в кэше</param>
            <param name="valueFunction">Функция получения значения из хранилища</param>
            <param name="writeSeqFunction">Функция получения счетчика изменений хранилища</param>
            <exception cref="T:ArgumentOutOfRangeException">storageCheckPeriod</exception>
            <exception cref="T:ArgumentNullException">valueFunction, writeSeqFunction</exception>
        </member>
        <member name="M:Intermech.Cache.WriteSeqKeyValueCache`2.GetValue(`0)">
            <summary>
            Возвращает значение для указанного ключа. Если значение отсутствует в кэше, то оно будет получено из хранилища.
            </summary>
            <param name="key">Ключ</param>
            <returns>Значение</returns>
        </member>
        <member name="M:Intermech.Cache.WriteSeqKeyValueCache`2.Clear">
            <summary>
            Очищает кэш.
            </summary>
        </member>
        <member name="M:Intermech.Cache.WriteSeqKeyValueCache`2.HasCachedValue(`0)">
            <summary>
            Проверяет, есть ли в кэше значение для указанного ключа.
            </summary>
            <param name="key">Ключ</param>
            <returns>Признак наличия значения в кэше</returns>
        </member>
        <member name="M:Intermech.Cache.WriteSeqKeyValueCache`2.TryGetCachedValue(`0,`1)">
            <summary>
            Возвращает кэшированное значение для указанного ключа.
            </summary>
            <param name="key">Ключ</param>
            <param name="defaultValue">Значение, возвращаемое при отсутствии значения в кэше</param>
            <returns>Кэшированное значение или значение по умолчанию</returns>
        </member>
        <member name="T:Intermech.Collections.CloneHelper">
            <summary>
            Вспомогательный статический класс, позволяющий осуществлять клонирование объектов, списков, словариков
            без ограничения уровня сложности и вложенности элементов ключей и значений
            </summary>
        </member>
        <member name="M:Intermech.Collections.CloneHelper.Clone(System.Object)">
            <summary>
            Создать точную копию объекта, если это возможно
            </summary>
            <param name="source">Объект-источник</param>
            <returns>Точная копия объекта или сам объект-источник</returns>
        </member>
        <member name="M:Intermech.Collections.CollectionUtils.AddNew``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Добавляет элемент в коллекцию, но только в том случае, если указанный элемент еще не содержится в коллекции.
            </summary>
            <typeparam name="T">Тип элементов коллекции</typeparam>
            <param name="collection">Коллекция элементов</param>
            <param name="item">Добавляемый элемент</param>
            <returns>true - элемент был добавлен в коллекцию, false - элемент уже был в коллекции</returns>
        </member>
        <member name="M:Intermech.Collections.CollectionUtils.AddNew``1(System.Collections.Generic.ICollection{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Добавляет элемент в коллекцию, но только в том случае, если указанный элемент еще не содержится в коллекции.
            </summary>
            <typeparam name="T">Тип элементов коллекции</typeparam>
            <param name="collection">Коллекция элементов</param>
            <param name="item">Добавляемый элемент</param>
            <param name="comparer">Объект для сравнения элементов коллекции</param>
            <returns>true - элемент был добавлен в коллекцию, false - элемент уже был в коллекции</returns>
        </member>
        <member name="T:Intermech.Collections.ConcurrentCollection">
            <summary>Потокобезопасная абстрактная коллекция элементов</summary>
        </member>
        <member name="P:Intermech.Collections.ConcurrentCollection.IsLocked">
            <summary>Коллекция заблокирована</summary>
        </member>
        <member name="P:Intermech.Collections.ConcurrentCollection.IsInReadMode">
            <summary>Коллекция работает в режиме чтения</summary>
        </member>
        <member name="P:Intermech.Collections.ConcurrentCollection.IsInWriteMode">
            <summary>Коллекция работает в режиме записи</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentCollection.BeginReadMode">
            <summary>Начать режим чтения</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentCollection.EndReadMode">
            <summary>Завершить режим чтения</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentCollection.BeginWriteMode">
            <summary>Начать режим записи</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentCollection.EndWriteMode">
            <summary>Завершить режим записи</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentCollection.RestoreAfterSerialization(System.Runtime.Serialization.StreamingContext)">
            <summary>Восстановим несериализуемое поле</summary>
        </member>
        <member name="T:Intermech.Collections.ConcurrentHashSet`1">
            <summary>
            Потокобезопасная хэш-коллекция элементов
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Intermech.Collections.ConcurrentHashSet`1._items">
            <summary>Коллекция</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.ToList">
            <summary>
            Получить список ключей
            </summary>
            <returns>Список ключей</returns>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.First">
            <summary>Получить первый элемент</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.FirstOrDefault">
            <summary>Получить первый элемент или значение по умолчанию</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.FirstOrDefault(System.Func{`0,System.Boolean})">
            <summary>Получить первый элемент или значение по умолчанию</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.Last">
            <summary>Получить последний элемент</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.LastOrDefault">
            <summary>Получить последний элемент или значение по умолчанию</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.ElementAt(System.Int32)">
            <summary>Получить элемент с указанным индексом</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.Any">
            <summary>Проверить наличие как минимум одного элемента в коллекции</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.Where(System.Func{`0,System.Boolean})">
            <summary>Снимок состояния коллекции</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.GetEnumerator">
            <summary>Снимок состояния коллекции</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.PopFirst">
            <summary>Получить первый элемент, удалив его из коллекции</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.PopFirstOrDefault">
            <summary>Получить первый элемент, удалив его из коллекции</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.PopLast">
            <summary>Получить последний элемент, удалив его из коллекции</summary>
        </member>
        <member name="M:Intermech.Collections.ConcurrentHashSet`1.PopLastOrDefault">
            <summary>Получить последний элемент, удалив его из коллекции</summary>
        </member>
        <member name="T:Intermech.Collections.ExtensibleList`1">
            <summary>
            Реализует generic-список объектов, позволяющих расширять или заменять стандартную реализацию методов
            списка.
            </summary>
            <typeparam name="T">Тип объектов в списке</typeparam>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.#ctor">
            <summary>
            Создает список.
            </summary>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.Add(`0)">
            <summary>
            Добавляет элемент в список.
            </summary>
            <param name="item">Добавляемый элемент</param>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.Clear">
            <summary>
            Очищает список.
            </summary>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.ClearItems">
            <summary>
            Реализует очистку списка.
            </summary>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.Contains(`0)">
            <summary>
            Проверяет, содержится ли элемент в списке.
            </summary>
            <param name="item">Искомый элемент</param>
            <returns>Возвращает true, если элемент присутствует в списке</returns>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.ContainsItem(`0)">
            <summary>
            Реализует проверку присутствия элемента в списке
            </summary>
            <param name="item">Искомый элемент</param>
            <returns>Возвращает true, если элемент присутствует в списке</returns>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Копирует содержимое списка в указанный массив.
            </summary>
            <param name="array">Массив-приемник</param>
            <param name="index">Индекс элемента в массиве, начиная с которого будут расположены копируемые элементы</param>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.GetEnumerator">
            <summary>
            Возвращает перечислитель элементов списка.
            </summary>
            <returns>Перечислитель элементов списка</returns>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.IndexOf(`0)">
            <summary>
            Возвращает индекс элемента в списке.
            </summary>
            <param name="item">Искомый элемент</param>
            <returns>Индекс элемента в списке. Если такого элемента в списке нет, то метод вернет null</returns>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.IndexOfItem(`0)">
            <summary>
            Реализует определение индекса элемента в списке.
            </summary>
            <param name="item">Искомый элемент</param>
            <returns>Индекс элемента в списке. Если такого элемента в списке нет, то метод вернет null</returns>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.Insert(System.Int32,`0)">
            <summary>
            Вставляет элемент в список.
            </summary>
            <param name="index">Индекс элемента в списке</param>
            <param name="item">Вставляемый элемент</param>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.InsertItem(System.Int32,`0)">
            <summary>
            Реализует вставку элемента в список.
            </summary>
            <param name="index">Индекс элемента в списке</param>
            <param name="item">Вставляемый элемент</param>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.Remove(`0)">
            <summary>
            Удаляет элемент из списка.
            </summary>
            <param name="item">Удаляемый элемент</param>
            <returns>Возвращает true, если элемент был успешно удален</returns>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.RemoveAt(System.Int32)">
            <summary>
            Удаляет элемент из списка.
            </summary>
            <param name="index">Индекс удаляемого элемента в списке</param>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.RemoveItem(System.Int32)">
            <summary>
            Реализует удаление элемента из списка.
            </summary>
            <param name="index">Индекс удаляемого элемента в списке</param>
        </member>
        <member name="M:Intermech.Collections.ExtensibleList`1.SetItem(System.Int32,`0)">
            <summary>
            Реализует установку нового значения для элемента в списке.
            </summary>
            <param name="index">Индекс элемента</param>
            <param name="item">Новое значение элемента</param>
        </member>
        <member name="P:Intermech.Collections.ExtensibleList`1.Count">
            <summary>
            Возвращает количество элементов в списке.
            </summary>
        </member>
        <member name="P:Intermech.Collections.ExtensibleList`1.Item(System.Int32)">
            <summary>
            Возвращает или задает значение элемента в списке.
            </summary>
            <param name="index">Индекс элемента</param>
            <returns>Значение элемента</returns>
        </member>
        <member name="P:Intermech.Collections.ExtensibleList`1.Items">
            <summary>
            Возвращает внутренний контейнер элементов списка.
            </summary>
        </member>
        <member name="T:Intermech.Collections.RBTree`2">
            <summary>
            Реализует красно-черное дерево - самобалансирующееся бинарное дерево поиска.
            </summary>
            <typeparam name="TKey">Тип ключей в узлах дерева</typeparam>
            <typeparam name="TValue">Тип значений в узлах дерева</typeparam>
        </member>
        <member name="F:Intermech.Collections.RBTree`2.NullNode">
            <summary>
            Специальный узел, служащий для обозначения листьев дерева
            </summary>
            <remarks>
            set up the sentinel node. the sentinel node is the key to a successfull
            implementation and for understanding the red-black tree properties.
            </remarks>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.#ctor">
            <summary>
            Создает пустое дерево.
            </summary>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.Add(`0,`1)">
            <summary>
            Добавляет новый узел в дерево.
            </summary>
            <exception cref="T:System.InvalidOperationException">В дереве уже есть узел с указанным ключем</exception>
            <param name="key">Ключ</param>
            <param name="value">Значение</param>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.Remove(`0)">
            <summary>
            Удаляет узел из дерева.
            </summary>
            <param name="key">Ключ удаляемого узла</param>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.Clear">
            <summary>
            Очищает дерево.
            </summary>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.ContainsKey(`0)">
            <summary>
            Возвращает true, если в дереве есть узел с заданным ключем.
            </summary>
            <param name="key">Ключ узла</param>
            <returns>True, если узел есть в дереве</returns>
        </member>
        <member name="P:Intermech.Collections.RBTree`2.MinKey">
            <summary>
            Возвращает минимальное значение ключа, встречающееся в дереве.
            </summary>
        </member>
        <member name="P:Intermech.Collections.RBTree`2.MaxKey">
            <summary>
            Возвращает максимальное значение ключа, встречающееся в дереве.
            </summary>
        </member>
        <member name="P:Intermech.Collections.RBTree`2.Count">
            <summary>
            Возвращает количество узлов в дереве.
            </summary>
        </member>
        <member name="P:Intermech.Collections.RBTree`2.Item(`0)">
            <summary>
            Возвращает или устанавливает значние узла дерева.
            </summary>
            <param name="key">Ключ узла</param>
            <returns>Значение узла</returns>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.RotateLeft(Intermech.Collections.RBTree{`0,`1}.RBNode)">
            <summary>
             RotateLeft
             Rebalance the tree by rotating the nodes to the left
            </summary>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.RotateRight(Intermech.Collections.RBTree{`0,`1}.RBNode)">
            <summary>
             RotateRight
             Rebalance the tree by rotating the nodes to the right
            </summary>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.RestoreAfterInsert(Intermech.Collections.RBTree{`0,`1}.RBNode)">
            <summary>
             RestoreAfterInsert
             Additions to red-black trees usually destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.Delete(Intermech.Collections.RBTree{`0,`1}.RBNode)">
            <summary>
            Delete
            Delete a node from the tree and restore red black properties
            </summary>
            <param name="z"></param>
        </member>
        <member name="M:Intermech.Collections.RBTree`2.RestoreAfterDelete(Intermech.Collections.RBTree{`0,`1}.RBNode)">
            <summary>
             RestoreAfterDelete
             Deletions from red-black trees may destroy the red-black 
             properties. Examine the tree and restore. Rotations are normally 
             required to restore it
            </summary>
        </member>
        <member name="T:Intermech.BindingOptions">
            <summary>Extensions for BindingOptions</summary>
        </member>
        <member name="P:Intermech.BindingOptions.IgnoreCase">
            <summary>Specifies that the case of the member name should not be considered when binding.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.DeclaredOnly">
            <summary>Specifies that only members declared at the level of the supplied type's hierarchy should be considered.
                Inherited members are not considered.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.Instance">
            <summary>Specifies that instance members are to be included in the search.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.Static">
            <summary>Specifies that static members are to be included in the search.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.Public">
            <summary>Specifies that public members are to be included in the search.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.NonPublic">
            <summary>Specifies that non-public members are to be included in the search.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.FlattenHierarchy">
            <summary>Specifies that public and protected static members up the hierarchy should be returned. Private static members
                in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested
                types are not returned.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.InvokeMethod">
            <summary>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.
            This flag is passed to an <see langword="InvokeMember" /> method to invoke a method.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.CreateInstance">
            <summary>Specifies that reflection should create an instance of the specified type. Calls the constructor that matches
                the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance |
                Public) will apply. It is not possible to call a type initializer. This flag is passed to an
                <see langword="InvokeMember" /> method to invoke a constructor.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.GetField">
            <summary>Specifies that the value of the specified field should be returned.
            This flag is passed to an <see langword="InvokeMember" /> method to get a field value.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.SetField">
            <summary>Specifies that the value of the specified field should be set.
            This flag is passed to an <see langword="InvokeMember" /> method to set a field value.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.GetProperty">
            <summary>Specifies that the value of the specified property should be returned.
            This flag is passed to an <see langword="InvokeMember" /> method to invoke a property getter.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.SetProperty">
            <summary>Specifies that the value of the specified property should be set. For COM properties, specifying this binding
                flag is equivalent to specifying <see langword="PutDispProperty" /> and <see langword="PutRefDispProperty" />.
                This flag is passed to an <see langword="InvokeMember" /> method to invoke a property setter.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.PutDispProperty">
            <summary>Specifies that the <see langword="PROPPUT" /> member on a COM object should be invoked.
                <see langword="PROPPUT" /> specifies a property-setting function that uses a value. Use
                <see langword="PutDispProperty" /> if a property has both <see langword="PROPPUT" /> and
                <see langword="PROPPUTREF" /> and you need to distinguish which one is called.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.PutRefDispProperty">
            <summary>Specifies that the <see langword="PROPPUTREF" /> member on a COM object should be invoked.
                <see langword="PROPPUTREF" /> specifies a property-setting function that uses a reference instead of a value. Use
                <see langword="PutRefDispProperty" /> if a property has both <see langword="PROPPUT" /> and
                <see langword="PROPPUTREF" /> and you need to distinguish which one is called.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.ExactBinding">
            <summary>Specifies that types of the supplied arguments must exactly match the types of the corresponding formal
                parameters. Reflection throws an exception if the caller supplies a non-null <see langword="Binder" /> object,
                since that implies that the caller is supplying <see langword="BindToXXX" /> implementations that will pick the
                appropriate method.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.SuppressChangeType">
            <summary>Not implemented.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.OptionalParamBinding">
            <summary>Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag
                is used for methods with parameters that have default values and methods with variable arguments (varargs). This
                flag should only be used with
                <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</summary>
        </member>
        <member name="P:Intermech.BindingOptions.IgnoreReturn">
            <summary>Used in COM interop to specify that the return value of the member can be ignored.</summary>
        </member>
        <member name="T:Intermech.Extensions.EnumHelper">
            <summary>Расширение системного класса Enum для упрощения обработки флагов</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumHelper.PossibleValues``1(System.Boolean)">
            <summary>Коллекция всех возможным флагов типа enum
                    Если includeZero == false, то результата исключается 0,
                    У перечислений помеченных атрибутом Flags возвращаются только индивидуальные значения, комбинации флагов отфильтровываются</summary>
            <param name="includeZero">(Optional) Включать ли в результат флаг со значением 0 (по-умолчанию false)</param>
            <returns>Коллекция всех возможных значений перечисления</returns>
        </member>
        <member name="T:Intermech.Extensions.CollectionExtensions">
            <summary>Расширение для ICollection</summary>
            <remarks>Для новых функций желательно писать тесты</remarks>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Добавить в коллекцию перечисление элементов</summary>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Удалить из коллекции перечисление элементов</summary>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.SafeAdd``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>Добавление элемента в коллекцию с контролем уникальности</summary>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.SafeAddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Добавление элементов в коллекцию с контролем уникальности</summary>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.OneOf``1(``0,``0[])">
            <summary>Проверить, что <paramref name="item"/> является одним из элементов в коллекции значений <paramref name="set"/></summary>
            <typeparam name="T">Тип элемента</typeparam>
            <param name="item">Проверяемый элемент</param>
            <param name="set">Коллекция значений</param>
            <remarks>Применяется LINQ</remarks>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.OneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>Проверить, что <paramref name="item"/> является одним из элементов в коллекции значений <paramref name="set"/></summary>
            <typeparam name="T">Тип элемента</typeparam>
            <param name="item">Проверяемый элемент</param>
            <param name="set">Коллекция значений</param>
            <remarks>Применяется LINQ</remarks>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.NotOneOf``1(``0,``0[])">
            <summary>Проверить, что элемент <paramref name="item"/> не является одним из элементов в коллекции значений <paramref name="set"/></summary>
            <typeparam name="T">Тип элемента</typeparam>
            <param name="item">Проверяемый элемент</param>
            <param name="set">Коллекция значений</param>
            <remarks>Применяется LINQ</remarks>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.AreIdentical``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Проверить, что указанные коллекции содержат одинаковое количество идентичных элементов без учёта порядка расположения
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Первая коллекция</param>
            <param name="otherCollection">Вторая коллекция</param>
            <returns></returns>
            <remarks>Применяется LINQ</remarks>
        </member>
        <member name="M:Intermech.Extensions.CollectionExtensions.AreNotIdentical``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Проверить, что указанные коллекции различаются либо количеством либо своими элементами
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">Первая коллекция</param>
            <param name="otherCollection">Вторая коллекция</param>
            <returns></returns>
            <remarks>Применяется LINQ</remarks>
        </member>
        <member name="T:Intermech.Extensions.ColorExtensions">
            <summary>Расширения для работы с цветами</summary>
        </member>
        <member name="M:Intermech.Extensions.ColorExtensions.ToHexString(System.Drawing.Color)">
            <summary>Преобразовать цвет в строку вида #FA12CC</summary>
        </member>
        <member name="T:Intermech.Extensions.EnumerableExtensions">
            <summary>Методы-расширения класса IEnumerable-T</summary>
        </member>
        <member name="F:Intermech.Extensions.EnumerableExtensions.MinimumZeroCapacity">
            <summary>Минимальная базовая вместимость списка для хранения последовательности</summary>
        </member>
        <member name="F:Intermech.Extensions.EnumerableExtensions.DefaultListCapacity">
            <summary>Минимальная базовая вместимость списка для хранения последовательности</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.SelectNotNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{``1}})">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.SelectNotNull``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Обычный Select + проверка на null всех результатов
                     Больно уж часто используется, вынес как отдельный метод расширения</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.InvokeForAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Вызов метода для всех значений</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Int32@)">
            <summary>Преобразование в массив с заданием начальной вместимости массива и получение реально заполненных элементов</summary>
            <param name="enumerable">Перечисление</param>
            <param name="capacity">[in,out] вместимость массива (начальное значение может быть как меньше, так и больше финальной
                                   вместимости массива, но чем точнее будет указан, тем быстрее отработает метод)</param>
            <param name="count">[out] число реально внесённых в массив элементов (меньше либо равно вместимости массива)</param>
            <returns>Массив</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32@)">
            <summary>Преобразование в массив с заданием начальной вместимости массива и получение реально заполненных элементов</summary>
            <param name="enumerable">Перечисление</param>
            <param name="capacity">Оценка финальной вместимости массива (может быть как меньше, так и больше финальной
                                   вместимости массива, но чем точнее будет указан, тем быстрее отработает метод)</param>
            <param name="count">[out] число реально внесённых в массив элементов (меньше или равно вместимости массива)</param>
            <returns>Массив</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Преобразование в массив с заданием ожидаемого числа элементов, на большом числе элементов будет работать
                     несколько быстрее, чем ToArray() без параметров Размер массива (Length) всегда будет равен числу реально
                     взятых из последовательности элементов. capacity при этом может быть как меньше, так и больше финальной
                     вместимости массива, но чем точнее будет указан, тем быстрее отработает метод</summary>
            <param name="enumerable">Перечисление</param>
            <param name="capacity">(Опционально) Рекомендованная начальная вместимости массива</param>
            <returns>Массив</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Преобразование в массив с заданием ожидаемого числа элементов, на большом числе элементов будет работать
                     несколько быстрее, чем ToArray() без параметров. Размер массива (Length) всегда будет равен числу реально
                     взятых из последовательности элементов. capacity при этом может быть как меньше, так и больше финальной
                     вместимости массива, но чем точнее будет указан, тем быстрее отработает метод</summary>
            <param name="enumerable">Перечисление</param>
            <param name="capacity">Базовый размер массива. Сначала создаётся массив данного размера,
                                   потом заполняется элементами перечисления, каждый раз когда в процессе заполнения происходит
                                   переполнение массива, его размер увеличивается в полтора раза. В конце итоговый размер массива
                                   сравнивается с числом фактически добавленных элементов и, если требуется, размер массива
                                   уменьшается до этого числа. Чем точнее и ближе указана базовая вместимости массива, чем меньше
                                   операций изменения размера массива будет происходить во время преобразования</param>
            <returns>Массив</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Преобразование в массив с заданием ожидаемого числа элементов, на большом числе элементов будет работать
                     несколько быстрее, чем ToList() без параметров</summary>
            <param name="enumerable">Перечисление</param>
            <param name="capacity">Оценка финальной вместимости массива (может быть как меньше, так и больше финальной
                                   вместимости массива, но чем точнее будет указан, тем быстрее отработает метод)</param>
            <returns>Список</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.GetRecommendedCapacity``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Если это возможно - рассчитать рекомендуемую вместимость внутреннего массива, который должен использоваться
                     коллекцией для хранения всех элементов последовательности</summary>
            <param name="enumeration">Последовательность</param>
            <param name="baseCapacity">(Optional) Минимальная вместимость. Результат не может быть меньше этого значения</param>
            <returns>Рекомендуемая вместимость</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.TryGetCapacity``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Если это возможно - рассчитать рекомендуемую вместимость внутреннего массива, который должен использоваться
                     коллекцией для хранения всех элементов последовательности</summary>
            <param name="enumeration">Последовательность</param>
            <returns>Размерность коллекции если она найдена, иначе null</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.TryGetCapacity``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>Если это возможно - рассчитать рекомендуемую вместимость внутреннего массива, который должен использоваться
                     коллекцией для хранения всех элементов последовательности</summary>
            <param name="enumeration">Последовательность</param>
            <param name="result">[out] вместимость коллекции если она найдена, иначе -1</param>
            <returns>True, если вместимость удалось найти, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.TrySetCapacity``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Попытаться установить вместимость коллекции</summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.TryGetCountOrCapacity``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <param name="enumeration">Последовательность</param>
            <returns>Число элементов или null если число найти не удалось</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.TryGetCountOrCapacity``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="enumeration">Последовательность</param>
            <param name="result">[out] число элементов или вместимость из ICapacityOwner, если число найти не удалось,
                                 иначе -1</param>
            <returns>True, если число элементов или вместимость из ICapacityOwner удалось найти, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <param name="enumeration">Последовательность</param>
            <returns>Число элементов или null если число найти не удалось</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.TryGetCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Boolean)">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="enumeration">Последовательность</param>
            <param name="result">[out] Число элементов если число удалось найти, иначе -1</param>
            <param name="force">Если true, то в случае неудачи попыток преобразования к интерфейсам, содержащим Count, кол-во будет получено перебором енумерации</param>
            <returns>True, если число элементов удалось найти, иначе false</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerableExtensions.GetCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Попытаться получиться кол-во элементов последовательности преобразовывая её к интерфейсам ICollection,
                     ICollection_T и IReadOnlyCollection_T</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="enumeration">Последовательность</param>
            <returns>True, если число элементов удалось найти, иначе false</returns>
        </member>
        <member name="T:Intermech.Extensions.EnumerationExtension">
            <summary>Расширение системного класса <see cref="T:System.Enum"/></summary>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.GetAttribute``1(System.Enum)">
            <summary>Получить первый атрибут заданного типа</summary>
            <returns>Первый атрибут заданного типа, либо null</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.GetDescription(System.Enum)">
            <summary>Получить описание значения enum-а из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/> или текстовое представление значения если атрибута нет</summary>
            <returns>Описание значения enum-а взятое из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/> или текстовое представление значения если атрибута нет</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.GetDescription``1(``0)">
            <summary>Получить описание значения enum-а из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/> или текстовое представление значения если атрибута нет</summary>
            <returns>Описание значения enum-а взятое из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/> или текстовое представление значения если атрибута нет</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.FindDescription(System.Enum)">
            <summary>Получить описание значения enum-а из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/> или null если атрибута нет</summary>
            <returns>Описание значения enum-а взятое из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/> или null если атрибута нет</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.FindDescription``1(``0)">
            <summary>Получить описание значения enum-а из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/></summary>
            <returns>Описание значения enum-а взятое из атрибута <see cref="T:System.ComponentModel.DescriptionAttribute"/> или null если атрибута нет</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.GetName(System.Enum)">
            <summary>Получить наименование значения Enum, либо текстовое представление значения, если оно выходит за рамки значений этого типа</summary>
            <returns>Наименование значения, либо текстовое представление значения, если оно выходит за рамки значений этого типа</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.GetName``1(``0)">
            <summary>Получить наименование значения Enum, либо текстовое представление значения, если оно выходит за рамки значений этого типа</summary>
            <returns>Наименование значения, либо текстовое представление значения, если оно выходит за рамки значений этого типа</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.FindName(System.Enum)">
            <summary>Получить наименование значения Enum, либо null, если оно выходит за рамки значений этого типа</summary>
            <returns>Наименование значения, либо null, если оно выходит за рамки значений этого типа</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.FindName``1(``0)">
            <summary>Получить наименование значения Enum, либо null, если оно выходит за рамки значений этого типа</summary>
            <returns>Наименование значения, либо null, если оно выходит за рамки значений этого типа</returns>
        </member>
        <member name="M:Intermech.Extensions.EnumerationExtension.EnumInRange``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>Проверка, что значение Enum содержится в переданном перечислении его значений</summary>
        </member>
        <member name="T:Intermech.Extensions.FlagsExtensions">
            <summary>
            Расширение системного класса Enum для упрощения обработки флагов
            </summary>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.ToULong(System.Object,System.TypeCode)">
            <summary>Безопасное преобразование Enum в ulong (Int64), не глядя на то, в каком именно типе он хранится</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid</exception>
            <param name="value">Базовый набор флагов</param>
            <param name="typeCode"></param>
            <returns>The given data converted to an ulong</returns>
            <exception cref="T:System.FormatException">
                          <paramref name="value" /> is not in an appropriate format</exception>
            <exception cref="T:System.InvalidCastException">
                          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.-or-The conversion is not supported. </exception>
            <exception cref="T:System.OverflowException">
                          <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" /></exception>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.ToULong``1(``0,System.TypeCode)">
            <summary>Безопасное преобразование Enum в ulong (Int64), не глядя на то, в каком именно типе он хранится</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="value">Базовый набор флагов</param>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.HasNewFlags``1(System.Enum,``0)">
            <summary>Сравнение набора флагов с некоторым базовым набором, проверка, есть в нём новые, отсутствующие в базовом наборе</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="type"></param>
            <param name="value">Базовый набор флагов</param>
            <returns>True, если новые флаги присутствуют</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.HasNewFlags``1(``0,``0)">
            <summary>Сравнение набора флагов с некоторым базовым набором, проверка, есть в нём новые, отсутствующие в базовом наборе</summary>
            <param name="value"></param>
            <param name="compareWith">Базовый набор флагов</param>
            <returns>True, если новые флаги присутствуют</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.AddFlags``1(System.Enum,``0)">
            <summary>Добавить флаги в набор флагов</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values</exception>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="type"></param>
            <param name="value">Флаги, которые требуется добавить в набор</param>
            <returns>Первоначальный набор флагов, в который были удалены переданные флаги</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.AddFlags``1(``0,``0)">
            <summary>Добавить флаги в набор флагов</summary>
            <param name="value"></param>
            <param name="newFlags">Флаги, которые требуется добавить в набор</param>
            <returns>Первоначальный набор флагов, в который были удалены переданные флаги</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.RemoveFlags``1(System.Enum,``0)">
            <summary>Удалить флаги из набора флагов</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values</exception>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="type"></param>
            <param name="value">Флаги, которые требуется удалить</param>
            <returns>Первоначальный набор флагов, из которого были удалены переданные флаги</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.RemoveFlags``1(``0,``0)">
            <summary>Удалить флаги из набора флагов</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            <typeparam name="TEnum">Generic type parameter</typeparam>
            <param name="value"></param>
            <param name="flagsToRemove">Флаги, которые требуется удалить</param>
            <returns>Первоначальный набор флагов, из которого были удалены переданные флаги</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.Values``1(``0)">
            <summary>Перечисление всех "поднятых" флагам enum-а
                    При этом из результата исключается 0,
                    у перечислений помеченных атрибутом Flags возвращаются только индивидуальные значения, комбинации флагов отфильтровываются</summary>
            <exception cref="T:System.ArgumentException">Если тип перечисления не имеет атрибута Flags</exception>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.ForEachPossibleFlag``1(System.Enum)">
            <summary>Итератор по всем возможным флагам типа enum
                         При этом из результата исключается 0 и наборы флагов, возвращаются только индивидуальные битовые флаги</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="type"></param>
            <returns>A list of</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.ForEachFlag``1(System.Enum)">
            <summary>Итератор по всем "поднятым" флагам enum-а</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="type"></param>
            <returns>A list of</returns>
        </member>
        <member name="M:Intermech.Extensions.FlagsExtensions.ForEachNewFlag``1(System.Enum,``0)">
            <summary>Для всех новых флагов (относительно другого набора флага) вызвать лямбда-функцию</summary>
            <typeparam name="T">Generic type parameter</typeparam>
            <param name="type"></param>
            <param name="value">Базовый набор флагов</param>
            <returns>A list of</returns>
        </member>
        <member name="T:Intermech.Extensions.HashSetExtensions">
            <summary>Функции-расширения класса HashSet</summary>
        </member>
        <member name="M:Intermech.Extensions.HashSetExtensions.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>Добавить в HashSet набор значений</summary>
            <typeparam name="T">Тип элемента HashSet-а</typeparam>
            <param name="hashSet">HashSet, в который должно произойти вставка элементов</param>
            <param name="enumerator">Енумератор значений, которые должны быть вставлены в HashSet</param>
            <returns>HashSet, в который должно произойти вставка элементов</returns>
        </member>
        <member name="M:Intermech.Extensions.HashSetExtensions.ToArray``1(System.Collections.Generic.HashSet{``0})">
            <summary>Преобразует HashSet в массив</summary>
            <typeparam name="T">Тип элемента HashSet-а</typeparam>
            <param name="hashSet">HashSet, в который должно произойти вставка элементов</param>
            <returns>Массив из элементов HashSet-а</returns>
        </member>
        <member name="T:Intermech.Extensions.ICapacity">
            <summary>Интерфейс, предоставляющий информацию о числе элементов, которое может содержать коллекция без изменения
                     размера внутреннего массива</summary>
        </member>
        <member name="P:Intermech.Extensions.ICapacity.Capacity">
            <summary>Число элементов, которое может содержать коллекция без изменения размера внутреннего массива</summary>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.ToEnum``1(System.String)">
            <summary>Получить значение перечисления по его имени</summary>
            <typeparam name="TEnum">Тип перечисления</typeparam>
            <param name="enumValue">Имя значения перечисления</param>
            <returns>Enum</returns>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>получить значение перечисления по его имени</summary>
            <typeparam name="TEnum">Тип перечисления</typeparam>
            <param name="enumValue">Имя  значения перечисления</param>
            <param name="defaultValue">Значение по умолчанию</param>
            <returns>Enum</returns>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>Строка пуста. Короткая форма вызова вместо string.IsNullOrEmpty(value) - value.IsEmpty()</summary>
            <param name="value">Значение</param>
            <returns>Возвращает true, если value null или пустая строка</returns>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Короткая форма вызова вместо string.IsNullOrWhiteSpace(value) - value.IsNullOrWhiteSpace()
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Короткая форма вызова вместо !string.IsNullOrWhiteSpace(value) - value.IsNotNullOrWhiteSpace()
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.AppendInBuilder(System.String,System.String[])">
            <summary>
            Добавление к string массива с помощью StringBuilder
            </summary>
            <param name="source"></param>
            <param name="addParts"></param>
            <returns>Результат объединения</returns>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.AppendInBuilder(System.String,System.String,System.String)">
            <summary>
            Добавление к строке другой строки с помощью StringBuilder с или без разделителя
            </summary>
            <param name="source">исходная строка</param>
            <param name="addPart">что добавляем</param>
            <param name="separator">разделитель</param>
            <returns>Результат объединения</returns>
        </member>
        <member name="M:Intermech.Extensions.StringExtensions.NewLine(System.String)">
            <summary>
            Добавление перехода на новую строку в зависимости от среды выполнения
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.Extensions.TypeExtensions.HasInterface``1(System.Type)">
            <summary>
            Проверяет реализует ли текущий тип интерфейс
            </summary>
            <typeparam name="I">Искомый интерфейс</typeparam>
            <param name="source">Проверяемый тип</param>
            <returns></returns>
        </member>
        <member name="T:Intermech.Extensions.IEnumerableThreadingExtensions">
            <summary>Расширения для IEnumerable связанные с многопоточной работой без использования PLINQ.</summary>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableThreadingExtensions.WithCancellation``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.String)">
            <summary>Enumerates with cancellation in this collection with check of Cancellation on every element.</summary>
            <exception cref="T:System.OperationCanceledException">Thrown when an Operation Canceled error condition occurs.</exception>
            <param name="enumerable">The enumerable to act on. This cannot be null.</param>
            <param name="token">The cancellation token.</param>
            <param name="messageOnCancelException">(Optional) The message on cancel exception. This may be null.</param>
            <returns>An enumerator that allows foreach to be used to process with cancellation in this collection. This will never be null.</returns>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableThreadingExtensions.WithCancellation``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Threading.CancellationToken},System.String)">
            <summary>Enumerates with cancellation in this collection with check of Cancellation on every element.</summary>
            <exception cref="T:System.OperationCanceledException">Thrown when an Operation Canceled error condition occurs.</exception>
            <param name="enumerable">The enumerable to act on. This cannot be null.</param>
            <param name="token">The cancellation token.</param>
            <param name="messageOnCancelException">(Optional) The message on cancel exception. This may be null.</param>
            <returns>An enumerator that allows foreach to be used to process with cancellation in this collection. This will never be null.</returns>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableThreadingExtensions.WithCancellation``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationTokenSource,System.String)">
            <summary>Enumerates with cancellation in this collection with check of Cancellation on every element.</summary>
            <exception cref="T:System.OperationCanceledException">Thrown when an Operation Canceled error condition occurs.</exception>
            <param name="enumerable">The enumerable to act on. This cannot be null.</param>
            <param name="cancellationTokenSource">The cancellation token.</param>
            <param name="messageOnCancelException">(Optional) The message on cancel exception. This may be null.</param>
            <returns>An enumerator that allows foreach to be used to process with cancellation in this collection. This will never be null.</returns>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableThreadingExtensions.WithCancellationNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken,System.String)">
            <summary>Enumerates with cancellation in this collection with check of Cancellation on every element.</summary>
            <exception cref="T:System.OperationCanceledException">Thrown when an Operation Canceled error condition occurs.</exception>
            <param name="enumerable">The enumerable to act on. This cannot be null.</param>
            <param name="token">The cancellation token.</param>
            <param name="messageOnCancelException">(Optional) The message on cancel exception. This may be null.</param>
            <returns>An enumerator that allows foreach to be used to process with cancellation in this collection. This will never be null.</returns>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableThreadingExtensions.WithCancellationNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Threading.CancellationToken},System.String)">
            <summary>Enumerates with cancellation in this collection with check of Cancellation on every element.</summary>
            <exception cref="T:System.OperationCanceledException">Thrown when an Operation Canceled error condition occurs.</exception>
            <param name="enumerable">The enumerable to act on. This cannot be null.</param>
            <param name="token">The cancellation token.</param>
            <param name="messageOnCancelException">(Optional) The message on cancel exception. This may be null.</param>
            <returns>An enumerator that allows foreach to be used to process with cancellation in this collection. This will never be null.</returns>
        </member>
        <member name="M:Intermech.Extensions.IEnumerableThreadingExtensions.WithCancellationNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationTokenSource,System.String)">
            <summary>Enumerates with cancellation in this collection with check of Cancellation on every element.</summary>
            <exception cref="T:System.OperationCanceledException">Thrown when an Operation Canceled error condition occurs.</exception>
            <param name="enumerable">The enumerable to act on. This cannot be null.</param>
            <param name="cancellationTokenSource">The cancellation token.</param>
            <param name="messageOnCancelException">(Optional) The message on cancel exception. This may be null.</param>
            <returns>An enumerator that allows foreach to be used to process with cancellation in this collection. This will never be null.</returns>
        </member>
        <member name="T:Intermech.HashCode">
            <summary>Класс для работы с хэшкодами</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="M:Intermech.HashCode.Combine(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Рекомбинация нескольких хэшкодов</summary>
        </member>
        <member name="T:Intermech.Common.StringsHelper">
            <summary>Вспомогательный статический класс для работы со строками.</summary>
        </member>
        <member name="F:Intermech.Common.StringsHelper.DateSeparator">
            <summary>Разделитель в строках с датами.</summary>
        </member>
        <member name="F:Intermech.Common.StringsHelper.DateSeparatorArray">
            Разделитель в строках с датами
        </member>
        <member name="F:Intermech.Common.StringsHelper.DividersHexValues">
            <summary>Разделители между HEX-значениями.</summary>
        </member>
        <member name="F:Intermech.Common.StringsHelper.DividersForWords">
            <summary>Разделители между словами.</summary>
        </member>
        <member name="M:Intermech.Common.StringsHelper.ExtractFrom(System.String,System.String,System.String)">
            <summary>Извлечь подстроку из строки line, при этом подстрока МОЖЕТ БЫТЬ ограничена слева разделителем left, а справа подстрока МОЖЕТ БЫТЬ ограничена разделителем
                     right.</summary>
            <param name="line">Исходная строка.</param>
            <param name="left">Левый разделитель (необязателен)</param>
            <param name="right">Правый разделитель (необязателен)</param>
            <returns>Подстрока или String.Empty.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.ContainsCount(System.String,System.String)">
            <summary>Подсчитать количество вхождений подстроки substring в строке value.</summary>
            <param name="value">Изучаемая строка.</param>
            <param name="substring">Искомая подстрока.</param>
            <returns>Количество вхождений подстроки substring в строку value.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.GetWord(System.String,System.Int32@,System.Collections.Generic.List{System.Char})">
            <summary>Извлечь из строки очередное слово, начиная с указанной позиции, с учётом указанных разделителей слов.</summary>
            <param name="line">Строка.</param>
            <param name="startIndex">[in,out] Стартовая позиция.</param>
            <param name="dividers">Список разделителей (null - получить остаток строки, начиная с позиции startIndex)</param>
            <returns>Искомое слово либо String.Empty.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.GetSizeString(System.Int64)">
            <summary>Вернуть значение указанного размера (байты) в виде строки, с приведением значения к соответствующим величинам (б, Кб, Мб, Гб)</summary>
            <param name="size">Размер (байт)</param>
            <returns>Значение размера в виде строки.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.GetSpeedString(System.Double)">
            <summary>Вернуть значение указанной скорости (байты/сек) в виде строки, с приведением скорости к соответствующим величинам (б/сек, Кб/сек, Мб/сек, Гб/сек)</summary>
            <param name="speed">Скорость (байт/сек)</param>
            <returns>Значение скорости в виде строки.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.GetTimeSpanString(System.TimeSpan,System.Boolean)">
            <summary>Вернуть значение указанного интервала времени в виде строки.</summary>
            <param name="delta">Временной интервал.</param>
            <param name="alignValues">Выравнивать значения (нулями)</param>
            <returns>Значение указанного интервала времени в виде строки.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.Hex2Bytes(System.String)">
            <summary>Преобразовать строку вида hex hex hex в массив байт.</summary>
            <param name="hex">Строка вида hex hex hex.</param>
            <returns>Массив байт.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.Bytes2Hex(System.Byte[])">
            <summary>Преобразовать массив байт в строку вида hex hex hex.</summary>
            <param name="val">Массив байт.</param>
            <returns>Строка вида hex hex hex.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.Hex2String(System.String)">
            <summary>Из строки вида hex hex hex вернуть обычную Unicode-строку.</summary>
            <param name="hex">Строка вида hex hex hex.</param>
            <returns>Строковое значение.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.Hex2Stream(System.String)">
            <summary>Из строки вида hex hex hex вернуть поток.</summary>
            <param name="hex">Строка вида hex hex hex.</param>
            <returns>Значение в виде потока.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.Hex2Identifiers(System.String)">
            <summary>Из строки вида hex hex hex вернуть список найденных идентификаторов.</summary>
            <param name="hex">Строка вида hex hex hex.</param>
            <returns>Список найденных идентификаторов.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.IntToHex(System.Int32)">
            <summary>Преобразовать Int32 в HEX-строку.</summary>
            <param name="value">Значение.</param>
            <returns>HEX-строка.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.IntToHex(System.Int64)">
            <summary>Преобразовать Int64 в HEX-строку.</summary>
            <param name="value">Значение.</param>
            <returns>HEX-строка.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.HexToInt32(System.String)">
            <summary>Преобразовать HEX-строку в Int32.</summary>
            <param name="value">HEX-строка.</param>
            <returns>Int32.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.HexToInt64(System.String)">
            <summary>Преобразовать HEX-строку в Int64.</summary>
            <param name="value">HEX-строка.</param>
            <returns>Int64.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.DateToEditableStr(System.DateTime)">
            <summary>Преобразовать дату в строку для редактирования.</summary>
            <param name="value">Значение.</param>
            <returns>Строка.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.DateFromEditableStr(System.String,System.DateTime)">
            <summary>Преобразовать строку в дату.</summary>
            <param name="value">Значение.</param>
            <param name="defValue">Значение по умолчанию.</param>
            <returns>Дата или значение по умолчанию в случае ошибки.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.DateToStr(System.DateTime)">
            <summary>Преобразовать дату в строку.</summary>
            <param name="value">Значение.</param>
            <returns>Строка.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.DateToStrHex(System.DateTime)">
            <summary>Преобразовать дату в строку (HEX-кодированную, вида YYYY/MM/DD)</summary>
            <param name="value">Значение.</param>
            <returns>Строка (HEX-кодированная, вида YYYY/MM/DD)</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.DateFromStr(System.String)">
            <summary>Преобразовать строку в дату.</summary>
            <param name="value">Значение.</param>
            <returns>Дата.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.DateFromStrHex(System.String)">
            <summary>Преобразовать строку (HEX-кодированную, вида YYYY/MM/DD) в дату.</summary>
            <param name="value">Значение (HEX-кодированное, вида YYYY/MM/DD)</param>
            <returns>Дата (или DateTime.MinValue)</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.TrimString(System.String,System.Int32)">
            <summary>Обрезать часть строки, если её длина превышает указанную величину.</summary>
            <param name="value">Строка.</param>
            <param name="maxLen">Максимально допустимая длина строки.</param>
            <returns>Откорректированная строка.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.SplitString(System.String,System.Int32)">
            <summary>Разделить строку на части указанной максимальной длины.</summary>
            <param name="value">Строка.</param>
            <param name="maxLen">Максимально допустимая длина фрагмента сети.</param>
            <returns>A List{string}</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.Exists(System.String[],System.String,System.Boolean)">
            <summary>Проверить наличие указанного слова в массиве с учётом указанных параметров.</summary>
            <param name="words">Массив проверяемых слов.</param>
            <param name="word">Искомое слово.</param>
            <param name="caseSensitive">true - учитывать регистр букв.</param>
            <returns>true - слово найдено в массиве.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.Exists(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Проверить наличие подстроки в строке с учётом указанных параметров.</summary>
            <param name="value">Строка.</param>
            <param name="subString">Искомая подстрока.</param>
            <param name="caseSensitive">true - учитывать регистр букв.</param>
            <param name="wholeWords">true - искать только вхождение целых слов.</param>
            <returns>true, если подстрока найдена.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.GetSecondFileExtension(System.String)">
            <summary>Извлечь второе расширение из имени файла, если оно есть (например, для "file.ext2.ext1" метод вернёт ".ext2")</summary>
            <param name="fileName">Имя файла.</param>
            <returns>Второе расширение из имени файла, если оно есть.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.IsNumericFileExtension(System.String)">
            <summary>Проверить, является ли расширение файла числом.</summary>
            <param name="fileName">Имя файла.</param>
            <returns>true - расширение является числом.</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.CoalesceNotEmpty(System.String[])">
            <summary> Возвращает либо первое значение, отличное от null и пустой строки.
                      Если ни одно из значение не соответствует этому условия, то возвращается последнее переданное значение</summary>
            <returns>Первая из переданных строк, отличная от null и string.Empty, либо (если ни одна не соответствует) - последняя переданная</returns>
        </member>
        <member name="M:Intermech.Common.StringsHelper.CoalesceNotWhitespace(System.String[])">
            <summary> Возвращает либо первое значение, отличное от null и пустой строки (пробелы не считаются значащими).
                      Если ни одно из значение не соответствует этому условия, то возвращается последнее переданное значение</summary>
            <returns>Первая из переданных строк, непустая (пробелы не считаются значащими) отличная от null и string.Empty,
                     либо (если ни одна не соответствует) - последняя переданная</returns>
        </member>
        <member name="F:Intermech.Configuration.AppSettingsHelper.trueValues">
            <summary>
            Содержит значения bool-параметров, конвертируемые в значение true.
            Массив обязательно должен быть отсортирован по возрастанию.
            </summary>
        </member>
        <member name="T:Intermech.Configuration.ConfigurationManagerCompat">
            <summary>
            Платформенно-независимая реализация ConfigurationManager.
            </summary>
            <remarks>
            Реализация является thread safe.
            </remarks>
        </member>
        <member name="P:Intermech.Configuration.ConfigurationManagerCompat.ConfigurationFile">
            <summary>
            Возвращает или задает путь к файлу конфигурации приложения в формате app.config.
            Значение свойства может быть пустым, если текущая среда выполнения не содержит
            полноценного приложения, а используется для загрузки отдельных сборок (IIS, COM-host и др.)
            </summary>
        </member>
        <member name="P:Intermech.Configuration.ConfigurationManagerCompat.AppSettings">
            <summary>
            Возвращает коллекцию ключей из секции appSettings.
            </summary>
        </member>
        <member name="P:Intermech.Configuration.ConfigurationManagerCompat.ConnectionStrings">
            <summary>
            Возвращает коллекцию строк подключения из секции connectionStrings.
            </summary>
            <returns>Коллекция ключей и их значений</returns>
        </member>
        <member name="M:Intermech.Configuration.ConfigurationManagerCompat.GetConfigurationFile(System.Reflection.Assembly)">
            <summary>
            Возвращает путь к файлу конфигурации указанной сборки в формате app.config
            </summary>
            <param name="assembly">Сборка, для которой требуется конфигурационный файл</param>
            <returns>Путь к файлу конфигурации</returns>
        </member>
        <member name="M:Intermech.Configuration.ConfigurationManagerCompat.LoadAppSettings(System.String)">
            <summary>
            Загружает и возвращает коллекцию ключей из секции appSettings.
            </summary>
            <param name="filePath">Путь к файлу app.config</param>
            <returns>Коллекция ключей и их значений</returns>
        </member>
        <member name="M:Intermech.Configuration.ConfigurationManagerCompat.SaveAppSettings(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Сохраняет коллекцию ключей в секции appSettings.
            </summary>
            <param name="filePath">Путь к файлу app.config</param>
            <param name="appSettings">Коллекция ключей</param>
        </member>
        <member name="M:Intermech.Configuration.ConfigurationManagerCompat.LoadConnectionStrings(System.String)">
            <summary>
            Загружает и возвращает коллекцию строк подключения из секции connectionStrings.
            </summary>
            <param name="filePath">Путь к файлу app.config</param>
            <returns>Коллекция ключей и их значений</returns>
        </member>
        <member name="M:Intermech.Configuration.ConfigurationManagerCompat.SaveConnectionStrings(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Сохраняет коллекцию строк подключения в секции connectionStrings.
            </summary>
            <param name="filePath">Путь к файлу app.config</param>
            <param name="connectionStrings">Коллекция ключей</param>
        </member>
        <member name="M:Intermech.Configuration.ConfigurationManagerCompat.LoadSectionAsXmlString(System.String)">
            <summary>
            Загружает и возвращает в xml-формате указанную секцию.
            </summary>
            <param name="sectionName">Имя секции</param>
            <returns>Содержимое секции в xml-формате или пустая строка, если такая секция не существует</returns>
        </member>
        <member name="M:Intermech.Configuration.ConfigurationManagerCompat.LoadSectionAsXmlString(System.String,System.String)">
            <summary>
            Загружает и возвращает в xml-формате указанную секцию.
            Путь к файлу может быть пустой строкой, в этому случае используется файл конфигурации по умолчанию для приложения.
            </summary>
            <param name="filePath">Путь к файлу app.config. Значение может быть пустой строкой</param>
            <param name="sectionName">Имя секции</param>
            <returns>Содержимое секции в xml-формате или пустая строка, если такая секция не существует</returns>
        </member>
        <member name="T:Intermech.Configuration.IConfigurationManagerPAL">
            <summary>
            Интерфейс PAL-сервиса для платформенно-зависимой реализации <see cref="T:Intermech.Configuration.ConfigurationManagerCompat"/>.
            Реализация должна быть thread safe.
            </summary>
        </member>
        <member name="M:Intermech.Configuration.IConfigurationManagerPAL.LoadAppSettings(System.String)">
            <summary>
            Загружает и возвращает коллекцию ключей из секции appSettings.
            Путь к файлу может быть пустой строкой, в этому случае используется файл конфигурации по умолчанию для приложения.
            </summary>
            <param name="filePath">Путь к файлу app.config. Значение может быть пустой строкой</param>
            <returns>Коллекция ключей и их значений</returns>
        </member>
        <member name="M:Intermech.Configuration.IConfigurationManagerPAL.SaveAppSettings(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Сохраняет коллекцию ключей в секции appSettings.
            Путь к файлу может быть пустой строкой, в этому случае используется файл конфигурации по умолчанию для приложения.
            </summary>
            <param name="filePath">Путь к файлу app.config. Значение может быть пустой строкой</param>
            <param name="appSettings">Коллекция ключей</param>
        </member>
        <member name="M:Intermech.Configuration.IConfigurationManagerPAL.LoadConnectionStrings(System.String)">
            <summary>
            Загружает и возвращает коллекцию строк подключения из секции connectionStrings.
            Путь к файлу может быть пустой строкой, в этому случае используется файл конфигурации по умолчанию для приложения.
            </summary>
            <param name="filePath">Путь к файлу app.config. Значение может быть пустой строкой</param>
            <returns>Коллекция ключей и их значений</returns>
        </member>
        <member name="M:Intermech.Configuration.IConfigurationManagerPAL.SaveConnectionStrings(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Сохраняет коллекцию строк подключения в секции connectionStrings.
            Путь к файлу может быть пустой строкой, в этому случае используется файл конфигурации по умолчанию для приложения.
            </summary>
            <param name="filePath">Путь к файлу app.config. Значение может быть пустой строкой</param>
            <param name="appSettings">Коллекция ключей</param>
        </member>
        <member name="M:Intermech.Configuration.IConfigurationManagerPAL.LoadSectionAsXmlString(System.String,System.String)">
            <summary>
            Загружает и возвращает в xml-формате указанную секцию.
            Путь к файлу может быть пустой строкой, в этому случае используется файл конфигурации по умолчанию для приложения.
            </summary>
            <param name="filePath">Путь к файлу app.config. Значение может быть пустой строкой</param>
            <param name="sectionName">Имя секции</param>
            <returns>Содержимое секции в xml-формате или пустая строка, если такая секция не существует</returns>
        </member>
        <member name="T:Intermech.Configuration.PersistentMachineId">
            <summary>
            Реализует механизм пометки и идентификации текущего компьютера.
            </summary>
        </member>
        <member name="T:Intermech.ControlFlow.Cooperative.NearestCheckpointAction">
            <summary>
            Позволяет реализовать обработчик для задач, когда требуется обработать группу объектов как единое целое, но общее количество
            обрабатываемых объектов изначально неизвестно. В этом и состоит отличие от обработчиков с синхронизацией по барьеру.
            Реализация использует механизм контрольных точек планировщика.
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.Cooperative.NearestCheckpointAction.#ctor(Intermech.ControlFlow.Cooperative.CooperativeScheduler)">
            <summary>
            Создает объект задачи. 
            </summary>
            <param name="scheduler">Планировщик</param>
        </member>
        <member name="M:Intermech.ControlFlow.Cooperative.NearestCheckpointAction.Perform">
            <summary>
            Выполняет задачу.
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.Cooperative.NearestCheckpointAction.DoPerform">
            <summary>
            Позволяет выполнить задачу.
            </summary>
        </member>
        <member name="P:Intermech.ControlFlow.Cooperative.NearestCheckpointAction.Complete">
            <summary>
            Объект синхронизации, устанавливаемый в активное состояние после выполнения задачи.
            </summary>
        </member>
        <member name="P:Intermech.ControlFlow.Cooperative.NearestCheckpointAction.Scheduler">
            <summary>
            Планировщик задачи.
            </summary>
        </member>
        <member name="T:Intermech.ControlFlow.DynamicScope">
            <summary>
            <para>
            Реализует динамическую область видимости переменных по аналогии с тем, как они устроены в LISP. В первом приближении напоминает расширенный механизм глобальных
            переменных. Отличается от лексической области видимости тем, что существует только в момент выполнения приложения, а границы и время существования динамической
            области видимости задает программист, а не компилятор.
            </para>
            <para>
            Динамическая область видимости доступна только тому потоку, в котором она была создана. А каждый поток обладает своей цепочкой динамических областей видимости.
            Поэтому класс <see cref="T:Intermech.ControlFlow.DynamicScope"/>  является thread-safe.
            </para>
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicScope.#ctor">
            <summary>
            Создает новую область видимости переменных и делает ее текущей.
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicScope.Dispose">
            <summary>
            Закрывает текущую область видимости переменных. Все привязки значений переменных, сделанные в этой области видимости будут утеряны, а ресурсы,
            связанные со значениями переменных, будут освобождены с помощью <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="P:Intermech.ControlFlow.DynamicScope.ScopePresent">
            <summary>
            Возвращает true, если динамическая область видимости задана.
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicScope.ScopeRequired">
            <summary>
            Проверяет наличие динамической области видимости, и, при ее отсутствии, сбрасывает исключение.
            </summary>
            <exception cref="T:Intermech.ControlFlow.DynamicScopeException">Ни одна динамическая область видимости не задана</exception>
        </member>
        <member name="T:Intermech.ControlFlow.DynamicScopeSymbol">
            <summary>
            Реализует базовый класс для динамических переменных.
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicScopeSymbol.#ctor">
            <summary>
            Создает новую динамическую переменную.
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicScopeSymbol.Equals(System.Object)">
            <summary>
            Устанавливает идентичность идентификатора переменной и указанного объекта.
            </summary>
            <param name="obj">Объект для сравнения</param>
            <returns>true, если объекты идентичны</returns>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicScopeSymbol.GetHashCode">
            <summary>
            Вычисляет хэш-код для идентификатора переменной.
            </summary>
            <returns>Хэш-код идентификатора переменной</returns>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicScopeSymbol.ToString">
            <summary>
            Возвращает видимое имя динамической переменной.
            </summary>
            <returns>Имя динамической переменной</returns>
        </member>
        <member name="T:Intermech.ControlFlow.DynamicVariable`1">
            <summary>
            Реализует переменные, которые предназначены для использования в динамических областях видимости.
            </summary>
            <typeparam name="T">Тип значений переменной</typeparam>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicVariable`1.#ctor(System.String,`0)">
            <summary>
            Создает динамическую переменную.
            </summary>
            <param name="name">Имя переменной</param>
            <param name="globalValue">Значение по умолчанию, используемое в случае отсутствия определения переменной в текущей области видимости</param>
            <exception cref="T:System.ArgumentNullException">Имя переменной не может быть null</exception>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicVariable`1.ToString">
            <summary>
            Возвращает видимое имя динамической переменной.
            </summary>
            <returns>Имя динамической переменной</returns>
        </member>
        <member name="P:Intermech.ControlFlow.DynamicVariable`1.IsDeclared">
            <summary>
            Возвращает true, если динамическая переменная определена в одной из доступных областей видимости.
            </summary>
        </member>
        <member name="P:Intermech.ControlFlow.DynamicVariable`1.IsDeclaredInCurrentScope">
            <summary>
            Возвращает true, если динамическая переменная определена в текущей области видимости.
            </summary>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicVariable`1.Declare(`0)">
            <summary>
            Объявляет переменную в текущей области видимости и инициализирует ее указанным значением.
            </summary>
            <param name="value">Начальное значение переменной</param>
            <exception cref="T:Intermech.ControlFlow.DynamicScopeException">Переменная уже объявлена в текущей области видимости</exception>
        </member>
        <member name="M:Intermech.ControlFlow.DynamicVariable`1.RemoveDeclaration(System.Boolean)">
            <summary>
            Удаляет объявление переменной из текущей области видимости. Если переменная не объявлена, то метод завершается без ошибок.
            </summary>
            <param name="dispose">Флаг освобождения ресурсов, связанных со значением переменной</param>
            <remarks>
            Этот метод необходимо использовать только в случае исключительной ситуации при объявлении группы связанных между собой динамических переменных.
            Он предназначен для удаления из области видимости частично сформированных переменных.
            </remarks>
        </member>
        <member name="P:Intermech.ControlFlow.DynamicVariable`1.Value">
            <summary>
            Возвращает или задает значение переменной. Если при чтении значения переменной оказалось, что такая переменная не объявлена ни в одной
            доступной области видимости, то будет возвращено глобальное значение по умолчанию. Если при изменении значения переменной оказалось, что
            такая переменная не объявлена ни в одной доступной области видимости, то она будет автоматически объявлена в текущей области видимости.
            </summary>
            <exception cref="T:Intermech.ControlFlow.DynamicScopeException">Область видимости не задана</exception>
        </member>
        <member name="P:Intermech.ControlFlow.DynamicVariable`1.GlobalValue">
            <summary>
            Возвращает или задает глобальное значение по умолчанию, доступное всем потокам. Оно используется в случае чтение значения для не объявленной
            переменной.
            </summary>
            <returns>Глобальное значение по умолчанию</returns>
        </member>
        <member name="E:Intermech.ControlFlow.DynamicVariable`1.GlobalValueChanged">
            <summary>
            Событие, вызываемое при изменении глобального значения по умолчанию для переменной.
            </summary>
        </member>
        <member name="T:Intermech.ComponentModel.EnumCustomConverter">
            <summary>EnumConverter поддерживающий DescriptionAttribute.
            Не поддерживает Enum с [FlagsAttribute]
            </summary>
        </member>
        <member name="F:Intermech.ComponentModel.EnumCustomConverter._enumType">
            <summary>Тип перечисления с которым был создан конвертер</summary>
        </member>
        <member name="F:Intermech.ComponentModel.EnumCustomConverter._customValues">
            <summary>Список допустимых значений, отличный от стандартного.</summary>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetEnumClassDescription(System.Enum)">
            <summary>Получить описание из DescriptionAttribute для типа Enum</summary>
            <param name="value">Значение Enum</param>
            <returns>Описание из атрибута DescriptionAttribute если есть у типа,
            иначе value.GetType().ToString()</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetTypeDescription(System.Type)">
            <summary>Получить описание из DescriptionAttribute для типа</summary>
            <param name="type">Тип</param>
            <returns>Описание из атрибута DescriptionAttribute если есть,
            иначе type.ToString()</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetEnumDescription(System.Enum)">
            <summary>Получить описание из DescriptionAttribute для значения Enum</summary>
            <param name="value">Значение</param>
            <returns>Описание из атрибута DescriptionAttribute если есть,
            иначе value.ToString()</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetEnumDescription(System.Type,System.String)">
            <summary>Получить описание из DescriptionAttribute для значение Enum</summary>
            <param name="valueType">Тип значения Enum</param>
            <param name="valueName">Имя значения</param>
            <returns>Описание из DescriptionAttribute для значения если есть, иначе имя значения</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetEnumCategory(System.Enum)">
            <summary>Получить описание из CategoryAttribute для данного типа Enum</summary>
            <param name="valueType">Тип значения Enum</param>
            <param name="valueName">Имя значения</param>
            <returns>Имя категории из CategoryAttribute для значения если есть, иначе пустую строку</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetEnumValue(System.Type,System.String,System.Object)">
            <summary>Получить значение Enum, основанное на описании из DescriptionAttribute или имени значения.
            Описание имеет приоритет в конфликте.</summary>
            <param name="valueType">Тип Enum</param>
            <param name="descriptionOrName">Описание из DescriptionAttribute или имя значения</param>
            <param name="defaultValue">Значение по умолчанию</param>
            <returns>Значение Enum, основанное на описании из DescriptionAttribute или имени значения</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetEnumValue(System.Type,System.String)">
            <summary>Получить значение Enum, основанное на описании из DescriptionAttribute или имени значения.
            Описание имеет приоритет в конфликте.</summary>
            <param name="valueType">Тип Enum</param>
            <param name="descriptionOrName">Описание из DescriptionAttribute или имя значения</param>
            <returns>Значение Enum, основанное на описании из DescriptionAttribute или имени значения</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.#ctor(System.Type)">
            <summary>Конструктор</summary>
            <param name="type">Тип Enum</param>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.#ctor(System.Type,System.ComponentModel.TypeConverter.StandardValuesCollection)">
            <summary>Конструктор</summary>
            <param name="type">Тип Enum</param>
            <param name="customValues">Список допустимых значений, отличный от стандартного</param>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Преобразует данное значение в заданный тип, используя заданные
            контекстную информацию и информацию о культурной среде</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <param name="culture">Объект CultureInfo. Если передается значение пустая ссылка,
            то предполагается использование информации о культурной среде</param>
            <param name="value">Объект Object, который нужно преобразовать</param>
            <param name="destinationType">Type, в который требуется преобразовать параметр value</param>
            <returns>Объект Object, представляющий преобразованное значение</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Преобразует данный объект в тип этого конвертера,
            используя заданную контекстную информацию и информацию о культурной среде</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <param name="culture">Объект CultureInfo, который нужно использовать в качестве текущей культурной среды</param>
            <param name="value">Объект Object, который нужно преобразовать</param>
            <returns>Объект Object, представляющий преобразованное значение</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Получает значение, показывающее, поддерживает ли этот объект стандартный
            набор значений, которые можно выбрать из списка, используя заданную
            контекстную информацию</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <returns>true, если, чтобы найти стандартный набор значений, поддерживаемых данным объектом, следует
            вызвать метод GetStandardValues, false, если нет</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Возвращает коллекцию стандартных значений для того типа данных,
            которым предназначен этот конвертер типа, если предоставлена контекстная
            информация о формате</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию
            о формате, которая может быть использована для извлечения дополнительных сведений о среде,
             из которой вызывается этот конвертер. Этот параметр или свойства этого параметра
             могут иметь значение пустая ссылка</param>
            <returns>TypeConverter.StandardValuesCollection, содержащий стандартный
            набор допустимых значений, или пустая ссылка, если этот тип данных не поддерживает
            стандартный набор значений</returns>
        </member>
        <member name="T:Intermech.ComponentModel.EnumCustomConverter`1">
            <summary>EnumConverter поддерживающий DescriptionAttribute.
            Не поддерживает Enum с [FlagsAttribute]
            </summary>
        </member>
        <member name="F:Intermech.ComponentModel.EnumCustomConverter`1._customValues">
            <summary>Список допустимых значений, отличный от стандартного.</summary>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetTypeDescription">
            <summary>Получить описание из DescriptionAttribute для типа</summary>
            <returns>Описание из атрибута DescriptionAttribute если есть, иначе type.ToString()</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumDescription(System.Enum)">
            <summary>Получить описание из DescriptionAttribute для значения Enum</summary>
            <param name="value">Значение</param>
            <returns>Описание из атрибута DescriptionAttribute если есть, иначе value.ToString()</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumDescription(`0)">
            <summary>Получить описание из DescriptionAttribute для значения Enum</summary>
            <param name="value">Значение</param>
            <returns>Описание из атрибута DescriptionAttribute если есть, иначе value.ToString()</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumDescription(System.Nullable{`0})">
            <summary>Получить описание из DescriptionAttribute для значения Enum</summary>
            <param name="valueOrNull">Значение или null</param>
            <returns>Описание из атрибута DescriptionAttribute если есть, иначе value.ToString()</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumDescription(System.Type,System.String)">
            <summary>Получить описание из DescriptionAttribute для значение Enum</summary>
            <param name="valueType">Тип значения Enum</param>
            <param name="valueName">Имя значения</param>
            <returns>Описание из DescriptionAttribute для значения если есть, иначе имя значения</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumCategory(System.Enum)">
            <summary>Получить описание из CategoryAttribute для данного типа Enum</summary>
            <param name="value">Значение</param>
            <returns>Имя категории из CategoryAttribute для значения если есть, иначе пустую строку</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumCategory(`0)">
            <summary>Получить описание из CategoryAttribute для данного типа Enum</summary>
            <param name="value">Значение</param>
            <returns>Имя категории из CategoryAttribute для значения если есть, иначе пустую строку</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumCategory(System.Nullable{`0})">
            <summary>Получить описание из CategoryAttribute для данного типа Enum</summary>
            <param name="valueOrNull">Значение или null</param>
            <returns>Имя категории из CategoryAttribute для значения если есть, иначе пустую строку</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumValue(System.String,`0)">
            <summary>Получить значение Enum, основанное на описании из DescriptionAttribute или имени значения. Описание имеет
                     приоритет в конфликте.</summary>
            <param name="descriptionOrName">Описание из DescriptionAttribute или имя значения</param>
            <param name="defaultValue">(Optional) Значение по умолчанию</param>
            <returns>Значение Enum, основанное на описании из DescriptionAttribute или имени значения</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumValueOrNull(System.String)">
            <summary>Получить значение Enum, основанное на описании из DescriptionAttribute или имени значения. Описание имеет
                     приоритет в конфликте.</summary>
            <param name="descriptionOrName">Описание из DescriptionAttribute или имя значения</param>
            <returns>Значение Enum, основанное на описании из DescriptionAttribute или имени значения</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetEnumValueOrThrowException(System.String)">
            <summary>Получить значение Enum, основанное на описании из DescriptionAttribute или имени значения. Описание имеет
                     приоритет в конфликте.</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a Key Not Found error condition occurs</exception>
            <param name="descriptionOrName">Описание из DescriptionAttribute или имя значения</param>
            <returns>Значение Enum, основанное на описании из DescriptionAttribute или имени значения</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.TryGetEnumValue(System.String,`0@)">
            <summary>Получить значение Enum, основанное на описании из DescriptionAttribute или имени значения. Описание имеет
                     приоритет в конфликте.</summary>
            <param name="descriptionOrName">Описание из DescriptionAttribute или имя значения</param>
            <param name="result">[out] Значение Enum, основанное на описании из DescriptionAttribute или имени значения</param>
            <returns>True если значение найдено, иначе false</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.#ctor(System.ComponentModel.TypeConverter.StandardValuesCollection)">
            <summary>Конструктор</summary>
            <param name="customValues">Список допустимых значений, отличный от стандартного</param>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Преобразует данное значение в заданный тип, используя заданные контекстную информацию и информацию о
                     культурной среде</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <param name="culture">Объект CultureInfo. Если передается значение пустая ссылка, то предполагается использование
                                  информации о культурной среде</param>
            <param name="value">Объект Object, который нужно преобразовать</param>
            <param name="destinationType">Type, в который требуется преобразовать параметр value</param>
            <returns>Объект Object, представляющий преобразованное значение</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.ConvertTo``1(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Преобразует данное значение в заданный тип, используя заданные контекстную информацию и информацию о
                     культурной среде</summary>
            <typeparam name="T">Тип, в который требуется преобразовать параметр value</typeparam>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <param name="culture">Объект CultureInfo. Если передается значение пустая ссылка, то предполагается использование
                                  информации о культурной среде</param>
            <param name="value">Объект Object, который нужно преобразовать</param>
            <returns>Объект Object, представляющий преобразованное значение</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Преобразует данный объект в тип этого конвертера, используя заданную контекстную информацию и информацию о
                     культурной среде</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <param name="culture">Объект CultureInfo, который нужно использовать в качестве текущей культурной среды</param>
            <param name="value">Объект Object, который нужно преобразовать</param>
            <returns>Объект Object, представляющий преобразованное значение</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.TypedConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,`0)">
            <summary>Преобразует данный объект в тип этого конвертера, используя заданную контекстную информацию и информацию о
                     культурной среде</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <param name="culture">Объект CultureInfo, который нужно использовать в качестве текущей культурной среды</param>
            <param name="value">Объект Object, который нужно преобразовать</param>
            <param name="defaultValue">(Optional) Значение по умолчанию</param>
            <returns>Значение Enum</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Получает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать
                     из списка, используя заданную контекстную информацию</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате</param>
            <returns>true, если, чтобы найти стандартный набор значений, поддерживаемых данным объектом, следует вызвать метод
                     GetStandardValues, false, если нет</returns>
        </member>
        <member name="M:Intermech.ComponentModel.EnumCustomConverter`1.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>Возвращает коллекцию стандартных значений для того типа данных, которым предназначен этот конвертер типа, если
                     предоставлена контекстная информация о формате</summary>
            <param name="context">ITypeDescriptorContext, предоставляющий контекстную информацию о формате, которая может быть
                                  использована для извлечения дополнительных сведений о среде, из которой вызывается этот
                                  конвертер. Этот параметр или свойства этого параметра могут иметь значение пустая ссылка</param>
            <returns>TypeConverter.StandardValuesCollection, содержащий стандартный набор допустимых значений, или пустая ссылка,
                     если этот тип данных не поддерживает стандартный набор значений</returns>
        </member>
        <member name="M:Intermech.Data.BasicAttributeCodec.EmitDecodeAction(Intermech.Data.IValueBagContainer,Intermech.StringKey,Intermech.Data.ContainerValues,Intermech.Data.ValueBag,Intermech.Data.DecodeAttributesOptions)">
            <summary>
            Определяет правила декодирования значений атрибутов объекта из контейнера значений, прочитанного из файла документа.
            </summary>
            <param name="container">Сервисный объект, предоставляющий доступ к файлу документа</param>
            <param name="attributeKey">Имя атрибута, который требуется декодировать</param>
            <param name="containerValues">Закодированные значения, прочитанные из файла документа</param>
            <param name="attributes">Декодированные атрибуты объекта</param>
            <param name="options">Опции декодирования</param>
            <returns>Объект, реализующий декодирование</returns>
        </member>
        <member name="M:Intermech.Data.BasicAttributeCodec.EmitEncodeAction(Intermech.Data.IValueBagContainer,Intermech.StringKey,Intermech.Data.ValueBag,Intermech.Data.ContainerValues,Intermech.Data.EncodeAttributesOptions)">
            <summary>
            Определяет правила кодирования значений атрибутов объекта в контейнер значений, предназначенный для записи в файл документа.
            </summary>
            <param name="container">Сервисный объект, предоставляющий доступ к файлу документа</param>
            <param name="attributeKey">Имя атрибута, который требуется закодировать</param>
            <param name="attributes">Атрибуты объекта</param>
            <param name="containerValues">Закодированные значения, которые будут записаны в файл документа</param>
            <param name="options">Опции кодирования</param>
            <returns>Объект, реализующий кодирование</returns>
        </member>
        <member name="T:Intermech.Data.ContainerValues">
            <summary>
            Описывает контейнер значений, полученных из файла документа или другого персистентного источника. Сам контейнер может содержать параметры документа, изделия, связи и др.
            </summary>
        </member>
        <member name="M:Intermech.Data.ContainerValues.#ctor(Intermech.Data.ValueBag,System.Boolean)">
            <summary>
            Создает объект.
            </summary>
            <param name="bag">Контейнер значений</param>
            <param name="isOpenMetadata">Признак, разрешено ли добавление произвольных значений в контейнер</param>
        </member>
        <member name="M:Intermech.Data.ContainerValues.Clone">
            <summary>
            Клонирует текущий объект.
            </summary>
            <returns>Клон объекта</returns>
        </member>
        <member name="M:Intermech.Data.ContainerValues.System#ICloneable#Clone">
            <summary>
            Клонирует текущий объект.
            </summary>
            <returns>Клон объекта</returns>
        </member>
        <member name="P:Intermech.Data.ContainerValues.Bag">
            <summary>
            Возвращает контейнер значений.
            </summary>
        </member>
        <member name="P:Intermech.Data.ContainerValues.IsOpenMetadata">
            <summary>
            Возвращает признак, разрешено ли добавление произвольных значений в контейнер.
            </summary>
        </member>
        <member name="T:Intermech.Data.DaoModel.DaoContext">
            <summary>
            <para>Базовый класс для объектов, предоставляющих объектный API для доступа к SQL-базе данных. 
            Реализует подключение к базе данных, создание/обновление метаданных с помошью DDL, а также
            трансляцию объектного API в DML и выполнение с помощью ADO.NET.</para>
            <para>Класс не является thread-safe, клиент класса должен создавать новый экземпляр контекста
            при каждом обращении к базе данных.</para>
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoContext.LazyOpen">
            <summary>
            Инициализирует и открывает контекст, если это еще не было сделано.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoContext.Open">
            <summary>
            Инициализирует и открывает контекст. При открытии первого контекста выполняется создание/обновление метаданных,
            а также другие задачи обслуживания базы данных.
            </summary>
            <exception cref="T:Intermech.Data.DaoModel.DaoException">Контекст уже был инициализирован и открыт</exception>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoContext.OptionalClose">
            <summary>
            Закрывает открытый ранее контекст. Использование этого метода не является обязательным, 
            и типовых случаях работы с контекстом он не вызывается никогда. Как правило,
            метод используется для временного закрытия контекста при необходимости изменения конфигурации контекста.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoContext.DoValidateConfiguration">
            <summary>
            Проверяет корректность конфигурации контекста. Метод вызывается непосредственно перед открытием контекста и запуском всех сервисов.
            Базовая реализация проверяет корректность конфигурации всех сервисов контекста.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoContext.DoRunMaintenance(Intermech.Data.DaoModel.DbMaintenanceInfo)">
            <summary>
            Выполняет создание/обновление метаданных, а также другие задачи обслуживания базы данных. 
            Метод вызывается в процессе открытия первого контекста после подключения к базе данных, но перед запуском сервисов.
            </summary>
            <param name="info">Параметры режима обслуживания и информация о базе данных</param>
        </member>
        <member name="P:Intermech.Data.DaoModel.DaoContext.ConnectionPool">
            <summary>
            Возвращает пул подключений, соответствующий строке подключения. Значение будет пусто, если контекст не был открыт.
            </summary>
        </member>
        <member name="P:Intermech.Data.DaoModel.DaoContext.ConnectionString">
            <summary>
            Возвращает или задает строку подключения. Изменять строку подключения можно только до открытия контекста.
            </summary>
        </member>
        <member name="T:Intermech.Data.DaoModel.DaoContextFactory">
            <summary>
            Позволяет реализовать фабрику объектов, связанных с конкретным экземпляром базы данных.
            Тип является thread safe, когда его состояние заморожено.
            </summary>
        </member>
        <member name="P:Intermech.Data.DaoModel.DaoContextFactory.ConnectionString">
            <summary>
            Возвращает или задает строку подключения.
            </summary>
        </member>
        <member name="P:Intermech.Data.DaoModel.DaoContextFactory.SqlProviderType">
            <summary>
            Возвращает или задает тип провайдера Sql-сервисов.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoContextFactory.ReleaseDatabase">
            <summary>
            Освобождает все ресурсы, связанные с экземпляром базы данных.
            </summary>
        </member>
        <member name="T:Intermech.Data.DaoModel.DaoService">
            <summary>
            Базовый класс для сервисов, реализующих трансляцию объектного API в SQL, выполняемый с помощью ADO.NET.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoService.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoService.ValidateConfiguration">
            <summary>
            Проверяет корректность конфигурации сервиса. Метод вызывается непосредственно перед открытием контекста и запуском всех сервисов.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoService.RunMaintenance(Intermech.Data.DaoModel.DbMaintenanceInfo)">
            <summary>
            Выполняет создание/обновление метаданных, а также другие задачи обслуживания базы данных. 
            Метод вызывается в процессе открытия первого контекста после подключения к базе данных, но перед запуском сервисов.
            </summary>
            <param name="info">Параметры режима обслуживания и информация о базе данных</param>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoService.Start">
            <summary>
            Выполняет запуск сервиса.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DaoService.Stop">
            <summary>
            Выполняет останов сервиса. Метод вызывается при временном закрытии контекста, а также
            в случае ошибки запуска этого сервиса или любого другого сервиса в этом контексте. 
            В типовых случаях работы с контекстом он не вызывается никогда.
            </summary>
        </member>
        <member name="T:Intermech.Data.DaoModel.DaoServiceList">
            <summary>
            Реализует коллекцию сервисов контекста. Она допускает модификацию только в случае закрытого контекста.
            </summary>
        </member>
        <member name="T:Intermech.Data.DaoModel.DbMaintenanceInfo">
            <summary>
            Параметры режима обслуживания базы данных и информация о ней.
            </summary>
        </member>
        <member name="M:Intermech.Data.DaoModel.DbMaintenanceInfo.#ctor(System.Boolean)">
            <summary>
            Создает объект.
            </summary>
            <param name="newDatabase">Признак, что это новый, только что созданный экземпляр базы данных</param>
        </member>
        <member name="P:Intermech.Data.DaoModel.DbMaintenanceInfo.NewDatabase">
            <summary>
            Признак, что это новый, только что созданный экземпляр базы данных.
            </summary>
        </member>
        <member name="T:Intermech.Data.DataTableUtils">
            <summary>
            Содержит утилиты для работы с DataTable.
            </summary>
        </member>
        <member name="P:Intermech.Data.EncodeAttributesOptions.OptimizeEmptyValues">
            <summary>
            Возвращает или задает режим оптимизации записи пустых значений.
            Если на принимающей стороне нет одноименного параметра, то пустое значение не записывается, 
            так как считается, что отсутствующее значение эквивалентно пустому.
            </summary>
        </member>
        <member name="P:Intermech.Data.EncodeAttributesOptions.ReportErrorsOnly">
            <summary>
            Задает или возвращает способ обработки ошибок кодирования для некритических атрибутов. Если это свойство
            установлено в true, то искючения будут подавлены и выведены в прокотол обработки.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Intermech.Data.EncodeConvertibleValueAction.IsOpenMetadataTarget" -->
        <member name="P:Intermech.Data.EncodeConvertibleValueAction.OptimizeEmptyValues">
            <summary>
            Возвращает или задает режим оптимизации записи пустых значений.
            Если на принимающей стороне нет одноименного параметра, то пустое значение не записывается, 
            так как считается, что отсутствующее значение эквивалентно пустому.
            </summary>
        </member>
        <member name="P:Intermech.Data.ICommitableObjectThreadState.CanCommit">
            <summary>
            Возвращает или задает признак, что фиксация транзакции разрешена.
            </summary>
            <remarks>
            Свойство используется вложенными областями видимости транзакции для запрета фиксации всей транзакции в случае,
            если вложенная область видимости не смогла подтвердить свое успешное завершение.
            </remarks>
        </member>
        <member name="P:Intermech.Data.IValueBagFormatter.IsOpenMetadata">
            <summary>
            Признак, поддерживает ли контейнер добавление новых произвольных значений.
            </summary>
        </member>
        <member name="T:Intermech.Data.KeyValueStores.BackupReplica`2">
            <summary>
            Базовый класс для реплики, предназначенной только для создания резервной копии основного хранилища. Одновременно реплика
            может находиться либо в режиме чтения данных из реплики, либо в режиме обновления данных. Если реплика не подключена к
            хранилищу, то она находится в режиме чтения и может быть использована для восстановления содержимого хранилища. Если
            реплика подключена к хранилищу, то она находится в режиме записи и может быть использована только для обновления резервной копии.
            </summary>
            <typeparam name="TKey">Тип ключей в хранилище</typeparam>
            <typeparam name="TValue">Тип значений в хранилище</typeparam>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.BackupReplica`2.ContentVersion">
            <summary>
            Возвращает версию содержимого хранилища.
            </summary>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.BackupReplica`2.UpdateData(Intermech.Data.KeyValueStores.CommitedTransactionData{`0,`1})">
            <summary>
            Выполняет обновление содержимого реплики в конце транзакции.
            Метод вызывается из процесса фиксации транзакции и не должен бросать исключений.
            </summary>
            <param name="transactionData">Зафиксированная транзакция</param>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.BackupReplica`2.DoUpdateData(System.Collections.Generic.IList{Intermech.Data.KeyValueStores.CommitedTransactionData{`0,`1}})">
            <summary>
            Выполняет обновление содержимого реплики. 
            Метод вызывается асинхронно из фонового потока после того, как транзакция была успешно зафиксирована.
            </summary>
            <param name="transactions">Список транзакций, примененных к хранилищу</param>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.BackupReplica`2.DoHandleUpdateError(System.Collections.Generic.IList{Intermech.Data.KeyValueStores.CommitedTransactionData{`0,`1}},System.Exception)">
            <summary>
            Обрабатывает ошибку обновления реплики.
            Метод вызывается асинхронно из фонового потока после того, как транзакция была успешно зафиксирована.
            Метод не должен бросать исключений.
            </summary>
            <param name="transactions">Список журналов транзакций, примененных к хранилищу</param>
            <param name="exception">Необработанное исключение при обновлении содержимого реплики</param>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.CommitedTransactionData`2.ContentVersion">
            <summary>
            Возвращает новую версию содержимого хранилища.
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.CommitedTransactionData`2.Operations">
            <summary>
            Возвращает список операций, выполненных в рамках транзакции.
            </summary>
        </member>
        <member name="T:Intermech.Data.KeyValueStores.IKeyValueContentVersion">
            <summary>
            Общий интерфейс для всех объектов хранилища, содержащих данные. Он позволяет проверить версию хранимых данных.
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.IKeyValueContentVersion.ContentVersion">
            <summary>
            Возвращает версию содержимого хранилища.
            </summary>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.IKeyValueStoreReplica`2.UpdateData(Intermech.Data.KeyValueStores.CommitedTransactionData{`0,`1})">
            <summary>
            Выполняет обновление содержимого реплики в конце транзакции.
            Метод вызывается из процесса фиксации транзакции и не должен бросать исключений.
            </summary>
            <param name="transactionData">Зафиксированная транзакция</param>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.InMemoryKeyValueStoreView`2.ClearData">
            <summary>
            Удаляет все данные представления.
            </summary>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.InMemoryKeyValueStoreView`2.DoClearData">
            <summary>
            Удаляет все данные представления.
            </summary>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.InMemoryKeyValueStoreView`2.UpdateData(Intermech.Data.KeyValueStores.KeyValueStoreOperation{`0,`1})">
            <summary>
            Обновляет представление синхронно с основным хранилищем.
            Метод вызывается из процесса модификации содержимого основного хранилища и не должен бросать исключений.
            </summary>
            <param name="operation">Выполненная операция модификации содержимого основного хранилища</param>
        </member>
        <member name="M:Intermech.Data.KeyValueStores.InMemoryKeyValueStoreView`2.DoUpdateData(Intermech.Data.KeyValueStores.KeyValueStoreOperation{`0,`1})">
            <summary>
            Обновляет представление синхронно с основным хранилищем.
            Метод вызывается из процесса модификации содержимого основного хранилища и не должен бросать исключений.
            </summary>
            <param name="operation">Выполненная операция модификации содержимого основного хранилища</param>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransaction.CanWrite">
            <summary>
            Возвращает признак, что это транзакция поддерживает модификацию данных.
            </summary>
        </member>
        <member name="T:Intermech.Data.KeyValueStores.RwlTransactionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_BeginTransactionTimeout">
            <summary>
              Looks up a localized string similar to Не удалось начать новую транзакцию из-за таймаута ожидания завершения параллельной транзакции..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_CantBeginAnotherTransaction">
            <summary>
              Looks up a localized string similar to Невозможно начать новую транзакцию, пока текущая транзакция не будет завершена..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_CantEndNonexistentTransaction">
            <summary>
              Looks up a localized string similar to Невозможно завершить транзакцию, так как у текущего потока нет активной транзакции..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_ReadTransactionRequired">
            <summary>
              Looks up a localized string similar to Требуется активная транзакция на чтение..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_TransactionIsAlreadyEnded">
            <summary>
              Looks up a localized string similar to Выполнение этой транзакции уже было завершено..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_TransactionIsNotAllowed">
            <summary>
              Looks up a localized string similar to Требуется, чтобы у текущего потока не было активной транзакции..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_TransactionManagerWasTurnedOff">
            <summary>
              Looks up a localized string similar to Менеджер транзакций был выключен..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionResources.SR_WriteTransactionRequired">
            <summary>
              Looks up a localized string similar to Требуется активная транзакция на запись..
            </summary>
        </member>
        <member name="P:Intermech.Data.KeyValueStores.RwlTransactionThreadState.CanCommit">
            <summary>
            Возвращает или задает признак, что фиксация транзакции разрешена.
            </summary>
            <remarks>
            Свойство используется вложенными областями видимости транзакции для запрета фиксации всей транзакции в случае,
            если вложенная область видимости не смогла подтвердить свое успешное завершение.
            </remarks>
        </member>
        <member name="T:Intermech.Data.NamedFlags">
            <summary>
            Библиотека стандартных и часто используемых флагов общего назначения
            </summary>
        </member>
        <member name="F:Intermech.Data.NamedFlags.ReadOnly">
            <summary>
            Признак read-only значения.
            </summary>
        </member>
        <member name="F:Intermech.Data.NamedFlags.ThrowSetException">
            <summary>
            Признак, что при неудачной записи значения в контейнер следует бросать исключение.
            </summary>
        </member>
        <member name="M:Intermech.Data.SectionEntities.SectionIndexer.OnEntityMetadataChanged(Intermech.Data.SectionEntities.SectionEntityData,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Срабатывает, когда изменяется список секций у объекта.
            </summary>
            <remarks>
            Реализация этого обработчика тесно связана с классом <see cref="T:Intermech.Data.EntityDb.Sections.SectionCollection"/>.
            </remarks>
            <param name="entityData">Объект базы данных, у которого изменился список секций</param>
            <param name="e">Аргументы события</param>
        </member>
        <member name="T:Intermech.Data.ValueBag">
            <summary>
            Контейнер значений атрибутов
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueBag.#ctor">
            <summary>
            Создать пустой контейнер значений атрибутов
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueBag.#ctor(System.Int32)">
            <summary>
            Создать пустой контейнер значений атрибутов указанной начальной емкости
            </summary>
            <param name="capacity">Начальная емкость контейнера значений</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.#ctor(System.Collections.Generic.ICollection{Intermech.Data.ValueRecord})">
            <summary>
            Создать контейнер значений атрибутов, заполнить его элементами из указанной коллекции
            </summary>
            <param name="initialItems">Коллекция значений атрибутов</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.#ctor(Intermech.Data.ValueBag)">
            <summary>
            Реализует конструктор клонирования.
            </summary>
            <param name="source">Клонируемый контейнер</param>
        </member>
        <member name="P:Intermech.Data.ValueBag.Keys">
            <summary>
            Ключи параметров, находящихся в контейнере
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueBag.Count">
            <summary>
            Возвращает количество значений в контейнере.
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueBag.IsReadOnly">
            <summary>
            Возвращает признак неизменности содержимого контейнера.
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueBag.IsSynchronized">
            <summary>
            Возвращает true, если доступ к коллекции синхронизирован.
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueBag.SyncRoot">
            <summary>
            Возвращает объект для синхронизации доступа к это коллекции.
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueBag.Add(Intermech.Data.ValueRecord)">
            <summary>
            Добавить новое значение атрибута в контейнер
            </summary>
            <param name="item">Значение, добавляемое в контейнер</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.Add(Intermech.StringKey,System.Object)">
            <summary>
            Добавить новое значение атрибута в контейнер
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="value">Значение</param>
            <returns>Новое значение, добавленное в контейнер</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Add(Intermech.StringKey,System.Object,System.Type)">
            <summary>
            Добавить новое значение атрибута в контейнер с явным указанием типа значения.
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="value">Значение</param>
            <param name="dataType">Тип добавляемого значения</param>
            <returns>Новое значение, добавленное в контейнер</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.AddWithFlag(Intermech.StringKey,System.Object,Intermech.StringKey,System.Boolean)">
            <summary>
            Добавить новое значение атрибута в контейнер и установить у него указанный флаг
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="value">Значение</param>
            <param name="flag">Флаг для установки</param>
            <param name="flagValue">Значение флага для установки</param>
            <returns>Новое значение, добавленное в контейнер</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.AddRange(System.Collections.Generic.ICollection{Intermech.Data.ValueRecord})">
            <summary>
            Добавляет несколько значений в контейнер.
            </summary>
            <param name="items">Коллекция добавляемых значений</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.Import(Intermech.Data.ValueRecord)">
            <summary>
            Добавляет в контейнер копию только значения для указанного атрибута. Никакие флаги и другая метаинформация не копируется.
            </summary>
            <param name="record">Значение атрибута, которое будет скопировано и добавлено в контейнер</param>
            <returns>Значение, добавленное в контейнер</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.ImportRange(System.Collections.Generic.IEnumerable{Intermech.Data.ValueRecord})">
            <summary>
            Добавляет в контейнер копию только значения для указанных атрибутов. Никакие флаги и другая метаинформация не копируется.
            </summary>
            <param name="records">Значения атрибута, которое будуь скопированы и добавлены в контейнер</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.AddCore(Intermech.Data.ValueRecord)">
            <summary>
            Добавить новое значение атрибута в контейнер
            </summary>
            <param name="item">Значение, добавляемое в контейнер</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.CheckNewItem(Intermech.StringKey)">
            <summary>
            Проверить на корректность добавляемое значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.Clear">
            <summary>
            Выполняет очистку контейнера.
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueBag.Remove(Intermech.StringKey)">
            <summary>
            Удалить значение указанного атрибута из контейнера
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <returns>Признак успешного удаления элемента</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Remove(Intermech.Data.ValueRecord)">
            <summary>
            Удаляет указанное значение из контейнера.
            </summary>
            <param name="item">Удаляемое значение</param>
            <returns>Признак успешного удаления элемента</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.CanUpdate(Intermech.StringKey,System.Type,System.Boolean)">
            <summary>
            Проверить, можно ли обновить указанное значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="dataType">Тип данных</param>
            <param name="allowAppendItem">Можно ли дополнить элемент</param>
            <returns>true - элемент можно изменять</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Update(Intermech.StringKey,System.Object)">
            <summary>
            Обновить значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="newValue">Новое значение</param>
            <returns>Обновленное значение атрибута</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Update(Intermech.StringKey,System.Object,System.Boolean)">
            <summary>
            Обновить значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="newValue">Новое значение</param>
            <param name="allowAppendItem">Разрешено ли добавлять новые значения в контейнер</param>
            <returns>Обновленное значение атрибута</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.TryUpdate(Intermech.StringKey,System.Object)">
            <summary>
            Попытаться обновить значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="newValue">Новое значение</param>
            <returns>Обновленное значение атрибута или null</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.TryUpdate(Intermech.StringKey,System.Object,System.Boolean)">
            <summary>
            Попытаться обновить значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="newValue">Новое значение</param>
            <param name="allowAppendItem">Разрешено ли добавлять новые значения в контейнер</param>
            <returns>Обновленное значение атрибута или null</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.UpdateCore(Intermech.StringKey,System.Object)">
            <summary>
            Обновить значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="newValue">Новое значение</param>
            <returns>Изменённое значение атрибута</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.SetFlag(Intermech.StringKey,Intermech.StringKey,System.Boolean)">
            <summary>
            Изменяет значение флага для указанного атрибута.
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="flag">Имя флага</param>
            <param name="flagValue">Новое значение для флага</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.SetFlagForAll(Intermech.StringKey,System.Boolean)">
            <summary>
            Изменяет значение флага у всех значений в контейнере.
            </summary>
            <param name="flag">Имя флага</param>
            <param name="flagValue">Новое значение для флага</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.CopyFlag(Intermech.StringKey,Intermech.Data.NamedFlagCollection,Intermech.StringKey)">
            <summary>
            Копирует и изменяет значение флага для указанного атрибута.
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="source">Источник значения флага</param>
            <param name="flag">Имя флага</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.Clone">
            <summary>
            Клонирует контейнер значений атрибутов
            </summary>
            <returns>Клон контейнера атрибутов</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.System#ICloneable#Clone">
            <summary>
            Клонирует контейнер значений атрибутов
            </summary>
            <returns>Клон контейнера атрибутов</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Copy">
            <summary>
            Получить копию текущего контейнера.
            </summary>
            <returns>Копия текущего контейнера</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.CopyTo(Intermech.Data.ValueRecord[],System.Int32)">
            <summary>
            Копирует содержащиеся значения в массив.
            </summary>
            <param name="array">Массив-приемник</param>
            <param name="arrayIndex">Индекс в массиве, с которого начинать копирование</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Копирует содержащиеся значения в массив.
            </summary>
            <param name="array">Массив-приемник</param>
            <param name="arrayIndex">Индекс в массиве, с которого начинать копирование</param>
        </member>
        <member name="M:Intermech.Data.ValueBag.Contains(Intermech.Data.ValueRecord)">
            <summary>
            Возвращает true, если указанный элемент находится в контейнере.
            </summary>
            <param name="item">Проверяемый элемент</param>
            <returns>Признак наличия указанного элемента в контейнере</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Find(System.Predicate{Intermech.Data.ValueRecord})">
            <summary>
            Отыскать первое подходящее значение атрибута
            </summary>
            <param name="match">Метод, осуществляющий проверку значений атрибутов по требуемым критериям поиска</param>
            <returns>Первое подходящее значение атрибута или null</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.FindAll(System.Predicate{Intermech.Data.ValueRecord})">
            <summary>
            Найти все подходящие значения атрибутов
            </summary>
            <param name="match">Метод, осуществляющий проверку значений атрибутов по требуемым критериям поиска</param>
            <returns>Все подходящие значения атрибутов</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Find(Intermech.StringKey)">
            <summary>
            Отыскать указанное подходящее значение атрибута
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <returns>Найденное значение атрибута или null</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Exists(Intermech.StringKey)">
            <summary>
            Проверяет существование в контейнере указанного атрибута
            </summary>
            <param name="key">Ключ атрибута</param>
            <returns>true, если указанный атрибут присутствует в контейнера, false - если отсутствует</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.GetItemsList">
            <summary>
            Возвращает все значения атрибутов в виде списка.
            </summary>
            <returns>Список с значениями атрибутов</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.GetItemsKeys">
            <summary>
            Возвращает все ключи атрибутов в виде списка.
            </summary>
            <returns>Список с ключами атрибутов</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.ConvertAll``1(System.Converter{Intermech.Data.ValueRecord,``0})">
            <summary>
            Выполняет преобразование значений атрибутов
            </summary>
            <typeparam name="TOutput">Тип объектов после преобразования</typeparam>
            <param name="converter">Метод для выполнения преобразования</param>
            <returns>Список объектов после преобразования</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.GetEnumerator">
            <summary>
            Возвращает перечислитель элементов в коллекции.
            </summary>
            <returns>Объект перечислителя</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.Read``1(Intermech.StringKey,``0)">
            <summary>
            Прочитать значение атрибута в виде указанного типа данных
            </summary>
            <typeparam name="TValue">Требуемый тип данных</typeparam>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <param name="defaultValue">Значение по умолчанию (возвращается, если значение атрибута пустое)</param>
            <returns>Значение атрибута в виде указанного типа данных</returns>
        </member>
        <member name="P:Intermech.Data.ValueBag.HasChanges">
            <summary>
            Возвращает true, если в содержимое контейнера были внесены какие-либо изменения.
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueBag.GetChangedItems">
            <summary>
            Возвращает список добавленных и измененных элементов контейнера.
            </summary>
            <returns>Список элементов контейнера</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.GetChangedItemsKeys">
            <summary>
            Возвращает список ключей добавленных и измененных элементов контейнера.
            </summary>
            <returns>Список с ключами атрибутов</returns>
        </member>
        <member name="M:Intermech.Data.ValueBag.AcceptChanges">
            <summary>
            Фиксирует все сделанные изменения и очищает журнал изменений.
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueBag.AcceptChanges(Intermech.StringKey)">
            <summary>
            Фиксирует сделанные изменения для указанного атрибута.
            </summary>
            <param name="key">Уникальный ключ для идентификации атрибута</param>
            <exception cref="T:System.ArgumentNullException">Ключ атрибута не указан</exception>
        </member>
        <member name="M:Intermech.Data.ValueBag.RejectChanges">
            <summary>
            Отменяет все сделанные изменения и очищает журнал изменений.
            </summary>
        </member>
        <member name="T:Intermech.Data.ValueRecord">
            <summary>
            Значение атрибута объекта/связи
            </summary>
        </member>
        <member name="F:Intermech.Data.ValueRecord.key">
            <summary>
            Ключ, идентифицирующий атрибут объекта/связи
            </summary>
        </member>
        <member name="F:Intermech.Data.ValueRecord.dataType">
            <summary>
            Тип данных
            </summary>
        </member>
        <member name="F:Intermech.Data.ValueRecord.value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="F:Intermech.Data.ValueRecord.bag">
            <summary>
            Контейнер-владелец
            </summary>
        </member>
        <member name="F:Intermech.Data.ValueRecord.flags">
            <summary>
            Коллекция именованных логических флагов
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueRecord.#ctor(Intermech.StringKey,System.Object)">
            <summary>
            Создать значение атрибута объекта/связи
            </summary>
            <param name="key">Ключ, идентифицирующий атрибут объекта/связи</param>
            <param name="value">Значение</param>
        </member>
        <member name="P:Intermech.Data.ValueRecord.Key">
            <summary>
            Ключ, идентифицирующий атрибут объекта/связи
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueRecord.DataType">
            <summary>
            Тип данных
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueRecord.IsNull">
            <summary>
            Проверить, незаполнено ли значение атрибута
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueRecord.IsNullValue(System.Object)">
            <summary>
            Проверить, незаполнено ли значение атрибута.
            </summary>
            <returns>true, если значение атрибута не заполнено</returns>
        </member>
        <member name="P:Intermech.Data.ValueRecord.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueRecord.Bag">
            <summary>
            Контейнер-владелец
            </summary>
        </member>
        <member name="P:Intermech.Data.ValueRecord.Flags">
            <summary>
            Коллекция именованных логических флагов.
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueRecord.Copy">
            <summary>
            Создать точную копию значения атрибута без копирования флагов и другой метаинформации.
            </summary>
            <returns>Копия значения атрибута</returns>
        </member>
        <member name="M:Intermech.Data.ValueRecord.Clone">
            <summary>
            Создать точную копию значения атрибута
            </summary>
            <returns>Точная копия значения</returns>
        </member>
        <member name="M:Intermech.Data.ValueRecord.System#ICloneable#Clone">
            <summary>
            Создать точную копию значения атрибута
            </summary>
            <returns>Точная копия значения</returns>
        </member>
        <member name="M:Intermech.Data.ValueRecord.IsUntypedNullValue(System.Object)">
            <summary>
            Является ли значение пустым (null или DBNull.Value)
            </summary>
            <param name="value">Проверяемое значение</param>
            <returns>true - значение является пустым (null или DBNull.Value)</returns>
        </member>
        <member name="M:Intermech.Data.ValueRecord.Read``1(``0)">
            <summary>
            Получить значение атрибута в виде указанного типа данных
            </summary>
            <typeparam name="TValue">Требуемый тип значения</typeparam>
            <param name="defaultValue">Значение по умолчанию (применяется, если значение атрибута является пустым)</param>
            <returns>Значение атрибута в виде указанного типа данных</returns>
        </member>
        <member name="M:Intermech.Data.ValueRecord.ReadValueOrTypedNull">
            <summary>
            Возвращает значение атрибута или объект типа TypedNull, если значение атрибута не задано.
            </summary>
            <returns>Значение атрибута или объект типа TypedNull</returns>
        </member>
        <member name="M:Intermech.Data.ValueRecord.AddTo(Intermech.Data.ValueBag)">
            <summary>
            Добавляет элемент в контейнер.
            </summary>
            <param name="newBag">Контейнер</param>
        </member>
        <member name="M:Intermech.Data.ValueRecord.Remove">
            <summary>
            Удалить значение атрибута из контейнера
            </summary>
        </member>
        <member name="M:Intermech.Data.ValueRecord.UpdateValue(System.Object)">
            <summary>
            Заменить текущее значение атрибута новым
            </summary>
            <param name="newValue">Новое значение атрибута</param>
        </member>
        <member name="T:Intermech.Diagnostics.Check">
            <summary>Runtime валидация условий</summary>
            <summary>Runtime валидация условий</summary>
            <summary>Runtime валидация условий</summary>
            <summary>Runtime валидация условий</summary>
            <summary>Runtime валидация условий</summary>
            <summary>Runtime валидация условий</summary>
        </member>
        <member name="F:Intermech.Diagnostics.Check.Enabled">
            <summary>Производить ли проверки</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentGenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNull``2(``0,System.String,System.String)">
            <summary>Проверка что аргумент не null</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNull``2(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что аргумент не null</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на значение по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что аргумент не пуст (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение параметра</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что аргумент не пуст (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение параметра</param>
            <param name="emptyValue2">Пустое значение параметра</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentValueNotEmpty(System.IntPtr,System.String,System.String)">
            <summary>Проверка что аргумент IntPtr не пуст (пустое значение отличается от IntPtr.Zero)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == IntPtr.Zero</exception>
            <param name="value">Значение, которое не должно быть равно IntPtr.Zero</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Action{``0},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="checkAction">Метод проверки условия</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="checkAction">Метод проверки условия</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentItemsNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что коллекция не пуста</summary>
            <exception cref="T:System.ArgumentNullException">Если коллекция равна null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы коллекции не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentCollectionNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список не пуст</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если список пуст</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="valueName">Наименование списка</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentReadOnlyCollectionNotEmpty``2(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentEnumerationNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что последовательность не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если последовательность пусто</exception>
            <param name="value">Последовательность, которая не должна быть пустой</param>
            <param name="valueName">Наименование последовательности</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentStringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки в последовательности не null и не пусты</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentStringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не
                                                                        содержащие ничего кроме пробелов</exception>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty или заполнены
                                одними только пробелами</param>
            <param name="valueName">(Optional) Наименование коллекции</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentItemsNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null и не DBNull</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если коллекция содержит null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если коллекция содержит DBNull</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строкового аргумента на null и на равенство string.Empty</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строкового аргумента на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из пробелов</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null и DBNull</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null или == DBNull</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Argument(System.Boolean,System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Argument``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Argument``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Argument``1(System.Boolean,System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Argument``2(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Argument(System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentInRange(System.Boolean,System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentInRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentInRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentGuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит непустой guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentGuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="dictionaryName">Наименование словаря</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ArgumentIsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.GuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит непустой guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.GuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.GenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка значения на значение по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение параметра</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение параметра</param>
            <param name="emptyValue2">Пустое значение параметра</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ValueNotEmpty(System.IntPtr,System.String,System.String)">
            <summary>Проверка что значение IntPtr не пусто (пустое значение отличается от IntPtr.Zero)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == IntPtr.Zero</exception>
            <param name="value">Значение, которое не должно быть равно IntPtr.Zero</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.InRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.InRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.InRange(System.Boolean,System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из
                                пробелов</param>
            <param name="valueName">(Optional) Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null и не DBNull</summary>
            <exception cref="T:System.NullReferenceException">Если объект == null или DBNull</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNull``2(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNull``2(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ItemsNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CollectionNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список не пуст</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если список пуст</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="valueName">Наименование списка</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ReadOnlyCollectionNotEmpty``2(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.EnumerationNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что последовательность не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если последовательность пусто</exception>
            <param name="value">Последовательность, которая не должна быть пустой</param>
            <param name="valueName">Наименование последовательности</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.StringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null и не пусты</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="valueName">Наименование последовательности строк</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.StringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не содержащие ничего
                                                                кроме пробелов</exception>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty или заполнены
                                одними только пробелами</param>
            <param name="valueName">(Optional) Наименование коллекции</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ItemsNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null и не DBNull</summary>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если коллекция содержит null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если коллекция содержит DBNull</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert(System.Boolean,System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert(System.Boolean,System.Func{System.String})">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="messageConstructor">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert``1(``0,System.Func{``0,System.Boolean},System.Func{System.String})">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="messageConstructor">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert``1(System.Boolean,System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert``1(System.Boolean,System.Func{System.String})">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="messageConstructor">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert``1(System.Boolean,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Assert``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ConvertAll``1(System.Collections.IEnumerable,System.IFormatProvider)">
            <summary>Безопасная конвертация, поддерживающая например конвертацию IEnumerable из decimal в IEnumerable из long
                     (обычный Cast выбрасывает exception). Критично для работы с СУБД, например Oracle числа возвращает в виде
                     decimal</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ItemsIs``1(System.Collections.IEnumerable,System.String,System.String)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="T:Intermech.Diagnostics.Check.ObjectMessageFactory">
            <summary>Конструктор сообщения об ошибке для ненулевого объекта</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ItemsIs``1(System.Collections.IEnumerable,System.String,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ItemsIs``1(System.Collections.IEnumerable,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.Exception">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.All``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="T:Intermech.Diagnostics.Check.TemplateMessageFactory`1">
            <summary>Конструктор сообщения об ошибке</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.All``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что перечисление не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если перечисление равно null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если перечисление пусто</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ObjectState(System.Boolean,System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ObjectState``1(``0,System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.NullReferenceException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ObjectState``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.NullReferenceException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.EnumInRange``1(System.Type,``0,System.String,System.String)">
            <summary>Устаревшая версия проверки того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.EnumInRange``1(``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.EnumInRange``1(System.Object,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.EnumInRangeCustom``1(``0,Intermech.Diagnostics.Check.EnumInRangeCustomExceptionFactory{``0})">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="getExceptionFunc">Метод-конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.AllEnumInRange``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="values">Список значений</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Is``1(System.Object,System.String,System.String)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="valueName">Наименование переданного объекта</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Is``1(System.Object,System.String,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="valueName">Наименование переданного объекта</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Is``1(System.Object,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.Exception">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.FileExists(System.String,System.String,System.String)">
            <summary>Проверка того, что файл по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.FileNotFoundException">Если файл отсутствует на диске</exception>
            <param name="value">Путь к файлу</param>
            <param name="valueName">Наименование переданного значения</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Путь к файлу</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.DirectoryExists(System.String,System.String,System.String)">
            <summary>Проверка того, что папка по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Если папка отсутствует на диске</exception>
            <param name="value">Путь к папке</param>
            <param name="valueName">Наименование переданного значения</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Путь к папке</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.StreamNotEmpty(System.IO.Stream,System.String,System.String)">
            <summary>Проверка что стрим не равен null, что имеет ненулевую длину и текущая позиция не находится в конце стрима</summary>
            <exception cref="T:System.InvalidOperationException">Если длина стрима равна 0</exception>
            <exception cref="T:System.ArgumentNullException">Если переданный стрим == null</exception>
            <exception cref="T:System.IO.EndOfStreamException">Если позиция в преданном стриме находится в его конце</exception>
            <param name="value">Стрим</param>
            <param name="valueName">Наименование стрима</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Стрим</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.UriCorrect(System.String,System.String,Intermech.Diagnostics.UriScheme,System.String)">
            <summary>Проверка что строка содержит корректный Uri</summary>
            <exception cref="T:Intermech.Diagnostics.InvalidUriException">Если Uri некорректен</exception>
            <exception cref="T:System.ArgumentNullException">Если строка описывающая Uri == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка описывающая Uri == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка описывающая Uri состоит только из пробелов</exception>
            <param name="value">Строка, содержащая Uri</param>
            <param name="valueName">(Optional) Наименование строки</param>
            <param name="scheme">(Optional) Схема Uri которой должен соответствовать адрес. Например UriScheme.Http для Http
                                 адреса. Если null - схема не проверяется</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Строка, содержащая Uri</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.ContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.IsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotDisposed(System.Object,System.String,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля используется ссылка на объект, которая в Dispose устанавливается в null</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и notNullRef == null</exception>
            <param name="notNullRef">Контрольная ссылка, которая становится равной null после вызова Dispose</param>
            <param name="objectName">(Optional) Имя объекта</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotDisposed``1(System.Object,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля используется ссылка на объект, которая в Dispose устанавливается в null</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и notNullRef == null</exception>
            <param name="notNullRef">Контрольная ссылка, которая становится равной null после вызова Dispose</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotDisposed(System.Boolean,System.String,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля флаг, который устанавливается в True в самом начале Dispose</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и disposedFlag == true</exception>
            <param name="disposedFlag">Флаг, который устанавливается в True в самом начале Dispose</param>
            <param name="objectName">(Optional) Имя объекта</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.NotDisposed``1(System.Boolean,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля флаг, который устанавливается в True в самом начале Dispose</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и disposedFlag == true</exception>
            <param name="disposedFlag">Флаг, который устанавливается в True в самом начале Dispose</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SyncLocked``1(``0,System.String,System.String)">
            <summary>Проверка что объект заблокирован конструкцией lock. Служит для проверки того, что контекст вызова
                потокобезопасен</summary>
            <exception cref="T:System.InvalidOperationException">Если объект не заблокирован конструкцией lock</exception>
            <param name="syncObject">Объект, который должен быть заблокирован конструкцией lock</param>
            <param name="syncObjectName">(Optional) Имя объекта, который используется для блокирования доступа к контексту вызова</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="T:Intermech.Diagnostics.Check.Debug">
            <summary>Debug only валидация условий</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Invoke(System.Action)">
            <summary>Запуск действия только при активном заданном дефайне DEBUG и/или FULL_CHECK</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentNotNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentNotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentGenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentNotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что коллекция не пуста</summary>
            <exception cref="T:System.ArgumentNullException">Если коллекция равна null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на значение по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что аргумент не пуст (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что аргумент не пуст (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение</param>
            <param name="emptyValue2">Пустое значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentValueNotEmpty(System.IntPtr,System.String,System.String)">
            <summary>Проверка что аргумент IntPtr не пуст (пустое значение отличается от IntPtr.Zero)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == IntPtr.Zero</exception>
            <param name="value">Значение, которое не должно быть равно IntPtr.Zero</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления
                                                                       не выполнится переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="action">Метод проверки условия</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentItemsNotNull``1(``0@,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы коллекции не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentCollectionNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список (IList) не пуст</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если список пуст</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="valueName">Наименование списка</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пустой</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentEnumerationNotEmpty(System.Collections.IEnumerable,System.String,System.String)">
            <summary>Проверка что последовательность не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если последовательность пуста</exception>
            <param name="value">Последовательность, которая не должна быть пустой</param>
            <param name="valueName">Наименование последовательности</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentStringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки в последовательности не null и не пусты</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentStringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не
                                                                        содержащие ничего кроме пробелов</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty или заполнены
                                одними только пробелами</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строкового аргумента на null и на равенство string.Empty</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentNotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строкового аргумента на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из
                                пробелов</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null и DBNull</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null или == DBNull</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Argument(System.Boolean,System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Argument``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Argument``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Argument``1(System.Boolean,System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Argument``2(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Argument(System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentInRange(System.Boolean,System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentInRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentInRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentInRange(System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentGuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит непустой guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentGuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="dictionaryName">Наименование словаря</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsRefType``1(System.String,System.String)">
            <summary>Проверка что тип T является ссылочным</summary>
            <param name="valueName">(Optional) Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ArgumentIsValueType``1(System.String,System.String)">
            <summary>Проверка что тип T является типом-значением</summary>
            <param name="valueName">(Optional) Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.GuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит непустой guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.GuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.GenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка значения на значение по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение параметра</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение параметра</param>
            <param name="emptyValue2">Пустое значение параметра</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ValueNotEmpty(System.IntPtr,System.String,System.String)">
            <summary>Проверка что значение IntPtr не пусто (не равно IntPtr.Zero)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == IntPtr.Zero</exception>
            <param name="value">Значение, которое не должно быть равно IntPtr.Zero</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.InRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.InRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.InRange(System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из
                                пробелов</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null и не DBNull</summary>
            <exception cref="T:System.NullReferenceException">Если объект == null или DBNull</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNull``2(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNull``2(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ItemsNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.CollectionNotEmpty(System.Collections.ICollection,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список не пуст</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если список пуст</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="valueName">Наименование списка</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.EnumerationNotEmpty(System.Collections.IEnumerable,System.String,System.String)">
            <summary>Проверка что последовательность не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если последовательность пуста</exception>
            <param name="value">Последовательность, которая не должна быть пуста</param>
            <param name="valueName">Наименование последовательности</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.StringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null и не пусты</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.StringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не содержащие ничего
                                                                кроме пробелов</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty или заполнены
                                одними только пробелами</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ItemsNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null и не DBNull</summary>
            <exception cref="T:System.NullReferenceException">Если условие не выполняется</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Assert(System.Boolean,System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Assert``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Assert``1(System.Boolean,System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Assert``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Assert``1(System.Boolean,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Assert``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ItemsIs``1(System.Collections.IEnumerable,System.String,System.String)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ItemsIs``1(System.Collections.IEnumerable,System.String,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ItemsIs``1(System.Collections.IEnumerable,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.All``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.All``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что перечисление не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если перечисление равно null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если перечисление пусто</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ObjectState(System.Boolean,System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ObjectState``1(``0,System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.NullReferenceException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ObjectState``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.NullReferenceException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.EnumInRange``1(System.Type,``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.EnumInRange``1(``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.EnumInRange``1(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.EnumInRange``1(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.EnumInRangeCustom``1(``0,Intermech.Diagnostics.Check.EnumInRangeCustomExceptionFactory{``0})">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="getExceptionFunc">Метод-конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.AllEnumInRange``1(System.Type,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="values">Список значений</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.AllEnumInRange``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="values">Список значений</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Is``1(System.Object,System.String,System.String)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="valueName">Наименование переданного объекта</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Is``1(System.Object,System.String,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="valueName">Наименование переданного объекта</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.Is``1(System.Object,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.Exception">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.FileExists(System.String,System.String,System.String)">
            <summary>Проверка того, что файл по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.FileNotFoundException">Если файл отсутствует на диске</exception>
            <param name="value">Путь к файлу</param>
            <param name="valueName">Наименование переданного значения</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.DirectoryExists(System.String,System.String,System.String)">
            <summary>Проверка того, что папка по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Если папка отсутствует на диске</exception>
            <param name="value">Путь к папке</param>
            <param name="valueName">Наименование переданного значения</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.StreamNotEmpty(System.IO.Stream,System.String,System.String)">
            <summary>Проверка что стрим не равен null, что имеет ненулевую длину и текущая позиция не находится в конце стрима</summary>
            <exception cref="T:System.ArgumentNullException">Если переданный стрим == null</exception>
            <exception cref="M:Intermech.Diagnostics.Check.Debug.StreamNotEmpty(System.IO.Stream,System.String,System.String)">Если длина стрима равна 0</exception>
            <exception cref="T:System.IO.EndOfStreamException">Если позиция в преданном стриме находится в его конце</exception>
            <param name="value">Стрим</param>
            <param name="valueName">Наименование стрима</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.UriCorrect(System.String,System.String,Intermech.Diagnostics.UriScheme,System.String)">
            <summary>Проверка что строка содержит корректный Uri</summary>
            <exception cref="T:System.ArgumentNullException">Если строка описывающая Uri == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка описывающая Uri == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка описывающая Uri состоит только из пробелов</exception>
            <exception cref="T:Intermech.Diagnostics.InvalidUriException">Если Uri некорректен</exception>
            <param name="value">Строка, содержащая Uri</param>
            <param name="valueName">Наименование строки</param>
            <param name="scheme">(Optional) Схема Uri которой должен соответствовать адрес. Например UriScheme.Http для Http
                                 адреса. Если null - схема не проверяется</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.ContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotDisposed(System.Object,System.String,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля используется ссылка на объект, которая в Dispose устанавливается в null</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и notNullRef == null</exception>
            <param name="notNullRef">Контрольная ссылка, которая становится равной null после вызова Dispose</param>
            <param name="objectName">(Optional) Имя объекта</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotDisposed``1(System.Object,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля используется ссылка на объект, которая в Dispose устанавливается в null</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и notNullRef == null</exception>
            <param name="notNullRef">Контрольная ссылка, которая становится равной null после вызова Dispose</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotDisposed(System.Boolean,System.String,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля флаг, который устанавливается в True в самом начале Dispose</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и disposedFlag == true</exception>
            <param name="disposedFlag">Флаг, который устанавливается в True в самом начале Dispose</param>
            <param name="objectName">(Optional) Имя объекта</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.NotDisposed``1(System.Boolean,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля флаг, который устанавливается в True в самом начале Dispose</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и disposedFlag == true</exception>
            <param name="disposedFlag">Флаг, который устанавливается в True в самом начале Dispose</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsRefType``1(System.String,System.String)">
            <summary>Проверка что тип T является ссылочным</summary>
            <param name="valueName">(Optional) Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.IsValueType``1(System.String,System.String)">
            <summary>Проверка что тип T является типом-значением</summary>
            <param name="valueName">(Optional) Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Debug.SyncLocked``1(``0,System.String,System.String)">
            <summary>Проверка что объект заблокирован конструкцией lock. Служит для проверки того, что контекст вызова
                потокобезопасен</summary>
            <exception cref="T:System.InvalidOperationException">Если объект не заблокирован конструкцией lock</exception>
            <param name="syncObject">Объект, который должен быть заблокирован конструкцией lock</param>
            <param name="syncObjectName">(Optional) Имя объекта, который используется для блокирования доступа к контексту вызова</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateArgumentException(System.String,System.String)">
            <exception cref="T:System.ArgumentException"/>
            <returns cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateArgumentException(System.String)">
            <exception cref="T:System.ArgumentException"/>
            <returns cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateArgumentNullException(System.String,System.String)">
            <exception cref="T:System.ArgumentNullException"/>
            <returns cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateArgumentNullException(System.String)">
            <exception cref="T:System.ArgumentNullException"/>
            <returns cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateArgumentOutOfRangeException(System.String,System.String)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateArgumentOutOfRangeException(System.String)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateNullReferenceException(System.String,System.String)">
            <exception cref="T:System.NullReferenceException"/>
            <returns cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateNullReferenceException(System.String)">
            <exception cref="T:System.NullReferenceException"/>
            <returns cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateInvalidCastException(System.Type,System.String,System.String)">
            <exception cref="T:System.InvalidCastException"/>
            <returns cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateException``1(System.String,System.Func{System.String})">
            <exception><cref>TException</cref></exception>
            <returns><cref>TException</cref></returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateException``1(System.String)">
            <exception><cref>TException</cref></exception>
            <returns><cref>TException</cref></returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.CreateExceptionWithParams``1(System.Object[])">
            <exception><cref>TException</cref></exception>
            <returns><cref>TException</cref></returns>
        </member>
        <member name="T:Intermech.Diagnostics.Check.Optional">
            <summary>Условная валидация условий. Все методы работают только если у класса установлен статический флаг Enabled,
                     иначе значения возвращаются прозрачно без проверки.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.Check.Optional.Enabled">
            <summary>Производить ли опциональные проверки</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Invoke(System.Action)">
            <summary>Запуск действия только при активном заданном дефайне DEBUG и/или FULL_CHECK</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNull``2(``0,System.String,System.String)">
            <summary>Проверка что аргумент не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNull``2(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что аргумент не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentGenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что коллекция не пуста</summary>
            <exception cref="T:System.ArgumentNullException">Если коллекция равна null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на значение по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что аргумент не пуст (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что аргумент не пуст (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение</param>
            <param name="emptyValue2">Пустое значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentValueNotEmpty(System.IntPtr,System.String,System.String)">
            <summary>Проверка что аргумент не пусто (не равно IntPtr.Zero)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == IntPtr.Zero</exception>
            <param name="value">Значение, которое не должно быть равно IntPtr.Zero</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentItemsNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы коллекции не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentCollectionNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список не пуст</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если список пуст</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="valueName">Наименование списка</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentReadOnlyCollectionNotEmpty``2(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentEnumerationNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что последовательность не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если последовательность пусто</exception>
            <param name="value">Последовательность, которая не должна быть пуста</param>
            <param name="valueName">Наименование последовательности</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentStringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки в последовательности не null и не пусты</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Коллекция строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentStringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не
                                                                        содержащие ничего кроме пробелов</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty или заполнены
                                одними только пробелами</param>
            <param name="valueName">(Optional) Наименование коллекции</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentItemsNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null и не DBNull</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если коллекция содержит null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если коллекция содержит DBNull</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строкового аргумента на null и на равенство string.Empty</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строкового аргумента на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из
                                пробелов</param>
            <param name="valueName">(Optional) Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка аргумента на null и DBNull</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null или == DBNull</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Argument(System.Boolean,System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Argument``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Argument``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Argument``1(System.Boolean,System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Argument``2(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>ArgumentException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Argument(System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка аргумента</summary>
            <exception cref="T:System.ArgumentException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentInRange(System.Boolean,System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentInRange(System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentInRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentInRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения аргумента в список допустимых значений</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка будет выполнена</param>
            <param name="condition">Условие проверки значения аргумента</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentGuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит непустой guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentGuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="dictionaryName">Наименование словаря</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ArgumentIsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.GuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит непустой guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.GuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.GenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка объект не null</summary>
            <exception cref="T:System.NullReferenceException">Если объект == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка значения на значение по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение</param>
            <param name="emptyValue2">Пустое значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.InRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.InRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из
                                пробелов</param>
            <param name="valueName">(Optional) Наименование проверяемого параметра</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null и не DBNull</summary>
            <exception cref="T:System.NullReferenceException">Если объект == null или DBNull</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNull``2(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNull``2(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ItemsNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.CollectionNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список не пуст</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если список пуст</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="valueName">Наименование списка</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ReadOnlyCollectionNotEmpty``2(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.EnumerationNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что последовательность не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если последовательность пусто</exception>
            <param name="value">Последовательность, которая не должна быть пуста</param>
            <param name="valueName">Наименование последовательности</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.StringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null и не пусты</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.StringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не содержащие ничего
                                                                кроме пробелов</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty или заполнены
                                одними только пробелами</param>
            <param name="valueName">(Optional) Наименование коллекции</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ItemsNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null и не DBNull</summary>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если коллекция содержит null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если коллекция содержит DBNull</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Assert(System.Boolean,System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Assert``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Assert``1(System.Boolean,System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Assert``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Assert``1(System.Boolean,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Assert``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ItemsIs``1(System.Collections.IEnumerable,System.String,System.String)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ItemsIs``1(System.Collections.IEnumerable,System.String,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ItemsIs``1(System.Collections.IEnumerable,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.All``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.All``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0})">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что перечисление не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если перечисление равно null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если перечисление пусто</exception>
            <param name="value">Коллекция</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ObjectState(System.Boolean,System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ObjectState``1(``0,System.String,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.NullReferenceException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ObjectState``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.NullReferenceException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.EnumInRange``1(System.Type,``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.EnumInRange``1(``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.EnumInRangeCustom``1(``0,Intermech.Diagnostics.Check.EnumInRangeCustomExceptionFactory{``0})">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="getExceptionFunc">Метод-конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.AllEnumInRange``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="values">Список значений</param>
            <param name="valueName">Наименование коллекции</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Is``1(System.Object,System.String,System.String)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="valueName">Наименование переданного объекта</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Is``1(System.Object,System.String,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="valueName">Наименование переданного объекта</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.Is``1(System.Object,Intermech.Diagnostics.Check.ObjectMessageFactory)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.Exception">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.FileExists(System.String,System.String,System.String)">
            <summary>Проверка того, что файл по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.FileNotFoundException">Если файл отсутствует на диске</exception>
            <param name="value">Путь к файлу</param>
            <param name="valueName">Наименование переданного значения</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Путь к файлу</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.DirectoryExists(System.String,System.String,System.String)">
            <summary>Проверка того, что папка по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Если папка отсутствует на диске</exception>
            <param name="value">Путь к папке</param>
            <param name="valueName">Наименование переданного значения</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Путь к папке</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.StreamNotEmpty(System.IO.Stream,System.String,System.String)">
            <summary>Проверка что стрим не равен null, что имеет ненулевую длину и текущая позиция не находится в конце стрима</summary>
            <exception cref="T:System.ArgumentNullException">Если переданный стрим == null</exception>
            <exception cref="M:Intermech.Diagnostics.Check.Optional.StreamNotEmpty(System.IO.Stream,System.String,System.String)">Если длина стрима равна 0</exception>
            <exception cref="T:System.IO.EndOfStreamException">Если позиция в преданном стриме находится в его конце</exception>
            <param name="value">Стрим</param>
            <param name="valueName">Наименование стрима</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Стрим</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.UriCorrect(System.String,System.String,Intermech.Diagnostics.UriScheme,System.String)">
            <summary>Проверка что строка содержит корректный Uri</summary>
            <exception cref="T:System.ArgumentNullException">Если строка описывающая Uri == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка описывающая Uri == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка описывающая Uri состоит только из пробелов</exception>
            <exception cref="T:Intermech.Diagnostics.InvalidUriException">Если Uri некорректен</exception>
            <param name="value">Строка, содержащая Uri</param>
            <param name="valueName">(Optional) Наименование строки</param>
            <param name="scheme">(Optional) Схема Uri которой должен соответствовать адрес. Например UriScheme.Http для Http адреса. Если
                                 null - схема не проверяется</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <returns>Строка, содержащая Uri</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.ContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.IsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="valueName">Наименование проверяемого параметра</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotDisposed(System.Object,System.String,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля используется ссылка на объект, которая в Dispose устанавливается в null</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и notNullRef == null</exception>
            <param name="notNullRef">Контрольная ссылка, которая становится равной null после вызова Dispose</param>
            <param name="objectName">(Optional) Имя объекта</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotDisposed``1(System.Object,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля используется ссылка на объект, которая в Dispose устанавливается в null</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и notNullRef == null</exception>
            <param name="notNullRef">Контрольная ссылка, которая становится равной null после вызова Dispose</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotDisposed(System.Boolean,System.String,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля флаг, который устанавливается в True в самом начале Dispose</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и disposedFlag == true</exception>
            <param name="disposedFlag">Флаг, который устанавливается в True в самом начале Dispose</param>
            <param name="objectName">(Optional) Имя объекта</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Optional.NotDisposed``1(System.Boolean,System.String)">
            <summary>Проверка, что Dispose у объекта ещё не вызывался.
                     Для контроля флаг, который устанавливается в True в самом начале Dispose</summary>
            <exception cref="T:System.ObjectDisposedException">Если Dispose уже был вызван и disposedFlag == true</exception>
            <param name="disposedFlag">Флаг, который устанавливается в True в самом начале Dispose</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
        </member>
        <member name="T:Intermech.Diagnostics.Check.Result">
            <summary>Валидация условий для возвращаемых методами значений. В DEBUG билде проверки осуществляются, иначе - нет</summary>
        </member>
        <member name="F:Intermech.Diagnostics.Check.Result.Enabled">
            <summary>Производить ли проверку значений, возвращаемых методами</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка, являющаяся результатом выполнения метода, содержит guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.GuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка, являющаяся результатом выполнения метода, не содержит непустой guid</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.FormatException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.GuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid являющийся результатом выполнения метода не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNull``1(``0,System.String,System.String)">
            <summary>Проверка что результат выполнения метода не null</summary>
            <exception cref="T:System.NullReferenceException">Если значение, присваиваемое свойству null</exception>
            <param name="value">Значение, которое пытаются присвоить свойству</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что результат выполнения метода не null</summary>
            <exception cref="T:System.NullReferenceException">Если значение, присваиваемое свойству null</exception>
            <param name="value">Значение, которое пытаются присвоить свойству</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода,
                результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.GenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что результат выполнения метода не null</summary>
            <exception cref="T:System.NullReferenceException">Если переданное значение == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода,
                результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что результат выполнения метода не равен значению по-умолчанию для типа T</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение</param>
            <param name="emptyValue2">Пустое значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ValueNotEmpty(System.IntPtr,System.String,System.String)">
            <summary>Проверка что значение IntPtr не пусто (пустое значение отличается от IntPtr.Zero)</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если аргумент == IntPtr.Zero</exception>
            <param name="value">Значение, которое не должно быть равно IntPtr.Zero</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.InRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.InRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.EmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.WhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из пробелов</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что значение, присваиваемое свойству не null и не DBNull</summary>
            <exception cref="T:System.NullReferenceException">Если значение == null или DBNull</exception>
            <param name="value">Значение, которое пытаются присвоить свойству</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNull``2(``0,System.String,System.String)">
            <summary>Проверка что значение, присваиваемое свойству не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Значение, которое должно быть не null</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNull``2(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что значение, присваиваемое свойству не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Значение, которое должно быть не null</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ItemsNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.CollectionNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список не пуст</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если список пуст</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ReadOnlyCollectionNotEmpty``2(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.EnumerationNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что последовательность не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если последовательность пусто</exception>
            <param name="value">Последовательность, которая не должна быть пуста</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.StringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null и не пусты</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.StringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:System.NullReferenceException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не содержащие
                                                                ничего кроме пробелов</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty
                                или заполнены одними только пробелами</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ItemsNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null и не DBNull</summary>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если коллекция содержит null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemNullsNotAllowedException">Если коллекция содержит DBNull</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.Assert``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.Exception">Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение, если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.Assert``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение, если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.Assert``2(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение, если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ItemsIs``1(System.Collections.IEnumerable,System.String,System.String)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ItemsIs``1(System.Collections.IEnumerable,Intermech.Diagnostics.Check.ObjectMessageFactory,System.String)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                               переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.NotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что перечисление не пусто</summary>
            <exception cref="T:System.NullReferenceException">Если перечисление равно null</exception>
            <exception cref="T:Intermech.Diagnostics.CollectionIsEmptyException">Если перечисление пусто</exception>
            <param name="value">Коллекция</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ObjectState``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.NullReferenceException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.EnumInRange``1(System.Type,``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.EnumInRange``1(``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.EnumInRangeCustom``1(``0,Intermech.Diagnostics.Check.EnumInRangeCustomExceptionFactory{``0})">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="getExceptionFunc">Метод-конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.AllEnumInRange``1(System.Type,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="values">Список значений</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.AllEnumInRange``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="values">Список значений</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.Is``1(System.Object,System.String,System.String)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.Is``1(System.Object,Intermech.Diagnostics.Check.ObjectMessageFactory,System.String)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.NullReferenceException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.FileExists(System.String,System.String,System.String)">
            <summary>Проверка того, что файл по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.FileNotFoundException">Если файл отсутствует на диске</exception>
            <param name="value">Путь к файлу</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
            <returns>Путь к файлу</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.DirectoryExists(System.String,System.String,System.String)">
            <summary>Проверка того, что папка по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Если папка отсутствует на диске</exception>
            <param name="value">Путь к папке</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
            <returns>Путь к папке</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.StreamNotEmpty(System.IO.Stream,System.String,System.String)">
            <summary>Проверка что стрим не равен null, что имеет ненулевую длину и текущая позиция не находится в конце стрима</summary>
            <exception cref="T:System.ArgumentNullException">Если переданный стрим == null</exception>
            <exception cref="M:Intermech.Diagnostics.Check.Result.StreamNotEmpty(System.IO.Stream,System.String,System.String)">Если длина стрима равна 0</exception>
            <exception cref="T:System.IO.EndOfStreamException">Если позиция в преданном стриме находится в его конце</exception>
            <param name="value">Стрим</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
            <returns>Стрим</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.UriCorrect(System.String,Intermech.Diagnostics.UriScheme,System.String,System.String)">
            <summary>Проверка что строка содержит корректный Uri</summary>
            <exception cref="T:System.ArgumentNullException">Если строка описывающая Uri == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка описывающая Uri == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка описывающая Uri состоит только из пробелов</exception>
            <exception cref="T:Intermech.Diagnostics.InvalidUriException">Если Uri некорректен</exception>
            <param name="value">Строка, содержащая Uri</param>
            <param name="scheme">(Optional) Схема Uri которой должен соответствовать адрес. Например UriScheme.Http для Http
                                 адреса. Если null - схема не проверяется</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) Наименование строки</param>
            <returns>Строка, содержащая Uri</returns>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.ContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого
                                           контролируется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.Result.IsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="T:Intermech.Diagnostics.Check.SetValue">
            <summary>Валидация условий для значения передаваемого в сеттер свойств. В DEBUG билде проверки осуществляются, иначе - нет</summary>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsGuid(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <param name="guid">Строка, которая должна содержать Guid</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.GuidNotEmpty(System.String,System.String,System.String)">
            <summary>Проверка что строка содержит непустой guid</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <exception cref="T:System.ArgumentException">Если строка не содержит GUID</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если GUID пуст</exception>
            <param name="guid">Строка, которая должна содержать непустой Guid</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование метода, результат работы которого контролируется</param>
            <param name="message">Сообщение об ошибке</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.GuidNotEmpty(System.Guid,System.String,System.String)">
            <summary>Проверка что guid не пуст</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если guid == Guid.Empty</exception>
            <param name="guid">Guid, который не должен быть равен Guid.Empty</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNull``1(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ArgumentGenericNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что значение, присваиваемое свойству, не null</summary>
            <exception cref="T:System.ArgumentNullException">Если аргумент == null</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ValueNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка значения на значение по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ValueNotEmpty``1(``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue">Пустое значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ValueNotEmpty``1(``0,``0,``0,System.String,System.String)">
            <summary>Проверка что значение не пусто (пустое значение отличается от default)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == default(T)</exception>
            <param name="value">Значение, которое не должно быть равно значению по-умолчанию для своего типа</param>
            <param name="emptyValue1">Пустое значение</param>
            <param name="emptyValue2">Пустое значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ValueNotEmpty(System.IntPtr,System.String,System.String)">
            <summary>Проверка что значение IntPtr не пусто (пустое значение отличается от IntPtr.Zero)</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если аргумент == IntPtr.Zero</exception>
            <param name="value">Значение, которое не должно быть равно IntPtr.Zero</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.InRange``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если условие проверки не выполняется</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.InRange``1(``0,System.Func{System.Boolean},System.String,System.String)">
            <summary>Проверка попадания значения в допустимый диапазон</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если значение выходит за рамки допустимого диапазона значений</exception>
            <param name="value">Значение, которое должно попадать в допустимый диапазон</param>
            <param name="condition">Внешний метод проверки попадания значения в допустимый диапазон</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IndexInRange(System.Int32,System.Int32,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IndexInRange(System.Int64,System.Int64,System.String,System.String)">
            <summary>Проверка того, что индекс не выходит за пределы коллекции</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Если индекс выходит за пределы коллекции</exception>
            <param name="index">Значение индекса</param>
            <param name="count">Число элементов коллекции</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ValuesNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка перечисление на отсутствие значений по-умолчанию</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentValueEmptyException">Если в перечислении присутствует значение == default(T)</exception>
            <param name="value">Перечисление значений, которые не должны быть равны значению по-умолчанию для своего типа</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},Intermech.Diagnostics.Check.TemplateMessageFactory{``0},System.String)">
            <summary>Условие, которое должно выполняться для всех элементов перечисления</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление или условие проверки элемента равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">Если для какого-нибудь элемента перечисления не выполнится
                                                                       переданное условие</exception>
            <param name="value">Коллекция</param>
            <param name="predicate">Условие</param>
            <param name="messageFactory">Метод-конструктор сообщения об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>Проверка строки на null и на равенство string.Empty или состоять только из пробелов</summary>
            <exception cref="T:System.ArgumentNullException">Если строка == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка состоит только из пробелов</exception>
            <param name="value">Строковый аргумент, который не должен быть равен null или string.Empty, или состоять только из
                                пробелов</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что объект не null и не DBNull</summary>
            <exception cref="T:System.ArgumentNullException">Если объект == null или DBNull</exception>
            <param name="value">Объект, который не должен быть равен null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNull``2(``0,System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNull``2(System.Nullable{``0},System.String,System.String)">
            <summary>Проверка что объект не null</summary>
            <exception><cref>TException</cref>Если условие не выполняется</exception>
            <param name="value">Объект, который должен быть не null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ItemsNotNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ItemsNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.String,System.String)">
            <summary>Проверка что элементы последовательности не null</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют элементы равные null</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.CollectionNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ListNotEmpty``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>Проверка что список не пуст</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если список пуста</exception>
            <param name="value">Список, который не должен быть пуст</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ReadOnlyCollectionNotEmpty``1(System.Collections.Generic.IReadOnlyCollection{``0},System.String,System.String)">
            <summary>Проверка что коллекция не пуста</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если коллекция пуста</exception>
            <param name="value">Коллекция, которая не должна быть пуста</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.EnumerationNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка что последовательность не пусто</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если последовательность пусто</exception>
            <param name="value">Последовательность, которая не должна быть пуста</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.StringsNotEmpty(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null и не пусты</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null или string.Empty</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.StringsNotWhitespace(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>Проверка что все строки последовательности не null, не пустые строки и не строки состоящие из одних пробелов</summary>
            <exception cref="T:System.ArgumentNullException">Если <see cref="!:value"/> == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если в последовательности присутствуют строки равные null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">Если в последовательности присутствуют пустые строки</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemWhitespaceNotAllowedException">Если в последовательности присутствуют строки не
                                                                        содержащие ничего кроме пробелов</exception>
            <param name="value">Последовательность строк, которые быть не должны быть равны null, string.Empty или заполнены
                                одними только пробелами</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) (Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ItemsNotNullNotDbNull``1(``0,System.String,System.String)">
            <summary>Проверка что элементы коллекции не null и не DBNull</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если коллекция содержит null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">Если коллекция содержит DBNull</exception>
            <param name="value">Коллекция, элементы которой должен быть не null</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.Assert``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception cref="T:System.ArgumentException">Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение, если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.Assert``2(``0,System.Func{``0,System.Boolean},System.Object[])">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение, если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="exceptionParams">Параметры, которые будут переданы в конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.Assert``2(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка условия</summary>
            <exception><cref>TException</cref>: Если условие не выполняется</exception>
            <param name="value">Возвращаемое значение, если проверка пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ItemsIs``1(System.Collections.IEnumerable,System.String,System.String)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ItemsIs``1(System.Collections.IEnumerable,Intermech.Diagnostics.Check.ObjectMessageFactory,System.String)">
            <summary>Проверка того, что все элементы последовательности являются объектами нужного типа</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:System.InvalidCastException">Если обнаружен элемент не являющийся объектом нужного типа</exception>
            <param name="value">Коллекция</param>
            <param name="messageFactory">Метод-фабрика сообщений об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.NotNullNotEmpty``1(``0,System.String,System.String)">
            <summary>Проверка, что перечисление не пусто</summary>
            <exception cref="T:System.ArgumentNullException">Если перечисление равно null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">Если перечисление пусто</exception>
            <param name="value">Коллекция</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ObjectState``1(``0,System.Func{``0,System.Boolean},System.String,System.String)">
            <summary>Проверка состояния объекта (значений полей/свойств)</summary>
            <exception cref="T:System.ArgumentNullException">Если value == null</exception>
            <exception cref="T:System.InvalidOperationException">Если condition == false</exception>
            <param name="value">Значение, которое будет возвращено, если проверка будет пройдена</param>
            <param name="condition">Условие, которое должно быть true</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.EnumInRange``1(System.Type,``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.EnumInRange``1(``0,System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.EnumInRangeCustom``1(``0,Intermech.Diagnostics.Check.EnumInRangeCustomExceptionFactory{``0})">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="value">Значение</param>
            <param name="getExceptionFunc">Метод-конструктор исключительной ситуации</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.AllEnumInRange``1(System.Type,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="type">Тип значения</param>
            <param name="values">Список значений</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.AllEnumInRange``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>Проверка того, что значение является допустимым для данного типа перечня (enum)</summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Если значение является недопустимым</exception>
            <param name="values">Список значений</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.Is``1(System.Object,System.String,System.String)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.ArgumentNullException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.Is``1(System.Object,Intermech.Diagnostics.Check.ObjectMessageFactory,System.String)">
            <summary>Проверка типа объекта, выбрасывает исключительную ситуацию если проверка не пройдена</summary>
            <exception cref="T:System.ArgumentNullException">Если объект null</exception>
            <exception cref="T:System.InvalidCastException">Если тип переданного объекта не <see cref="!:T" /></exception>
            <param name="value">Проверяемый объект</param>
            <param name="messageFactory">Внешняя ф-ия получения сообщения об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.FileExists(System.String,System.String,System.String)">
            <summary>Проверка того, что файл по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.FileNotFoundException">Если файл отсутствует на диске</exception>
            <param name="value">Путь к файлу</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.DirectoryExists(System.String,System.String,System.String)">
            <summary>Проверка того, что папка по указанному пути существует на диске</summary>
            <exception cref="T:System.ArgumentNullException">Если указанный путь == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если указанный путь == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если указанный путь состоит только из пробелов</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Если папка отсутствует на диске</exception>
            <param name="value">Путь к папке</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.StreamNotEmpty(System.IO.Stream,System.String,System.String)">
            <summary>Проверка что стрим не равен null, что имеет ненулевую длину и текущая позиция не находится в конце стрима</summary>
            <exception cref="T:System.ArgumentNullException">Если переданный стрим == null</exception>
            <exception cref="M:Intermech.Diagnostics.Check.SetValue.StreamNotEmpty(System.IO.Stream,System.String,System.String)">Если длина стрима равна 0</exception>
            <exception cref="T:System.IO.EndOfStreamException">Если позиция в преданном стриме находится в его конце</exception>
            <param name="value">Стрим</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, значение которого меняется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.UriCorrect(System.String,Intermech.Diagnostics.UriScheme,System.String,System.String)">
            <summary>Проверка что строка содержит корректный Uri</summary>
            <exception cref="T:System.ArgumentNullException">Если строка описывающая Uri == null</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">Если строка описывающая Uri == string.Empty</exception>
            <exception cref="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">Если строка описывающая Uri состоит только из пробелов</exception>
            <exception cref="T:Intermech.Diagnostics.InvalidUriException">Если Uri некорректен</exception>
            <param name="value">Строка, содержащая Uri</param>
            <param name="scheme">(Optional) Схема Uri которой должен соответствовать адрес. Например UriScheme.Http для Http адреса. Если
                                 null - схема не проверяется</param>
            <param name="message">(Optional) Сообщение об ошибке</param>
            <param name="callerMemberName">(Optional) Наименование строки</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.ContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.String,System.String)">
            <summary>Проверка что в словаре присутствует запись с переданным ключом</summary>
            <exception cref="T:Intermech.Diagnostics.ArgumentItemNotFoundException">Если ключ не найден</exception>
            <param name="dictionary">Словарь</param>
            <param name="key">Ключ, который должен присутствовать в словаре</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsZeroOrPositive(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsZeroOrPositive(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsZeroOrPositive(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsZeroOrPositive(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение равно или больше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение меньше нуля</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsNegative(System.Int32,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsNegative(System.Int64,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsNegative(System.Single,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="M:Intermech.Diagnostics.Check.SetValue.IsNegative(System.Double,System.String,System.String)">
            <summary>Проверка того, что значение меньше нуля</summary>
            <exception cref="T:Intermech.Diagnostics.ValueOutOfRangeException">Если переданное значение больше или равно нулю</exception>
            <param name="value">Значение</param>
            <param name="message">Сообщение об ошибке</param>
            <param name="callerMemberName">(Заполняется компилятором) Наименование свойства, чьё значение изменяется</param>
        </member>
        <member name="T:Intermech.Diagnostics.CompositeEventLogWriter">
            <summary>
            Класс составного объекта для записи в журнал событий.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.CompositeEventLogWriter.#ctor(System.Collections.Generic.IEnumerable{Intermech.Diagnostics.IEventLogWriter})">
            <summary>
            Создает объект.
            </summary>
            <param name="writers">Коллекция используемых писателей</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="writers"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.CompositeEventLogWriter.DoWriteMessage(System.String,Intermech.Diagnostics.EventLogItemType)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
            <param name="itemType">Тип события</param>
        </member>
        <member name="M:Intermech.Diagnostics.CompositeEventLogWriter.DoWriteItem(Intermech.Diagnostics.EventLogItem)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="item">Запись о событии</param>
        </member>
        <member name="T:Intermech.Diagnostics.CompressedStackFrame">
            <summary>
            Реализует упрощенное представление кадра стека вызова, достаточное для восстановления точного места падения исключения.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.CompressedStackFrame.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Создает объект.
            </summary>
            <param name="assemblyFileName">Имя файла сборки без пути</param>
            <param name="methodToken">Уникальный токен метода внутри сборки</param>
            <param name="ilOffset">Смещение от начала IL-кода метода в байтах до текущей выполняемой инструкции</param>
        </member>
        <member name="P:Intermech.Diagnostics.CompressedStackFrame.AssemblyFileName">
            <summary>
            Возвращает имя файла сборки без пути.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.CompressedStackFrame.MethodToken">
            <summary>
            Возвращает уникальный токен метода внутри сборки.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.CompressedStackFrame.ILOffset">
            <summary>
            Возвращает смещение от начала IL-кода метода в байтах до текущей выполняемой инструкции. Это смещение
            может быть аппроксимацией в зависимости от режима работы JIT.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.CompressedStackTrace">
            <summary>
            Реализует упрощенное представление стека вызова, достаточное для восстановления точного места падения исключения.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.CompressedStackTrace.#ctor(System.Diagnostics.StackTrace)">
            <summary>
            Создает объект.
            </summary>
            <param name="stackTrace">Полный стек вызова</param>
        </member>
        <member name="P:Intermech.Diagnostics.CompressedStackTrace.FrameCount">
            <summary>
            Возвращает количество кадров в стеке.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.CompressedStackTrace.TryGetFrame(System.Int32)">
            <summary>
            Возвращает указанный кадр стека.
            </summary>
            <param name="frameIndex">Индекс кадра в стеке</param>
            <returns>Кадр стека или null, если эта информация недоступна</returns>
            <exception cref="T:System.ArgumentNullException">Индекс кадра находится вне допустимого диапазона</exception>
        </member>
        <member name="T:Intermech.Diagnostics.NotEmptyAttribute">
            <summary>
            Признак того, что описываемая сущность не может иметь пустое значение.
              идентификаторы: значение не может иметь неизвестное или неопределённое значение, например идентификатор объекта не может равняться Consts.UnknownObjectId, Consts.NoObject или Consts.NavigatorUndefinedObjectID
              строки: строка быть отличной от string.Empty
              коллекция/перечисление/список/массив: в нём должен быть хотя бы один элемент.
              Object: не может быть равен DBNull
              Guid: не может быть равен Guid.Empty
              ObligatoryObjectAttribute: не может равняться ObligatoryObjectAttributes.Zero или ObligatoryObjectAttributes.None.
              и так далее по аналогии для всех других типов.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.GuidStrAttribute">
            <summary>Признак того, что описываемая строка сущность должна содержать Guid</summary>
        </member>
        <member name="T:Intermech.Diagnostics.NotEmptyGuidAttribute">
            <summary>Признак того, что описываемая строка сущность должна содержать непустой Guid</summary>
        </member>
        <member name="T:Intermech.Diagnostics.CanBeEmptyAttribute">
            <summary>
            Признак того, что описываемая сущность может иметь пустое значение.
              идентификаторы: значение может иметь неизвестное или неопределённое значение, например идентификатор объекта может равняться Consts.UnknownObjectId, Consts.NoObject или Consts.NavigatorUndefinedObjectID
              строки: строка может быть равна string.Empty
              коллекция/перечисление/список/массив: в нём может не быть элементов.
              Object: может быть равен DBNull
              Guid: может быть равен Guid.Empty
              ObligatoryObjectAttribute: может равняться ObligatoryObjectAttributes.Zero или ObligatoryObjectAttributes.None.
              и так далее по аналогии для всех других типов.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemNotEmptyAttribute">
            <summary>
            Признак того, что все элементы описываемой коллекции/перечислении/списка/массива не могут иметь пустое значение.
              идентификаторы: значение не может иметь неизвестное или неопределённое значение, например идентификатор объекта не может равняться Consts.UnknownObjectId, Consts.NoObject или Consts.NavigatorUndefinedObjectID
              строки: строка быть отличной от string.Empty
              коллекция/перечисление/список/массив: в нём должен быть хотя бы один элемент.
              Object: не может быть равен DBNull
              Guid: не может быть равен Guid.Empty
              ObligatoryObjectAttribute: не может равняться ObligatoryObjectAttributes.Zero или ObligatoryObjectAttributes.None.
              и так далее по аналогии для всех других типов.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemCanBeEmptyAttribute">
            <summary>
            Признак того, что все элементы описываемой коллекции/перечислении/списка/массива могут иметь пустое значение.
              идентификаторы: значение может иметь неизвестное или неопределённое значение, например идентификатор объекта может равняться Consts.UnknownObjectId, Consts.NoObject или Consts.NavigatorUndefinedObjectID
              строки: строка может быть равна string.Empty
              коллекция/перечисление/список/массив: в нём может не быть элементов.
              Object: может быть равен DBNull
              Guid: может быть равен Guid.Empty
              ObligatoryObjectAttribute: может равняться ObligatoryObjectAttributes.Zero или ObligatoryObjectAttributes.None.
              и так далее по аналогии для всех других типов.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.NotWhitespaceAttribute">
            <summary>Признак того, что описываемая строка должна иметь хотя бы один символ, отличный от пробела</summary>
        </member>
        <member name="T:Intermech.Diagnostics.FileExistsAttribute">
            <summary>Признак того, что файл по указанному пути должен существовать на диске</summary>
        </member>
        <member name="T:Intermech.Diagnostics.DirectoryExistsAttribute">
            <summary>Признак того, что папка по указанному пути должна существовать на диске</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemNotWhitespaceAttribute">
            <summary>Признак того, что строки в описываемой коллекции/перечислении/списка/массива должны иметь хотя бы один символ, отличный от пробела</summary>
        </member>
        <member name="T:Intermech.Diagnostics.NotNullAfterAttribute">
            <summary>Признак того, что свойство или поле становится отличным от Null после вызова метода, имя которого передаётся в качестве параметра</summary>
        </member>
        <member name="T:Intermech.Diagnostics.NullBeforeAttribute">
            <summary>Признак того, что значение свойства или поля равно Null до вызова метода, имя которого передаётся в качестве параметра</summary>
        </member>
        <member name="T:Intermech.Diagnostics.PositiveNumberAttribute">
            <summary>Признак того, что описываемое число больше нуля</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ZeroOrPositiveNumberAttribute">
            <summary>Признак того, что описываемое число равно или больше нуля</summary>
        </member>
        <member name="T:Intermech.Diagnostics.NegativeNumberAttribute">
            <summary>Признак того, что описываемое число меньше нуля</summary>
        </member>
        <member name="T:Intermech.Diagnostics.SortedAttribute">
            <summary>Признак того, что описанное перечисление отсортировано </summary>
        </member>
        <member name="T:Intermech.Diagnostics.ErrorInfo">
            <summary>
            Реализует объект для хранения информации об ошибках. Используется в задачах вывода ошибок в логи, журналы и т.д.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.ErrorInfo.#ctor(System.String)">
            <summary>
            Создает объект.
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <exception cref="T:System.ArgumentException">Не задано сообщение об ошибке</exception>
        </member>
        <member name="M:Intermech.Diagnostics.ErrorInfo.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Создает объект.
            </summary>
            <param name="message">Сообщение об ошибке</param>
            <param name="cause">Причина ошибки. Может быть не задана</param>
            <param name="source">Источник ошибки. Может быть не задан</param>
            <param name="exception">Объект исключения. Может быть не задан</param>
            <exception cref="T:System.ArgumentException">Не задано сообщение об ошибке</exception>
        </member>
        <member name="M:Intermech.Diagnostics.ErrorInfo.FromException(System.Exception,System.String)">
            <summary>
            Создает объект ошибки из объекта исключения.
            </summary>
            <param name="exception">Объект исключения</param>
            <param name="message">Сообщение об ошибке. Может быть не задано</param>
            <returns>Созданных объект ошибки</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="P:Intermech.Diagnostics.ErrorInfo.Message">
            <summary>
            Возвращает сообщение об ошибке.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.ErrorInfo.Cause">
            <summary>
            Возвращает причину ошибки. Может быть не задана.
            Если ошибка создана из исключения, то здесь содержится текст исключения.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.ErrorInfo.Source">
            <summary>
            Возвращает источник ошибки. Может быть не задан.
            Если ошибка создана из исключения, то здесь содержится стек вызова.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.ErrorInfo.Exception">
            <summary>
            Возвращает объект исключения. Может быть не задан.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.ErrorInfo.ToString">
            <summary>
            Возвращает текстовое представление объекта.
            </summary>
            <returns>Сообщение об ошибке</returns>
        </member>
        <member name="T:Intermech.Diagnostics.ErrorReporterAdapter">
            <summary>
            Реализует адаптер для вывода списков ошибок через систему вывода многострочных сообщений.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.ErrorReporterAdapter.#ctor(Intermech.Diagnostics.IMessageReporter)">
            <summary>
            Создает объект.
            </summary>
            <param name="messageReporter">Объект для вывода многострочных сообщений</param>
            <exception cref="T:System.ArgumentNullException">messageReporter</exception>
        </member>
        <member name="P:Intermech.Diagnostics.ErrorReporterAdapter.CaptionGenerator">
            <summary>
            Возвращает или задает метод для формирования заголовка списка ошибок. Может быть не задан.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.ErrorReporterAdapter.ReportErrors(System.Collections.Generic.ICollection{Intermech.Diagnostics.ErrorInfo})">
            <summary>
            Выводит список ошибок в журнал в форме, пригодной для чтения пользователем.
            </summary>
            <param name="errors">Коллекция ошибок</param>
            <exception cref="T:System.ArgumentNullException">errors</exception>
        </member>
        <member name="T:Intermech.Diagnostics.EventLogItem">
            <summary>
            Запись о событии для журнала событий.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogItem.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogItem.#ctor(System.String,Intermech.Diagnostics.EventLogItemType)">
            <summary>
            Создает объект.
            </summary>
            <param name="messageText">Текст сообщения</param>
            <param name="itemType">Тип события</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="messageText"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.Diagnostics.EventLogItem.MessageText">
            <summary>
            Возвращает или задает текст сообщения.
            </summary>
            <exception cref="T:ArgumentNullException">Текст сообщения не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.Diagnostics.EventLogItem.ItemType">
            <summary>
            Возвращает или задает тип записи в журнале событий.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.EventLogItemType">
            <summary>
            Тип записи в журнале событий
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.EventLogWriterBase">
            <summary>
            Базовый класс объекта для записи в журнал событий.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterBase.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.EventLogWriterBase.SilentMode">
            <summary>
            Возвращает или задает признак тихого режима работы, при котором подавляются все исключения при записи события в системный журнал.
            По умолчанию тихий режим включен.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterBase.Write(System.String)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterBase.Write(System.String,Intermech.Diagnostics.EventLogItemType)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
            <param name="itemType">Тип события</param>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterBase.WriteItem(Intermech.Diagnostics.EventLogItem)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="item">Запись о событии</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="item"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterBase.DoWriteMessage(System.String,Intermech.Diagnostics.EventLogItemType)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
            <param name="itemType">Тип события</param>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterBase.DoWriteItem(Intermech.Diagnostics.EventLogItem)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="item">Запись о событии</param>
        </member>
        <member name="T:Intermech.Diagnostics.EventLogWriters">
            <summary>
            Фабрика объектов для записи в журналы событий приложения различной природы.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriters.CreateTextFileWriter(System.String)">
            <summary>
            Создает объект для записи событий в текстовый файл.
            </summary>
            <param name="filePath">Путь к файлу журнала событий</param>
            <returns>Объект для записи событий в текстовый файл</returns>
            <exception cref="T:System.ArgumentException">Параметр <paramref name="filePath"/> не должен быть пуст или равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriters.CreateSystemLogWriter(System.String)">
            <summary>
            Создает объект для записи событий в журнал операционной системы.
            </summary>
            <param name="sourceName">Имя источника событий, отображаемое в журнале событий. Как правило, это название приложения</param>
            <returns>Объект для записи событий в журнал операционной системы</returns>
            <exception cref="T:System.ArgumentException">Параметр <paramref name="sourceName"/> не должен быть равен null или пустой строке</exception>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriters.Synchronized(Intermech.Diagnostics.IEventLogWriter)">
            <summary>
            Создает обертку вокруг указанного объекта, делая его потокобезопасным.
            </summary>
            <param name="eventLogWriter">Объект для записи в журнал событий приложения</param>
            <returns>Потокобезопасный объект для записи в журнал событий приложения</returns>
        </member>
        <member name="P:Intermech.Diagnostics.EventLogWriters.Null">
            <summary>
            Возвращает объект для записи в журнал событий, который можно использовать в качестве заглушки, если запись в журнал событий не требуется.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.EventLogWriterSyncWrapper">
            <summary>
            Обертка для объектов типа IEventLogWriter, позволяющая сделать их thread safe.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterSyncWrapper.#ctor(Intermech.Diagnostics.IEventLogWriter)">
            <summary>
            Создает объект.
            </summary>
            <param name="writer">Писатель, которого необходимо сделать thread safe</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="writer"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterSyncWrapper.Unwrap">
            <summary>
            Возвращает объект, скрытый за оберткой.
            </summary>
            <returns>Объект, скрытый за оберткой</returns>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterSyncWrapper.DoWriteMessage(System.String,Intermech.Diagnostics.EventLogItemType)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
            <param name="itemType">Тип события</param>
        </member>
        <member name="M:Intermech.Diagnostics.EventLogWriterSyncWrapper.DoWriteItem(Intermech.Diagnostics.EventLogItem)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="item">Запись о событии</param>
        </member>
        <member name="T:Intermech.Diagnostics.ExceptionServices">
            <summary>
            Предоставляет сервисы по упрощению обработки исключений.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.ExceptionServices.StackTraceBuilderFactory">
            <summary>
            Возвращает или задает фабрику объектов для преобразования stack trace в текстовое представление.
            </summary>
            <exception cref="T:ArgumentNullException">Новое значение свойства не должно быть равно null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.ExceptionServices.CreateStackTraceBuilder">
            <summary>
            Создает объект для преобразования stack trace в текстовое представление.
            </summary>
            <returns>Объект для преобразования stack trace в текстовое представление</returns>
        </member>
        <member name="M:Intermech.Diagnostics.ExceptionServices.GetExtendedStackTrace(System.Exception)">
            <summary>
            Возвращает расширенное текстовое представление для stack trace, которое содержит дополнительные технические сведения,
            предоставленные объектом типа StackTraceBuilder.
            </summary>
            <param name="exception">Объект исключения</param>
            <returns>Текстовое представление stack trace</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="exception"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.ExceptionServices.GetExtendedExceptionText(System.Exception,System.String)">
            <summary>
            Возвращает расширенное многострочное текстовое представление для исключения, которое содержит текст сообщения, тип исключения и stack trace.
            </summary>
            <param name="exception">Объект исключения</param>
            <param name="preamble">Вступление, которое будет использовано перед основным текстом. Может быть не задано</param>
            <returns>Текстовое представление для исключения</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="exception"/> не должен быть равен null</exception>
        </member>
        <member name="T:Intermech.Diagnostics.FatalExceptionGenerator">
            <summary>
            Класс для имитации падения необработанного исключения в приложении.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FatalExceptionGenerator.Throw">
            <summary>
            Бросает необработанное исключение в фоновом потоке приложения.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FatalExceptionGenerator.Throw(System.Exception)">
            <summary>
            Бросает необработанное исключение в фоновом потоке приложения.
            </summary>
            <param name="exception">Бросаемое исключение</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="exception"/> не должен быть равен null</exception>
        </member>
        <member name="T:Intermech.Diagnostics.FatalExceptionLogger">
            <summary>
            Позволяет сохранить информацию о необработанном исключении в журнал событий приложения перед падением приложения.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FatalExceptionLogger.#ctor(Intermech.Diagnostics.IEventLogWriter)">
            <summary>
            Создает объект.
            </summary>
            <param name="eventLogWriter">Писатель в журнал событий приложения</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="eventLogWriter"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.Diagnostics.FatalExceptionLogger.ApplicationName">
            <summary>
            Возвращает или задает имя приложения для вывода в сообщении о необработанном исключении.
            Значение свойства может быть не задано. По умолчанию свойство инициализируется именем из текущего AppDomain.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.FatalExceptionLogger.Recommendation">
            <summary>
            Возвращает или задает рекомендацию для пользователя для вывода в сообщении о необработанном исключении.
            Значение свойства может быть не задано.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FatalExceptionLogger.Activate">
            <summary>
            Активирует обработчик.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FatalExceptionLogger.Deactivate">
            <summary>
            Деактивирует обработчик.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FatalExceptionLogger.CreateErrorMessage(System.UnhandledExceptionEventArgs,System.Exception,System.Text.StringBuilder)">
            <summary>
            Формирует текст сообщения для вывода в журнал. Метод может быть вызван одновременно из нескольки потоков, 
            доступ к полям данных следует либо синхронизировать, либо не использовать вообще.
            </summary>
            <param name="exceptionInfo">Аргументы события о необработанном исключении</param>
            <param name="exception">Объект исключения</param>
            <param name="result">Результат работы метода</param>
        </member>
        <member name="T:Intermech.Diagnostics.FirstChanceExceptionTrap">
            <summary>
            Базовый класс ловушек для события падения исключения. Ловушки вызываются непосредственно в месте 
            падения исключения до того, как runtime перейдет к поиску по call stack подходящего обработчика для исключения.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FirstChanceExceptionTrap.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.FirstChanceExceptionTrap.Enabled">
            <summary>
            Активирует и деактивирует текущий объект.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FirstChanceExceptionTrap.DoEnableHandler">
            <summary>
            Активирует текущий объект.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FirstChanceExceptionTrap.DoDisableHandler">
            <summary>
            Деактивирует текущий объект.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.FirstChanceExceptionTrap.OnFirstChanceException(System.Object,System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs)">
            <summary>
            Реализует обработку события падения исключения.
            </summary>
            <param name="sender">AppDomain, в котором произошло падение исключения</param>
            <param name="e">Аргументы события</param>
        </member>
        <member name="M:Intermech.Diagnostics.FirstChanceExceptionTrap.DoProcessException(System.Exception)">
            <summary>
            Обрабатывает исключение в месте его падения.
            Метод вызывается в том потоке (thread), где произошло падение исключения. Поэтому реализация метода должна быть thread safe.
            Любые исключения в этом методе будут подавлены.
            </summary>
            <param name="exception">Объект исключения</param>
        </member>
        <member name="E:Intermech.Diagnostics.FirstChanceExceptionTrap.ProcessException">
            <summary>
            Позволяет обработать событие падения исключения безопасным способом без риска падения текущего процесса.
            Событие вызывается в том потоке (thread), где произошло падение исключения. Поэтому обработчик должен быть thread safe.
            Любые исключения в обработчике будут подавлены.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.IErrorReporter">
            <summary>
            Позволяет реализовать вывод списков ошибок в логи, журналы и пр.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.IErrorReporter.ReportErrors(System.Collections.Generic.ICollection{Intermech.Diagnostics.ErrorInfo})">
            <summary>
            Выводит список ошибок в журнал в форме, пригодной для чтения пользователем.
            </summary>
            <param name="errors">Коллекция ошибок</param>
            <exception cref="T:System.ArgumentNullException">errors</exception>
        </member>
        <member name="T:Intermech.Diagnostics.IEventLogWriter">
            <summary>
            Интерфейс объекта для записи сообщений в журнал событий.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.IEventLogWriter.Write(System.String)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
        </member>
        <member name="M:Intermech.Diagnostics.IEventLogWriter.Write(System.String,Intermech.Diagnostics.EventLogItemType)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
            <param name="itemType">Тип события</param>
        </member>
        <member name="M:Intermech.Diagnostics.IEventLogWriter.WriteItem(Intermech.Diagnostics.EventLogItem)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="item">Запись о событии</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="item"/> не должен быть равен null</exception>
        </member>
        <member name="T:Intermech.Diagnostics.IEventLogWritersPAL">
            <summary>
            Интерфейс PAL-сервиса для платформенно-зависимой реализации <see cref="T:Intermech.Diagnostics.EventLogWriters"/>.
            Реализация должна быть thread safe.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.IEventLogWritersPAL.CreateSystemLogWriter(System.String)">
            <summary>
            Создает объект для записи событий в журнал операционной системы.
            </summary>
            <param name="sourceName">Имя источника событий, отображаемое в журнале событий. Как правило, это название приложения</param>
            <returns>Объект для записи событий в журнал операционной системы</returns>
        </member>
        <member name="T:Intermech.Diagnostics.IMessageReporter">
            <summary>
            Интерфейс объекта для вывода многострочных сообщений в текстовый журнал.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.IMessageReporter.WriteLine(System.String)">
            <summary>
            Выводит строку текста текущего сообщения. Вывод текста может быть отложен до момента, пока сообщение не будет завершено с помощью метода <see cref="M:EndMessage"/>.
            </summary>
            <param name="text">Текст сообщения</param>
            <exception cref="T:ArgumentNullException">text</exception>
        </member>
        <member name="M:Intermech.Diagnostics.IMessageReporter.EndMessage">
            <summary>
            Завершает текущее сообщение.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.IMethodCallFormatter">
            <summary>
            Позволяет реализовать объект для преобразование аргументов вызываемых методов в строковое представление.
            Данное преобразование используется при трассировке вызываемых методов.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.IMethodCallFormatter.FormatArgument(System.Object)">
            <summary>
            Выполняет преобразование аргумента метода в текстовое представление.
            </summary>
            <param name="argument">Значение аргумента вызванного метода</param>
            <returns>Строковое представление аргумента</returns>
        </member>
        <member name="T:Intermech.Diagnostics.MessageReporterBase">
            <summary>
            Базовый класс объектов для вывода многострочных сообщений в текстовый журнал.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.MessageReporterBase.WriteLine(System.String)">
            <summary>
            Выводит строку текста текущего сообщения. Вывод текста может быть отложен до момента, пока сообщение не будет завершено с помощью метода <see cref="M:EndMessage"/>.
            </summary>
            <param name="text">Текст сообщения</param>
            <exception cref="T:ArgumentNullException">text</exception>
        </member>
        <member name="M:Intermech.Diagnostics.MessageReporterBase.DoWriteLine(System.String)">
            <summary>
            Выводит строку текста текущего сообщения. Вывод текста может быть отложен до момента, пока сообщение не будет завершено с помощью метода <see cref="M:EndMessage"/>.
            </summary>
            <param name="text">Текст сообщения</param>
        </member>
        <member name="M:Intermech.Diagnostics.MessageReporterBase.EndMessage">
            <summary>
            Завершает текущее сообщение.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.MessageReporterBase.DoEndMessage">
            <summary>
            Завершает текущее сообщение.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.MethodCallFormatter">
            <summary>
            Предоставляет базовую реализацию преобразования аргументов вызываемых методов в строковое представление.
            Данное преобразование используется при трассировке вызываемых методов.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallFormatter.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallFormatter.FormatArgument(System.Object)">
            <summary>
            Выполняет преобразование аргумента метода в текстовое представление.
            </summary>
            <param name="argument">Значение аргумента вызванного метода</param>
            <returns>Строковое представление аргумента</returns>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallFormatter.DoFormatArgument(System.Object)">
            <summary>
            Выполняет преобразование аргумента метода в текстовое представление.
            </summary>
            <param name="argument">Значение аргумента вызванного метода</param>
            <returns>Строковое представление аргумента</returns>
        </member>
        <member name="P:Intermech.Diagnostics.MethodCallFormatter.NullString">
            <summary>
            Возвращает строковое представление null-значений.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.MethodCallFormatter.EmptyListString">
            <summary>
            Возвращает строковое представление пустых списков.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.MethodCallTracer">
            <summary>
            Реализует вывод в журнал трассировки имен вызываемых методов и их аргументов.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallTracer.#ctor(System.Diagnostics.TraceSwitch)">
            <summary>
            Создает объект.
            </summary>
            <param name="traceSwitch">Ключ трассировки, управляющий включением и выключением текущего объекта</param>
            <exception cref="T:ArgumentNullException">traceSwitch</exception>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallTracer.#ctor(System.Diagnostics.TraceSwitch,Intermech.Diagnostics.IMethodCallFormatter)">
            <summary>
            Создает объект.
            </summary>
            <param name="traceSwitch">Ключ трассировки, управляющий включением и выключением текущего объекта</param>
            <param name="formatter">Форматтер для аргументов вызываемых методов</param>
            <exception cref="T:ArgumentNullException">traceSwitch || argumentFormatter</exception>
        </member>
        <member name="P:Intermech.Diagnostics.MethodCallTracer.Switch">
            <summary>
            Возвращает ключ трассировки, управляющий включением и выключением текущего объекта.
            Включение происходит при значении ключа TraceVerbose.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.MethodCallTracer.Enabled">
            <summary>
            Возвращает признак, что текущий объект активен.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallTracer.AddToTrace(System.String)">
            <summary>
            Выводит в журнал трассировки информацию о вызванном методе.
            </summary>
            <param name="methodName">Имя вызванного метода</param>
            <exception cref="T:ArgumentNullException">methodName</exception>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallTracer.AddToTrace``1(System.String,``0)">
            <summary>
            Выводит в журнал трассировки информацию о вызванном методе.
            </summary>
            <param name="methodName">Имя вызванного метода</param>
            <param name="arg1">1-й аргумент вызванного метода</param>
            <exception cref="T:ArgumentNullException">methodName</exception>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallTracer.AddToTrace``2(System.String,``0,``1)">
            <summary>
            Выводит в журнал трассировки информацию о вызванном методе.
            </summary>
            <param name="methodName">Имя вызванного метода</param>
            <param name="arg1">1-й аргумент вызванного метода</param>
            <param name="arg2">2-й аргумент вызванного метода</param>
            <exception cref="T:ArgumentNullException">methodName</exception>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallTracer.AddToTrace``3(System.String,``0,``1,``2)">
            <summary>
            Выводит в журнал трассировки информацию о вызванном методе.
            </summary>
            <param name="methodName">Имя вызванного метода</param>
            <param name="arg1">1-й аргумент вызванного метода</param>
            <param name="arg2">2-й аргумент вызванного метода</param>
            <param name="arg3">3-й аргумент вызванного метода</param>
            <exception cref="T:ArgumentNullException">methodName</exception>
        </member>
        <member name="M:Intermech.Diagnostics.MethodCallTracer.AddToTrace``4(System.String,``0,``1,``2,``3)">
            <summary>
            Выводит в журнал трассировки информацию о вызванном методе.
            </summary>
            <param name="methodName">Имя вызванного метода</param>
            <param name="arg1">1-й аргумент вызванного метода</param>
            <param name="arg2">2-й аргумент вызванного метода</param>
            <param name="arg3">3-й аргумент вызванного метода</param>
            <param name="arg4">4-й аргумент вызванного метода</param>
            <exception cref="T:ArgumentNullException">methodName</exception>
        </member>
        <member name="T:Intermech.Diagnostics.MultilineMessageReporter">
            <summary>
            Реализует декоратор, позволяющий визуально отделить многострочное сообщение от окружающего текста.
            Если сообщение состоит из одной строки, то просто выводится эта строка. Если же сообщение состоит из нескольких строк, то
            вторая и последующие строки выводятся со смещением, а после сообщения добавляется разделитель.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.MultilineMessageReporter.#ctor(Intermech.Diagnostics.IMessageReporter)">
            <summary>
            Создает объект.
            </summary>
            <param name="messageReporter">Объект для вывода многострочных сообщений</param>
            <exception cref="T:System.ArgumentNullException">messageReporter</exception>
        </member>
        <member name="M:Intermech.Diagnostics.MultilineMessageReporter.DoWriteLine(System.String)">
            <summary>
            Выводит строку текста текущего сообщения. Вывод текста может быть отложен до момента, пока сообщение не будет завершено с помощью метода <see cref="M:EndMessage"/>.
            </summary>
            <param name="text">Текст сообщения</param>
        </member>
        <member name="M:Intermech.Diagnostics.MultilineMessageReporter.DoEndMessage">
            <summary>
            Завершает текущее сообщение.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.NullEventLogWriter">
            <summary>
            Класс для записи в журнал событий, объекты которого могут использоваться в качестве заглушки (null object pattern).
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.NullMessageReporter">
            <summary>
            Реализация нейтрального (null) объекта для вывода многострочных сообщений в текстовый журнал.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.NullMessageReporter.WriteLine(System.String)">
            <summary>
            Выводит строку текста текущего сообщения. Вывод текста может быть отложен до момента, пока сообщение не будет завершено с помощью метода <see cref="M:EndMessage"/>.
            </summary>
            <param name="text">Текст сообщения</param>
            <exception cref="T:ArgumentNullException">text</exception>
        </member>
        <member name="M:Intermech.Diagnostics.NullMessageReporter.EndMessage">
            <summary>
            Завершает текущее сообщение.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.NullMessageReporter.Default">
            <summary>
            Возвращает экземпляр объекта, используемый по умолчанию.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.ProcessManager">
            <summary>
            Вспомогательный класс для получения информации о процессах.
            Предоставляет улучшенную версию некоторых методов класса System.Diagnostics.Process.
            Реализация методов системного класса получена с помощью reverse engineering.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.ProcessManager.GetProcessesByName(System.String)">
            <summary>
            Позволяет получить список процессов, имена которых совпадают с <paramref name="processName"/>.
            </summary>
            <param name="processName"></param>
            <returns></returns>
            <remarks>
            В отличие от метода в системном классе,
            данный корректно обрабатывает ситуации с одноименными процессами разной битности,
            одноименными процессами, запущенными разными пользователями
            </remarks>
        </member>
        <member name="T:Intermech.Diagnostics.RemoteExceptionData">
            <summary>
            <para>Контейнер для дополнительных технических сведений об объекте исключения. Этот контейнер заполняется 
            сервером приложений и содержит сведения, которые не могут быть получены клиентом самостоятельно в момент
            обработки исключения.
            </para>
            <para>Используется для хранения информации о точном месте падения исключения, а также других сведений,
            предназначенных для улучшения диагностики ошибок у пользователей.
            </para>
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionData.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.RemoteExceptionData.IsUnderConstruction">
            <summary>
            Возвращает или задает признак, что процесс заполнения контейнера техническими сведениями еще не завершен.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.RemoteExceptionData.StackTrace">
            <summary>
            Возвращает или задает стек вызова, сохраненный при падении исключения на сервере приложений.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Создает объект.
            </summary>
            <param name="info">Сериализованное представление объекта</param>
            <param name="context">Контекст сериализации</param>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Выполняет сериализацию объекта.
            </summary>
            <param name="info">Сериализованное представление объекта</param>
            <param name="context">Контекст сериализации</param>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionData.AddBuilder(Intermech.Diagnostics.RemoteExceptionDataBuilder)">
            <summary>
            Добавляет новый построитель для ленивого заполнения RemoteExceptionData.
            </summary>
            <param name="builder">Объект построителя</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="builder"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionData.TryGet(System.Exception)">
            <summary>
            Читает контейнер с техническими сведениями из объекта исключения, если он был предварительно туда записан.
            </summary>
            <param name="exception">Объект исключения</param>
            <returns>Объект контейнера или null</returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionData.Set(System.Exception,Intermech.Diagnostics.RemoteExceptionData)">
            <summary>
            Записывает контейнер с техническими сведениями в объект исключения.
            </summary>
            <param name="exception">Объект исключения</param>
            <param name="data">Контейнер с техническими сведениями</param>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="T:Intermech.Diagnostics.RemoteExceptionDataBuilder">
            <summary>
            Базовый класс для объектов, реализующих ленивое заполнение RemoteExceptionData, которое выполняется только в случае передачи
            объекта исключения от сервера приложений клиенту.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionDataBuilder.#ctor(System.Exception,Intermech.Diagnostics.RemoteExceptionData)">
            <summary>
            Создает объект.
            </summary>
            <param name="exception">Объект исключения</param>
            <param name="remoteData">Контейнер с техническими сведениями об исключении</param>
            <exception cref="T:System.ArgumentNullException">exception или remoteData</exception>
        </member>
        <member name="P:Intermech.Diagnostics.RemoteExceptionDataBuilder.Exception">
            <summary>
            Возвращает объект исключения.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.RemoteExceptionDataBuilder.RemoteData">
            <summary>
            Возвращает контейнер с техническими сведениями об исключении.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionDataBuilder.Build">
            <summary>
            Заполняет контейнер с техническими сведениями об исключении.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionDataBuilder.DoBuild">
            <summary>
            Заполняет контейнер с техническими сведениями об исключении.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.RemoteExceptionDataProvider">
            <summary>
            <para>Реализует автоматическое сохранение дополнительных технических сведений об исключении во время его падения
            в самом объекте исключения. Этот провайдер используется сервером приложений и собирает сведения,
            которые не могут быть получены клиентом самостоятельно в момент обработки исключения.
            </para>
            <para>Используется для передачи информации о точном месте падения исключения, а также других сведений,
            предназначенных для улучшения диагностики ошибок у пользователей.
            </para>
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionDataProvider.DoProcessException(System.Exception)">
            <summary>
            Обрабатывает исключение в месте его падения.
            Метод вызывается в том потоке (thread), где произошло падение исключения. Поэтому реализация метода должна быть thread safe.
            Любые исключения в этом методе будут подавлены.
            </summary>
            <param name="exception">Объект исключения</param>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteExceptionDataProvider.DoCreateRemoteExceptionDataBuilders(System.Exception,Intermech.Diagnostics.RemoteExceptionData)">
            <summary>
            Создает и регистрирует специальные объекты-построители технических сведений об объекте исключения.
            Они будут вызваны только перед передачей исключения клиенту.
            </summary>
            <param name="exception">Объект исключения</param>
            <param name="remoteData">Контейнер с техническими сведениями об объекте исключения</param>
        </member>
        <member name="E:Intermech.Diagnostics.RemoteExceptionDataProvider.CanSaveExceptionData">
            <summary>
            Событие, которое позволяет определить, следует ли собирать сведения об упавшем исключении.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.RemoteStackTraceBuilder">
            <summary>
            Реализует ленивое получение стека вызова исключения. Данный класс используется сервером приложений при передаче своих исключений
            клиентам.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteStackTraceBuilder.#ctor(System.Exception,Intermech.Diagnostics.RemoteExceptionData)">
            <summary>
            Создает объект.
            </summary>
            <param name="exception">Объект исключения</param>
            <param name="remoteData">Контейнер с техническими сведениями об исключении</param>
            <param name="saveFirstFrameOffset">Признак, требуется ли выполнять корректировку смещения для первого кадра в stack trace</param>
            <exception cref="T:System.ArgumentNullException">exception или remoteData</exception>
        </member>
        <member name="M:Intermech.Diagnostics.RemoteStackTraceBuilder.DoBuild">
            <summary>
            Заполняет контейнер с техническими сведениями об исключении.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so checking for <c>null</c> is required before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element can never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.ItemNotNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
            <example><code>
            public void Foo([ItemNotNull]List&lt;string&gt; books)
            {
              foreach (var book in books) {
                if (book != null) // Warning: Expression is always true
                 Console.WriteLine(book.ToUpper());
              }
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.ItemCanBeNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
            <example><code>
            public void Foo([ItemCanBeNull]List&lt;string&gt; books)
            {
              foreach (var book in books)
              {
                // Warning: Possible 'System.NullReferenceException'
                Console.WriteLine(book.ToUpper());
              }
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by the format pattern and (optional) arguments.
            The parameter, which contains the format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Intermech.Diagnostics.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as the format string
            </param>
        </member>
        <member name="T:Intermech.Diagnostics.ValueProviderAttribute">
             <summary>
             Use this annotation to specify a type that contains static or const fields
             with values for the annotated property/field/parameter.
             The specified type will be used to improve completion suggestions.
             </summary>
             <example><code>
             namespace TestNamespace
             {
               public class Constants
               {
                 public static int INT_CONST = 1;
                 public const string STRING_CONST = "1";
               }
            
               public class Class1
               {
                 [ValueProvider("TestNamespace.Constants")] public int myField;
                 public void Foo([ValueProvider("TestNamespace.Constants")] string str) { }
            
                 public void Test()
                 {
                   Foo(/*try completion here*/);//
                   myField = /*try completion here*/
                 }
               }
             }
             </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.ValueRangeAttribute">
            <summary>
            Indicates that the integral value falls into the specified interval.
            It's allowed to specify multiple non-intersecting intervals.
            Values of interval boundaries are inclusive.
            </summary>
            <example><code>
            void Foo([ValueRange(0, 100)] int value) {
              if (value == -1) { // Warning: Expression is always 'false'
                ...
              }
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.NonNegativeValueAttribute">
            <summary>
            Indicates that the integral value never falls below zero.
            </summary>
            <example><code>
            void Foo([NonNegativeValue] int value) {
              if (value == -1) { // Warning: Expression is always 'false'
                ...
              }
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be a string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Intermech.Diagnostics.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If the method has a single input parameter, its name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for the method output
            means that the method doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by the analysis engine.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("null &lt;= param:null")] // reverse condition syntax
            public string GetName(string surname)
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Intermech.Diagnostics.LocalizationRequiredAttribute">
            <summary>
            Indicates whether the marked element should be localized.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be reported as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.MeansImplicitUseAttribute">
            <summary>
            Can be applied to attributes, type parameters, and parameters of a type assignable from <see cref="T:System.Type"/> .
            When applied to an attribute, the decorated attribute behaves the same as <see cref="T:Intermech.Diagnostics.UsedImplicitlyAttribute"/>.
            When applied to a type parameter or to a parameter of type <see cref="T:System.Type"/>,  indicates that the corresponding type
            is used implicitly.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.ImplicitUseKindFlags">
            <summary>
            Specify the details of implicitly used symbol when it is marked
            with <see cref="T:Intermech.Diagnostics.MeansImplicitUseAttribute"/> or <see cref="T:Intermech.Diagnostics.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:Intermech.Diagnostics.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Intermech.Diagnostics.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered to be used implicitly when marked
            with <see cref="T:Intermech.Diagnostics.MeansImplicitUseAttribute"/> or <see cref="T:Intermech.Diagnostics.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:Intermech.Diagnostics.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.ImplicitUseTargetFlags.WithInheritors">
            <summary> Inherited entities are considered used. </summary>
        </member>
        <member name="F:Intermech.Diagnostics.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Warning: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of the method invocation must be used.
            </summary>
            <remarks>
            Methods decorated with this attribute (in contrast to pure methods) might change state,
            but make no sense without using their return value. <br/>
            Similarly to <see cref="T:Intermech.Diagnostics.PureAttribute"/>, this attribute
            will help detecting usages of the method when the return value in not used.
            Additionally, you can optionally specify a custom message, which will be used when showing warnings, e.g.
            <code>[MustUseReturnValue("Use the return value to...")]</code>.
            </remarks>
        </member>
        <member name="T:Intermech.Diagnostics.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value of that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by code completion
            as a 'Source Template'. When the extension method is completed over some expression, its source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:Intermech.Diagnostics.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Intermech.Diagnostics.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:Intermech.Diagnostics.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:Intermech.Diagnostics.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:Intermech.Diagnostics.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:Intermech.Diagnostics.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:Intermech.Diagnostics.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:Intermech.Diagnostics.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
        </member>
        <member name="P:Intermech.Diagnostics.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:Intermech.Diagnostics.SourceTemplateAttribute">source template</see> if the
            <see cref="T:Intermech.Diagnostics.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that the marked parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that the marked parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that the marked parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that the marked parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that the marked parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that the marked parameter or method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation, or property access
            over collection type affects the contents of the collection.
            Use <see cref="P:Intermech.Diagnostics.CollectionAccessAttribute.CollectionAccessType"/> to specify the access type.
            </summary>
            <remarks>
            Using this attribute only makes sense if all collection methods are marked with this attribute.
            </remarks>
            <example><code>
            public class MyStringCollection : List&lt;string&gt;
            {
              [CollectionAccess(CollectionAccessType.Read)]
              public string GetFirstString()
              {
                return this.ElementAt(0);
              }
            }
            class Test
            {
              public void Foo()
              {
                // Warning: Contents of the collection is never updated
                var col = new MyStringCollection();
                string x = col.GetFirstString();
              }
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.CollectionAccessType">
            <summary>
            Provides a value for the <see cref="T:Intermech.Diagnostics.CollectionAccessAttribute"/> to define
            how the collection method invocation affects the contents of the collection.
            </summary>
        </member>
        <member name="F:Intermech.Diagnostics.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts the control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with
            <see cref="T:Intermech.Diagnostics.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:Intermech.Diagnostics.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:Intermech.Diagnostics.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:Intermech.Diagnostics.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable passed as a parameter is not enumerated.
            Use this annotation to suppress the 'Possible multiple enumeration of IEnumerable' inspection.
            </summary>
            <example><code>
            static void ThrowIfNull&lt;T&gt;([NoEnumeration] T v, string n) where T : class
            {
              // custom check for null but no enumeration
            }
            
            void Foo(IEnumerable&lt;string&gt; values)
            {
              ThrowIfNull(values, nameof(values));
              var x = values.ToList(); // No warnings about multiple enumeration
            }
            </code></example>
        </member>
        <member name="T:Intermech.Diagnostics.RegexPatternAttribute">
            <summary>
            Indicates that the marked parameter is a regular expression pattern.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:Intermech.Diagnostics.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Intermech.Diagnostics.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:Intermech.Diagnostics.XamlItemStyleOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>Style</c>-derived type, that
            is used to style items of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:Intermech.Diagnostics.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.IntroText">
            <summary>
            Возвращает или задает вводный текст. Значение свойства может быть пустым.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.ThrowLocation">
            <summary>
            Возвращает или задает точку падения исключение внутри метода. Значение свойства может быть не задано.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.FullTypeName">
            <summary>
            Возвращает или задает полное имя типа, включая пространство имен и имена внешних типов. В качестве разделителя используется для внешних типов используется
            символ '.', поэтому внешние типы нельзя отличить от пространства имен.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.MethodName">
            <summary>
            Возвращает или задает имя метода.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.MethodGenericArguments">
            <summary>
            Возвращает или задает текст аргументов для generic-методов. Значение свойства может быть пустым.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.MethodArguments">
            <summary>
            Возвращает или задает текст аргументов вызова метода. Значение свойства может быть пустым.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.OutroText">
            <summary>
            Возвращает или задает заключительный текст, который следует за сигнатурой метода. Значение свойства может быть пустым.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackLineBuilder.ToString">
            <summary>
            Возвращает строковое представление.
            </summary>
            <returns>Строковое представление</returns>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.IsConstructor">
            <summary>
            Возвращает true, если это конструктор типа.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackLineBuilder.IsStaticConstructor">
            <summary>
            Возвращает true, если статический конструктор типа.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackLineBuilder.TryParse(System.String)">
            <summary>
            Выделяет из строки stack trace имя вызванного метода, включая имя типа и пространства имен. Особенностью формирования stack trace является то, что
            внешние типы разделяются также с помощью '.', поэтому внешний тип неотличим от пространства имен.
            </summary>
            <param name="textLine">Строка stack trace</param>
            <returns>Выделенное имя вызванного метода или null</returns>
        </member>
        <member name="T:Intermech.Diagnostics.StackLineTransform">
            <summary>
            Реализует базовый класс для преобразований строк stack trace. Такие преобразования используются для добавления дополнительной технической инфомации,
            деобфускации stack trace и т.д.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackLineTransform.ApplyTransform(System.String,Intermech.Diagnostics.StackLineBuilder)">
            <summary>
            Выполняет преобразование указанной строки stack trace.
            </summary>
            <param name="sourceLine">Исходный текст строки</param>
            <param name="targetLine">Построитель результирующей строки, содержащей результаты преобразования</param>
            <exception cref="T:System.ArgumentNullException">Аргумент метода не указан</exception>
        </member>
        <member name="M:Intermech.Diagnostics.StackLineTransform.DoTransform(System.String,Intermech.Diagnostics.StackLineBuilder)">
            <summary>
            Реализует преобразование указанной строки stack trace.
            </summary>
            <param name="sourceLine">Исходный текст строки</param>
            <param name="targetLine">Построитель результирующей строки, содержащей результаты преобразования</param>
        </member>
        <member name="T:Intermech.Diagnostics.StackTraceBuilder">
            <summary>
            Расширяет стандартный способ формирования stack trace, позволяя включить в него дополнительную техническую инфомацию.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.AppendException(System.Exception)">
            <summary>
            Добавляет в stack trace указанное исключение.
            </summary>
            <param name="exception">Объект исключения</param>
            <exception cref="T:System.ArgumentNullException">Объект исключения не указан</exception>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.DoAppendException(System.Exception)">
            <summary>
            Реализует вывод в stack trace указанного исключения.
            </summary>
            <param name="exception">Объект исключения</param>
            <exception cref="T:System.ArgumentNullException">Объект исключения не указан</exception>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.DoMakeStackTraceLine(Intermech.Diagnostics.StackLineBuilder,Intermech.Diagnostics.CompressedStackFrame)">
            <summary>
            Реализует формирование строки stack trace.
            </summary>
            <param name="lineBuilder">Построитель строки</param>
            <param name="throwLocation">Точка падения исключения. Может быть null, если эти сведения не удалось получить из объекта исключения</param>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.AppendAllInnerExceptions(System.Exception)">
            <summary>
            Добавляет в вывод вложенные исключения для указанного исключения
            </summary>
            <param name="exception">Объект исключения</param>
            <exception cref="T:System.ArgumentNullException">Объект исключения не указан</exception>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.AppendDelimiter">
            <summary>
            Добавляет в вывод строку разделителя.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.StackTraceBuilder.TextBuilder">
            <summary>
            Возвращает объект построителя текста.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.Clear">
            <summary>
            Очищает вывод.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceBuilder.ToString">
            <summary>
            Возвращает результат работы в виде строки.
            </summary>
            <returns>Построенный stack trace в виде строки</returns>
        </member>
        <member name="T:Intermech.Diagnostics.StackTraceTransform">
            <summary>
            Реализует эффективный механизм для преобразования строк stack trace. Поддерживается возможность смешивания нескольких преобразований.
            Преобразования stack trace используются для добавления дополнительной технической инфомации, деобфускации и т.д.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceTransform.StartTransform(System.String)">
            <summary>
            Начинает новое преобразование.
            </summary>
            <param name="stackTrace">Исходный stack trace</param>
            <exception cref="T:System.ArgumentNullException">Аргумент метода не указан</exception>
        </member>
        <member name="P:Intermech.Diagnostics.StackTraceTransform.IsStarted">
            <summary>
            Возвращает true, если преобразование было начато.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceTransform.ApplyTransform(Intermech.Diagnostics.StackLineTransform)">
            <summary>
            Применяет указанное преобразование к каждой строке stack trace.
            </summary>
            <param name="lineTransform">Объект преобразования</param>
            <exception cref="T:System.ArgumentNullException">Объект преобразования не указан</exception>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceTransform.GetResult">
            <summary>
            Возвращает результат преобразования stack trace.
            </summary>
            <returns>Результат преобразования в виде строки</returns>
        </member>
        <member name="M:Intermech.Diagnostics.StackTraceTransform.Clear">
            <summary>
            Выполняет очистку, удаляя все рабочие данные выполненного преобразования.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.SuppressedExceptionEventArgs">
            <summary>
            Аргументы для события регистрации подавленного исключения.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.SuppressedExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Создает объект.
            </summary>
            <param name="exception">Объект подавленного исключения</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="exception"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.Diagnostics.SuppressedExceptionEventArgs.Exception">
            <summary>
            Возвращает объект подавленного исключения.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.SuppressedExceptions">
            <summary>
            Вспомогательные утилиты, упрощающие работу с подавленными исключениями.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.SuppressedExceptions.TraceException(System.Exception,System.String)">
            <summary>
            Выводит в журнал трассировки информацию о подавленном исключении.
            </summary>
            <param name="exception">Объект исключения</param>
            <param name="exceptionLocation">Место в коде, где произошло исключение. Как правило, это имя метода, бросившего исключение</param>
            <exception cref="T:ArgumentNullException">Параметры <paramref name="exception"/>, <paramref name="exceptionLocation"/> не должны быть равны null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.SuppressedExceptions.TryCaptureException(System.Action)">
            <summary>
            Позволяет выполнить указанный код и получить подавленное исключение, если оно было сброшено.
            </summary>
            <param name="code">Код для выполнения</param>
            <returns>Подавленное исключение или null, если исключение не было сброшено</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="code"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.SuppressedExceptions.TryCaptureException``1(System.Func{``0})">
            <summary>
            Позволяет выполнить указанный код и получить результат выполнения кода и подавленное исключение, если оно было сброшено.
            </summary>
            <param name="action">Код для выполнения</param>
            <returns>Кортеж и результата выполнения кода и подавленного исключения. Ссылка на исключение может быть равна null, если исключение не было сброшено</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="code"/> не должен быть равен null</exception>
        </member>
        <member name="E:Intermech.Diagnostics.SuppressedExceptions.OnException">
            <summary>
            Событие регистрации подавленного исключения.
            </summary>
        </member>
        <member name="T:Intermech.Diagnostics.TextFileEventLogWriter">
            <summary>
            Класс для записи в журнал событий в виде простого текстового файла.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.TextFileEventLogWriter.#ctor(System.String)">
            <summary>
            Создает объект.
            </summary>
            <param name="filePath">Путь к файлу журнала событий</param>
            <exception cref="T:ArgumentException">Параметр <paramref name="filePath"/> не должен быть пуст или равен null</exception>
        </member>
        <member name="M:Intermech.Diagnostics.TextFileEventLogWriter.Dispose">
            <summary>
            Освобождает ресурсы объекта.
            </summary>
        </member>
        <member name="P:Intermech.Diagnostics.TextFileEventLogWriter.IsDisposed">
            <summary>
            Возвращает признак, что ресурсы объекта были освобождены, а сам объект использовать больше нельзя.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.TextFileEventLogWriter.DoWriteMessage(System.String,Intermech.Diagnostics.EventLogItemType)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="message">Текст сообщения</param>
            <param name="itemType">Тип события</param>
        </member>
        <member name="M:Intermech.Diagnostics.TextFileEventLogWriter.DoWriteItem(Intermech.Diagnostics.EventLogItem)">
            <summary>
            Записывает в журнал новое событие.
            </summary>
            <param name="item">Запись о событии</param>
        </member>
        <member name="T:Intermech.Diagnostics.ThreadBoundMethodCallFormatter">
            <summary>
            Предоставляет потокобезопасную реализацию преобразования аргументов вызываемых методов в строковое представление.
            Данное преобразование используется при трассировке вызываемых методов.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.ThreadBoundMethodCallFormatter.#ctor(System.Func{Intermech.Diagnostics.IMethodCallFormatter})">
            <summary>
            Создает объект.
            </summary>
            <param name="createFunction">Функция для создания экземпляров объектов, реализующих преобразование</param>
            <exception cref="T:ArgumentNullException">createFunction</exception>
        </member>
        <member name="M:Intermech.Diagnostics.ThreadBoundMethodCallFormatter.FormatArgument(System.Object)">
            <summary>
            Выполняет преобразование аргумента метода в текстовое представление.
            </summary>
            <param name="argument">Значение аргумента вызванного метода</param>
            <returns>Строковое представление аргумента</returns>
        </member>
        <member name="T:Intermech.Diagnostics.TraceExceptionModule">
            <summary>
            Класс служит для возможности записи всех возникающих исключений в trace файл
            </summary>
            <remarks>Не все используют SuppressedExceptions, часть ошибок в блоках try catch никак не логируются</remarks>
        </member>
        <member name="M:Intermech.Diagnostics.TraceExceptionModule.DoInitialize">
            <summary>
            Выполняет инициализацию текущего объекта.
            </summary>
        </member>
        <member name="M:Intermech.Diagnostics.TraceExceptionModule.DoShutdown">
            <summary>
            Завершает работу текущего объекта.
            Если свойство IsInitialized возвращает false, то DoShutdown вызван как реакция на необработанное исключение при инициализации.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intermech.Diagnostics.TraceExceptionsReporter.ReportException(System.Exception)" -->
        <member name="F:Intermech.Diagnostics.UriScheme.None">
            <summary>None</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.Any">
            <summary>Any</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.File">
            <summary>Pointer to a file</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.Ftp">
            <summary>File Transfer Protocol (FTP)</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.Gopher">
            <summary>Gopher protocol</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.Http">
            <summary>Hypertext Transfer Protocol (HTTP)</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.Https">
            <summary>Secure Hypertext Transfer Protocol (HTTPS)</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.Mailto">
            <summary>Simple Mail Transport Protocol (SMTP)</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.News">
            <summary>Network News Transport Protocol (NNTP)</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.Nntp">
            <summary>Network News Transport Protocol (NNTP)</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.NetTcp">
            <summary>Windows Communication Foundation (WCF)</summary>
        </member>
        <member name="F:Intermech.Diagnostics.UriScheme.NetPipe">
            <summary>Windows Communication Foundation (WCF)</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentInvalidCastException">
            <summary>Исключительная ситуация вида "Ошибка конвертации аргумента".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentItemInvalidCastException">
            <summary>Исключительная ситуация вида "Ошибка конвертации элемента коллекции-аргумента".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.CollectionIsEmptyException">
            <summary>Значение не может быть пустым</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentCollectionIsEmptyException">
            <summary>Значение аргумента не может быть пустым</summary>
        </member>
        <member name="T:Intermech.Diagnostics.EmptyStringNotAllowedException">
            <summary>Исключительная ситуация вида "строка не должна быть пустой".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentEmptyStringNotAllowedException">
            <summary>Исключительная ситуация вида "строка не должна быть пустой".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemEmptyStringNotAllowedException">
            <summary>Исключительная ситуация вида "Коллекция строк не должна содержать пустые строки".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentItemEmptyStringNotAllowedException">
            <summary>Исключительная ситуация вида "Коллекция строк не должна содержать пустые строки".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemNotFoundException">
            <summary>Ошибка поиска элемента</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemNotFoundException`1">
            <summary>Ошибка поиска элемента по ключу.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentItemNotFoundException">
            <summary>Ошибка поиска элемента</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentItemNotFoundException`1">
            <summary>Ошибка поиска элемента по ключу.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemNullsNotAllowedException">
            <summary>Исключительная ситуация вида "Коллекция не должна содержать null".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentItemNullsNotAllowedException">
            <summary>Исключительная ситуация вида "Коллекция не должна содержать null".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemValidationExceptionException">
            <summary>Исключительная ситуация вида "Элемент коллекции не удовлетворяет условию валидации".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentItemValidationExceptionException">
            <summary>Исключительная ситуация вида "Элемент коллекции не удовлетворяет условию валидации".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ItemWhitespaceNotAllowedException">
            <summary>Исключительная ситуация вида "Все строки коллекции должны содержать хотя бы один отличный от пробела символ".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentItemWhitespaceNotAllowedException">
            <summary>Исключительная ситуация вида "Все строки коллекции должны содержать хотя бы один отличный от пробела символ".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ValueEmptyException">
            <summary>Значение не может быть пустым.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentValueEmptyException">
            <summary>Аргумент не может быть пуст.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ValueException">
            <summary>Исключительная ситуация, относящаяся к именованному значению.</summary>
        </member>
        <member name="T:Intermech.Diagnostics.WhitespaceNotAllowedException">
            <summary>Исключительная ситуация вида "строка должна содержать хотя бы один отличный от пробела символ".</summary>
        </member>
        <member name="T:Intermech.Diagnostics.ArgumentWhitespaceNotAllowedException">
            <summary>Исключительная ситуация вида "строка должна содержать хотя бы один отличный от пробела символ".</summary>
        </member>
        <member name="T:Intermech.DisposeUtils">
            <summary>
            Содержит сервисные методы для работы с disposable объектами.
            </summary>
        </member>
        <member name="M:Intermech.DisposeUtils.TryDispose(System.Object)">
            <summary>
            Освобождает ресурсы объекта, если он реализует IDisposable.
            </summary>
            <param name="obj">Ссылка на объект. Может быть null</param>
        </member>
        <member name="M:Intermech.DisposeUtils.SafelyDispose(System.IDisposable)">
            <summary>
            Освобождает ресурсы объекта. Если при этом произойдет исключение, то оно будет подавлено и, опционально, выведено в журнал трассировки приложения.
            </summary>
            <param name="obj">Ссылка на объект. Может быть null</param>
        </member>
        <member name="T:Intermech.Exceptions.OperationAbortedException">
            <summary>(Serializable) Операция отменена в силу описанных причин.</summary>
        </member>
        <member name="P:Intermech.Exceptions.OperationAbortedException.OperationName">
            <summary>Описание отменённой операции</summary>
        </member>
        <member name="P:Intermech.Exceptions.OperationAbortedException.Reason">
            <summary>Причина отмены операции</summary>
        </member>
        <member name="T:Intermech.Exceptions.ValidationException">
            <summary>
            Проверка выполнения условия через метод Requires, если не выполняется - ошибка с сообщением
            </summary>
        </member>
        <member name="T:Intermech.FaultException">
            <summary>
            Базовый класс для исключений, представляющих необрабатываемый отказ в обслуживании. Такие исключения показываются
            пользователю как ошибки, т.е. без call stack.
            </summary>
        </member>
        <member name="M:Intermech.FaultException.#ctor(System.String)">
            <summary>
            Создает исключение.
            </summary>
            <param name="message">Сообщение, описывающее ошибку</param>
        </member>
        <member name="M:Intermech.FaultException.#ctor(System.String,System.Exception)">
            <summary>
            Создает исключение.
            </summary>
            <param name="message">Сообщение, описывающее ошибку</param>
            <param name="innerException">Предыдущее исключение</param>
        </member>
        <member name="M:Intermech.FaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Используется для десериализации исключения.
            </summary>
            <param name="info">Сериализованное представление исключения</param>
            <param name="context">Контекст десериализации</param>
        </member>
        <member name="T:Intermech.FreezableObject">
            <summary>
            Базовый класс для объектов, которые позволяют замораживать свое внутреннее состояние. Эту возможность удобно использоваться в тех случаях,
            когда требуется предоставить доступ к объекту на чтение нескольким потокам.
            </summary>
        </member>
        <member name="P:Intermech.FreezableObject.IsFrozen">
            <summary>
            Возвращает признак, что состояние объекта заморожено.
            </summary>
        </member>
        <member name="M:Intermech.FreezableObject.ValidateBeforeFreeze">
            <summary>
            Проверяет корректность состояния объекта перед заморозкой. Если состояние объекта уже заморожено, то метод завершает выполнение без ошибок.
            </summary>
            <exception cref="T:System.InvalidOperationException">Состояние объекта не корректно и не может быть заморожено</exception>
        </member>
        <member name="M:Intermech.FreezableObject.Freeze">
            <summary>
            Замораживает состояние объекта.
            </summary>
            <exception cref="T:System.InvalidOperationException">Состояние объекта не корректно и не может быть заморожено</exception>
        </member>
        <member name="M:Intermech.FreezableObject.DoFreeze">
            <summary>
            Реализует заморозку состояния объекта.
            </summary>
        </member>
        <member name="M:Intermech.FreezableObject.DoValidate">
            <summary>
            Позволяет проверить корректность состояния объекта перед заморозкой.
            </summary>
            <exception cref="T:System.InvalidOperationException">Состояние объекта не корректно и не может быть заморожено</exception>
        </member>
        <member name="M:Intermech.FreezableObject.RequireFrozen">
            <summary>
            Позволяет убедиться, что состояние объекта заморожено.
            </summary>
            <exception cref="T:System.InvalidOperationException">Состояние объекта не было заморожено</exception>
        </member>
        <member name="M:Intermech.FreezableObject.RequireNotFrozen">
            <summary>
            Позволяет убедиться, что состояние объекта доступно для изменения.
            </summary>
            <exception cref="T:System.InvalidOperationException">Состояние объекта заморожено и не доступно для изменения</exception>
        </member>
        <member name="M:Intermech.FreezableObject.RequireNotFrozenBeforePropertyChange(System.String)">
            <summary>
            Позволяет убедиться, что состояние объекта доступно для изменения.
            </summary>
            <param name="propertyName">Имя свойства, которое должно быть изменено</param>
            <exception cref="T:System.ArgumentNullException">Не указано имя изменяемого свойства</exception>
            <exception cref="T:System.InvalidOperationException">Состояние объекта заморожено и не доступно для изменения</exception>
        </member>
        <member name="T:Intermech.Globalization.UICultureHelper">
            <summary>
            Позволяет назначить приложению DefaultThreadCurrentUICulture.
            </summary>
        </member>
        <member name="M:Intermech.Globalization.UICultureHelper.ApplySettingsFromConfigurationFile">
            <summary>
            Назначает приложению DefaultThreadCurrentUICulture. Имя локали берется из App.config из ключа 'UICulture' в секции 'AppSettings'.
            Метод должен быть вызван при старте приложения как можно раньше.
            </summary>
        </member>
        <member name="T:Intermech.IFactory`1">
            <summary>
            Интерфейс фабрики типов
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Intermech.IFactory`2">
            <summary>
            Интерфейс фабрики типов
            </summary>
            <typeparam name="TParam"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Intermech.Integrators.IConnectableApp">
            <summary>
            Интерфейс для приложений, взаимодействующих с интегратором
            </summary>
        </member>
        <member name="M:Intermech.Integrators.IConnectableApp.Connect">
            <summary>
            Подключиться (открыть канал) к внешнему API запущенной системы 
            </summary>
            <returns>Возвращает true, если удалось подключиться</returns>
        </member>
        <member name="M:Intermech.IO.DriveUtils.GetAvailableFreeSpace(System.String)">
            <summary>
            Возвращает свободное место на указанном диске в байтах.
            Метод поддерживает как локальные диски, так UNC-ресурсы.
            </summary>
            <param name="driveRoot">Путь к корневому каталогу диска</param>
            <returns>Свободное место на диске в байтах</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="driveRoot"/> содержит null</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Ошибка при получении свободного места</exception>
        </member>
        <member name="M:Intermech.IO.DriveUtils.GetMappedPath(System.Char)">
            <summary>
            Возвращает путь, связанный с указанной буквой диска. 
            </summary>
            <param name="driveLetter">Буква диска</param>
            <returns>Путь, связанный с буквой диска. Если null, значит такая буква диска не используется. Если "", значит буква диска используется устройством</returns>
        </member>
        <member name="T:Intermech.IO.FilesStorage">
            <summary>
            Класс, представляющий собой папку с файлами. Предназначен для замены таких штук, как изолированное хранилище файлов.
            Хранит файлы в иерархической структуре подпапок, поэтому может быстро работать с большим количеством файлов.
            </summary>
        </member>
        <member name="F:Intermech.IO.FilesStorage._RootName">
            <summary>
            Путь и имя корневой папки хранилища
            </summary>
        </member>
        <member name="F:Intermech.IO.FilesStorage.AppDataIPSRootFolder">
            <summary>
            Имя папки в каталоге ApplicationData для размещения подпапок с хранилищами файлов
            </summary>
        </member>
        <member name="F:Intermech.IO.FilesStorage.OwnerFileName">
            <summary>
            Имя файла с инфой о том, какому процессу принадлежит данная папка
            </summary>
        </member>
        <member name="F:Intermech.IO.FilesStorage._FullOwnerFileName">
            <summary>
            Полный путь к файлу с инфой о том, какому процессу принадлежит данная папка
            </summary>
        </member>
        <member name="M:Intermech.IO.FilesStorage.#ctor(System.String,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="rootPath">Путь к папке. Если пустой, то создает в ApplicationData</param>
            <param name="folderName">Имя папки</param>
        </member>
        <member name="P:Intermech.IO.FilesStorage.RootName">
            <summary>
            Путь и имя корневой папки хранилища
            </summary>
        </member>
        <member name="P:Intermech.IO.FilesStorage.CurrentApplicationName">
            <summary>
            Возвращает полный путь и имя текущему исполняемого файла в нижнем регистре
            </summary>
        </member>
        <member name="M:Intermech.IO.FilesStorage.LockFolder">
            <summary>
            Метод проверяет эксклюзивный доступ к данному каталогу текущего экзешника. Выдает исключение, если каталог создан другим приложением (загруженным из другого каталога)
            </summary>
        </member>
        <member name="M:Intermech.IO.FilesStorage.GetFullFileName(System.String)">
            <summary>
            Возвращает полный путь к файлу в хранилище по имени файла
            </summary>
            <param name="filename">Имя файла без пути</param>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.FilesStorage.FileExists(System.String,System.Boolean)">
            <summary>
            Определяет есть ли в каталоге файл 
            </summary>
            <param name="filename">Имя файла</param>
            <param name="relativePath">Флаг показывающий, что в filename указан относительный путь к корневой папке хранилища</param>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.FilesStorage.DeleteFile(System.String)">
            <summary>
            Удаляет файл из каталога
            </summary>
            <param name="filename">Имя файла</param>
        </member>
        <member name="M:Intermech.IO.FilesStorage.DeleteFileByFullName(System.String)">
            <summary>
            Удаляет файл из каталога
            </summary>
            <param name="filename">Имя файла с путем</param>
        </member>
        <member name="M:Intermech.IO.FilesStorage.GetFileNames(System.String)">
            <summary>
            Возвращает массив найденных файлов по всем подкаталогам
            </summary>
            <param name="pattern">Маска поиска</param>
            <returns>Массив найденных файлов (или пустой, если они не нашлись)</returns>
        </member>
        <member name="M:Intermech.IO.FilesStorage.GetDirectoryNames(System.String)">
            <summary>
            Возвращает массив найденных подкаталов на все уровни вложенности
            </summary>
            <param name="pattern">Маска поиска</param>
            <returns>Массив найденных подкаталогов (или пустой, если они не нашлись)</returns>
        </member>
        <member name="M:Intermech.IO.FilesStorage.Clear">
            <summary>
            Очищает каталог от файлов и подкаталогов
            </summary>
        </member>
        <member name="P:Intermech.IO.FilesStorage.AvailableFreeSpace">
            <summary>
            Вернуть свободное пространство в байтах
            </summary>
        </member>
        <member name="T:Intermech.IO.IByteBufferPool">
            <summary>
            Buffer's pool interface
            </summary>
        </member>
        <member name="P:Intermech.IO.IByteBufferPool.SupportCache">
            <summary>
            Support buffer pool's cache
            </summary>
        </member>
        <member name="P:Intermech.IO.IByteBufferPool.BufferLength">
            <summary>
            Get buffer length
            </summary>
        </member>
        <member name="M:Intermech.IO.IByteBufferPool.GetBuffer">
            <summary>
            Get buffer from pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.IByteBufferPool.ReturnBuffer(System.Byte[])">
            <summary>
            Return buffer to bool
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:Intermech.IO.ByteBufferAllocator">
            <summary>
            Simple buffer's allocator (no cached buffers)
            </summary>
        </member>
        <member name="F:Intermech.IO.ByteBufferAllocator._bufferSize">
            <summary>
            Buffer's size
            </summary>
        </member>
        <member name="M:Intermech.IO.ByteBufferAllocator.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="P:Intermech.IO.ByteBufferAllocator.SupportCache">
            <summary>
            Support buffer pool's cache
            </summary>
        </member>
        <member name="P:Intermech.IO.ByteBufferAllocator.BufferLength">
            <summary>
            Get buffer length
            </summary>
        </member>
        <member name="M:Intermech.IO.ByteBufferAllocator.GetBuffer">
            <summary>
            Get buffer from pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.ByteBufferAllocator.ReturnBuffer(System.Byte[])">
            <summary>
            Return
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:Intermech.IO.ByteBufferPool">
            <summary>
            Buffer's pool 
            </summary>
        </member>
        <member name="F:Intermech.IO.ByteBufferPool._bufferSize">
            <summary>
            Buffer's size
            </summary>
        </member>
        <member name="F:Intermech.IO.ByteBufferPool._bufferPool">
            <summary>
            Buffer's data pool
            </summary>
        </member>
        <member name="F:Intermech.IO.ByteBufferPool._controlCookie">
            <summary>
            
            </summary>
        </member>
        <member name="F:Intermech.IO.ByteBufferPool._current">
            <summary>
            Current buffer's index
            </summary>
        </member>
        <member name="F:Intermech.IO.ByteBufferPool._last">
            <summary>
            Last buffer's index
            </summary>
        </member>
        <member name="F:Intermech.IO.ByteBufferPool._max">
            <summary>
            Max buffer's index
            </summary>
        </member>
        <member name="M:Intermech.IO.ByteBufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxBuffers">Max buffer's count</param>
            <param name="bufferSize">Buffer's size</param>
        </member>
        <member name="P:Intermech.IO.ByteBufferPool.SupportCache">
            <summary>
            Support buffer pool's cache
            </summary>
        </member>
        <member name="P:Intermech.IO.ByteBufferPool.BufferLength">
            <summary>
            Get buffer length
            </summary>
        </member>
        <member name="M:Intermech.IO.ByteBufferPool.GetBuffer">
            <summary>
            Get buffer from pool 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.ByteBufferPool.ReturnBuffer(System.Byte[])">
            <summary>
            Return buffer to pool
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:Intermech.IO.ImChunkedStream">
            <summary>
            Поток, который содержит данные в виде списка буферов (фрагментов).
            </summary>
            <remarks>
            Позволяет "более экономично" хранить данные в памяти, уменьшая фрагментацию LargeObjectHeap.
            Рекомендуется к использованию вместо MemoryStream.
            ВНИМАНИЕ!
            Для случаев, когда уже есть целиком буфер с данными и поток используется только на чтение,
            следует использовать класс MemoryStream и конструктор вида new MemoryStream(buffer), для избежания
            повторного выделения памяти и копирования данных.
            </remarks>
        </member>
        <member name="T:Intermech.IO.ImChunkedStream.Consts">
            <summary>
            Const
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream.Consts.DefChunkSize">
            <summary>
            Default chunk's size
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream.Consts.DefMaxBuffers">
            <summary>
            Default buffer's size
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream.Consts.DefChunkListSize">
            <summary>
            Default chunk list's size
            </summary>
        </member>
        <member name="T:Intermech.IO.ImChunkedStream.DataChunk">
            <summary>
            Data chunk item
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream.DataChunk.Buffer">
            <summary>
            Data buffer
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream.DataChunk.Next">
            <summary>
            Reference to next chunk (for speed up)
            </summary> 
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._isClosed">
            <summary>
            Stream closed status
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._chunkSize">
            <summary>
            Chunk's size
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._chunks">
            <summary>
            Chunk's data
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._bufferPool">
            <summary>
            Pool of byte buffers to use
            </summary>         
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._lastWriteOffset">
            <summary>
            offset into chunk to write to
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._currentChunk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._currentChunkIdx">
            <summary>
            current chunk to read from, write to
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream._currentOffset">
            <summary>
            offset into chunk to read from, write to
            </summary>
        </member>
        <member name="F:Intermech.IO.ImChunkedStream.SharedBufferPool">
            <summary>
            Declare static buffer's pool 
            </summary>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.AllocateMemoryChunk">
            <summary>
            Allocate memory chunk
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.ReleaseMemoryChunk(Intermech.IO.ImChunkedStream.DataChunk)">
            <summary>
            Release memory chunk
            </summary>
            <param name="chunk"></param>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.ReleaseMemoryChunks">
            <summary>
            Release all memory chunks
            </summary>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.CheckWriteChunkData">
            <summary>
            Проверка наличия буфера при записи
            </summary>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.CheckReadChunkData">
            <summary>
            Проверка наличие буфера при чтении
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.#ctor">
            <summary>
            ВНИМАНИЕ!
            Для случаев, когда уже есть целиком буфер с данными и поток используется только на чтение,
            следует использовать new MemoryStream(bufferData) !!
            </summary>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.ToArray">
            <summary>
            copy entire buffer into an array
            </summary>
            <returns></returns> 
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.WriteTo(System.IO.Stream)">
            <summary>
            Write remainder of this stream to another stream
            </summary>
            <param name="stream"></param> 
        </member>
        <member name="P:Intermech.IO.ImChunkedStream.Position">
            <summary>
            Get or set current position
            </summary>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Intermech.IO.ImChunkedStream.Length">
            <summary>
            Length of stream's data  
            </summary>
        </member>
        <member name="P:Intermech.IO.ImChunkedStream.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermech.IO.ImChunkedStream.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermech.IO.ImChunkedStream.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.ReadByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Intermech.IO.ImChunkedStream.WriteByte(System.Byte)">
            <summary>
            Write data
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Intermech.IO.PathDictionary`1">
            <summary>
            Реализует словарь, где ключем выступает имя файла.
            </summary>
            <typeparam name="TValue">Тип значений в словаре</typeparam>
        </member>
        <member name="M:Intermech.IO.PathDictionary`1.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.IO.PathDictionary`1.#ctor(System.Int32)">
            <summary>
            Создает объект.
            </summary>
            <param name="capacity">Начальная емкость словаря</param>
        </member>
        <member name="M:Intermech.IO.PathUtils.IsPlacedIn(System.String,System.String)">
            <summary>
            Проверяет, содержится ли элемент в указанной папке или ее подпапках.
            </summary>
            <param name="itemPath">Путь к проверяемому элементу</param>
            <param name="locationPath">Путь к папке</param>
            <returns>Результат проверки</returns>
        </member>
        <member name="M:Intermech.IO.PathUtils.GetRelativePath(System.String,System.String,Intermech.IO.RelativePathOptions)">
            <summary>
            Преобразовывает путь в относительный по указанному базовому пути.
            </summary>
            <param name="itemPath">Преобразовываемый путь</param>
            <param name="baseDir">Базовый путь</param>
            <param name="options">Опции, управляющие процессом вычисления относительного пути</param>
            <returns>Результат преобразования. Может быть null, если невозможно сформировать относительный путь</returns>
            <exception cref="T:System.InvalidOperationException">Невозможно вычислить относительный путь</exception>
        </member>
        <member name="P:Intermech.IO.PathUtils.CurrentPathComparer">
            <summary>
            Возвращает объект для сравнения файловых имен и путей для текущего потока.
            </summary>
        </member>
        <member name="T:Intermech.IO.RegexHelper">
            <summary>
            Содержит методы по созданию наиболее распространенных regex'ов.
            </summary>
        </member>
        <member name="M:Intermech.IO.RegexHelper.ToRegex(System.String,System.Boolean)">
            <summary>
            Создает regex из файловой маски, содержащей символы подстановки * и ?.
            </summary>
            <param name="fileMask">Файловая маска</param>
            <param name="ignoreCase">Нужно ли игнорировать регистр символов</param>
            <returns>Созданные regex</returns>
        </member>
        <member name="M:Intermech.IO.RegexHelper.ToRegexString(System.String)">
            <summary>
            Переводит текст файловой маски в текст regex.
            </summary>
            <param name="fileMask">Текст файловой маски</param>
            <returns>Текст regex</returns>
        </member>
        <member name="F:Intermech.IO.RegexHelper.filemaskEscapeFrom">
            <summary>
            Список символов в файловой маске, которые должны употребляться со слэшем
            </summary>
        </member>
        <member name="F:Intermech.IO.RegexHelper.filemaskEscapeTo">
            <summary>
            Список символов со слэшем
            </summary>
        </member>
        <member name="T:Intermech.IO.StayAliveStreamProxy">
            <summary>
            Прокси класс, игнорирующий закрытие исходного потока
            </summary>
            <remarks>
            Для передачи в сторонние библиотеки, где принудительно закрывается поток и нужно остановить исходный поток открытым.
            </remarks>
        </member>
        <member name="F:Intermech.IO.StayAliveStreamProxy._sourceStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.IO.StayAliveStreamProxy.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.IO.StayAliveStreamProxy.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.StayAliveStreamProxy.SetLength(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Intermech.IO.StayAliveStreamProxy.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.IO.StayAliveStreamProxy.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Intermech.IO.StayAliveStreamProxy.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermech.IO.StayAliveStreamProxy.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermech.IO.StayAliveStreamProxy.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermech.IO.StayAliveStreamProxy.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermech.IO.StayAliveStreamProxy.Position">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.IO.StayAliveStreamProxy.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Intermech.IO.SymbolicLinkManager">
            <summary>
            Базовый класс для менеджера операций с символическими ссылками. Реализация должна быть thread safe.
            </summary>
        </member>
        <member name="P:Intermech.IO.SymbolicLinkManager.IsSupported">
            <summary>
            Возвращает признак, что операции с символическими ссылками поддерживаются операционной системой.
            </summary>
        </member>
        <member name="M:Intermech.IO.SymbolicLinkManager.CreateLink(System.String,System.String)">
            <summary>
            Создает символическую ссылку.
            </summary>
            <param name="symlinkPath">Абсолютный путь символической ссылки</param>
            <param name="targetPath">Путь к цели символической ссылки - файлу или каталогу. Может быть в абсолютной или относительной форме</param>
            <exception cref="T:ArgumentNullException">symlinkPath || targetPath</exception>
            <exception cref="T:ArgumentException">Путь к символической ссылке задан не в абсолютной форме</exception>
            <exception cref="T:IOException">Ошибка при создании символической ссылки</exception>
        </member>
        <member name="M:Intermech.IO.SymbolicLinkManager.DoCreateLink(System.String,System.String)">
            <summary>
            Создает символическую ссылку.
            </summary>
            <param name="symlinkPath">Абсолютный путь символической ссылки</param>
            <param name="targetPath">Путь к цели символической ссылки - файлу или каталогу. Может быть в абсолютной или относительной форме</param>
            <exception cref="T:IOException">Ошибка при создании символической ссылки</exception>
        </member>
        <member name="M:Intermech.IO.SymbolicLinkManager.GetLinkTarget(System.String)">
            <summary>
            Возвращает путь к цели для указанной символической ссылки. Метод может вернуть null, если указанный путь не является символической ссылкой.
            </summary>
            <param name="symlinkPath">Абсолютный путь символической ссылки</param>
            <returns>Путь к цели символической ссылки в абсолютной форме или null, если указанный путь не является символической ссылкой</returns>
            <exception cref="T:ArgumentNullException">symlinkPath</exception>
            <exception cref="T:ArgumentException">Путь к символической ссылке задан не в абсолютной форме</exception>
            <exception cref="T:IOException">Ошибка при операции с символической ссылкой</exception>
        </member>
        <member name="M:Intermech.IO.SymbolicLinkManager.DoGetLinkTarget(System.String)">
            <summary>
            Возвращает путь к цели для указанной символической ссылки. Метод должен вернуть null, если указанный путь не является символической ссылкой
            </summary>
            <param name="symlinkPath">Абсолютный путь символической ссылки</param>
            <returns>Путь к цели символической ссылки в абсолютной форме или null, если указанный путь не является символической ссылкой</returns>
            <exception cref="T:IOException">Ошибка при операции с символической ссылкой</exception>
        </member>
        <member name="T:Intermech.IO.WindowsJunctionPointsManager">
            <summary>
            Реализация менеджера операций с точками соединения каталогов для Microsoft Windows. Реализация является thread safe.
            </summary>
        </member>
        <member name="M:Intermech.IO.WindowsJunctionPointsManager.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.IO.WindowsJunctionPointsManager.IsSupported">
            <summary>
            Возвращает признак, что операции с точками соединения поддерживаются операционной системой.
            </summary>
        </member>
        <member name="M:Intermech.IO.WindowsJunctionPointsManager.CreateLink(System.String,System.String)">
            <summary>
            Создает точку соединения.
            </summary>
            <param name="linkPath">Абсолютный путь к каталогу, который будет точкой соединения</param>
            <param name="targetPath">Путь к целевому каталогу. Может быть в абсолютной или относительной форме</param>
            <exception cref="T:ArgumentNullException">linkPath || targetPath</exception>
            <exception cref="T:ArgumentException">Путь к каталогу, который будет точкой соеднения, задан не в абсолютной форме</exception>
            <exception cref="T:IOException">Ошибка при создании точки соединения</exception>
        </member>
        <member name="M:Intermech.IO.WindowsJunctionPointsManager.DoCreateLink(System.String,System.String)">
            <summary>
            Создает точку соединения.
            </summary>
            <param name="linkPath">Абсолютный путь к каталогу, который будет точкой соединения</param>
            <param name="targetPath">Путь к целевому каталогу. Может быть в абсолютной или относительной форме</param>
            <exception cref="T:IOException">Ошибка при создании точки соединения</exception>
        </member>
        <member name="M:Intermech.IO.WindowsJunctionPointsManager.GetLinkTarget(System.String)">
            <summary>
            Возвращает путь к целевому каталогу для указанной точки соединения. Метод может вернуть null, если указанный путь не является точкой соединения.
            </summary>
            <param name="linkPath">Абсолютный путь к каталогу, являющемуся точкой соединения</param>
            <returns>Путь к целевому каталогу в абсолютной форме или null, если указанный путь не является точкой соединения</returns>
            <exception cref="T:ArgumentNullException">linkPath</exception>
            <exception cref="T:ArgumentException">Путь к каталогу, который будет точкой соеднения, задан не в абсолютной форме</exception>
            <exception cref="T:IOException">Ошибка при операции с точкой соединения</exception>
        </member>
        <member name="M:Intermech.IO.WindowsJunctionPointsManager.DoGetLinkTarget(System.String)">
            <summary>
            Возвращает путь к целевому каталогу для указанной точки соединения. Метод может вернуть null, если указанный путь не является точкой соединения.
            </summary>
            <param name="linkPath">Абсолютный путь к каталогу, являющемуся точкой соединения</param>
            <returns>Путь к целевому каталогу в абсолютной форме или null, если указанный путь не является точкой соединения</returns>
            <exception cref="T:IOException">Ошибка при операции с точкой соединения</exception>
        </member>
        <member name="M:Intermech.IO.WindowsJunctionPointsManager.BreakLink(System.String)">
            <summary>
            Разрывает связь между точкой соединения и целевым каталогом.
            </summary>
            <param name="linkPath">Абсолютный путь к каталогу, являющемуся точкой соединения</param>
            <exception cref="T:ArgumentNullException">linkPath</exception>
            <exception cref="T:ArgumentException">Путь к каталогу, который будет точкой соеднения, задан не в абсолютной форме</exception>
            <exception cref="T:IOException">Ошибка при операции с точкой соединения</exception>
        </member>
        <member name="M:Intermech.IO.WindowsJunctionPointsManager.DoBreakLink(System.String)">
            <summary>
            Разрывает связь между точкой соединения и целевым каталогом.
            </summary>
            <param name="linkPath">Абсолютный путь к каталогу, являющемуся точкой соединения</param>
            <exception cref="T:IOException">Ошибка при операции с точкой соединения</exception>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.ERROR_NOT_A_REPARSE_POINT">
            <summary>
            The file or directory is not a reparse point.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.ERROR_REPARSE_ATTRIBUTE_CONFLICT">
            <summary>
            The reparse point attribute cannot be set because it conflicts with an existing attribute.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.ERROR_INVALID_REPARSE_DATA">
            <summary>
            The data present in the reparse point buffer is invalid.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.ERROR_REPARSE_TAG_INVALID">
            <summary>
            The tag present in the reparse point buffer is invalid.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.ERROR_REPARSE_TAG_MISMATCH">
            <summary>
            There is a mismatch between the tag specified in the request and the tag present in the reparse point.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.FSCTL_SET_REPARSE_POINT">
            <summary>
            Command to set the reparse point data block.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.FSCTL_GET_REPARSE_POINT">
            <summary>
            Command to get the reparse point data block.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.FSCTL_DELETE_REPARSE_POINT">
            <summary>
            Command to delete the reparse point data base.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.IO_REPARSE_TAG_MOUNT_POINT">
            <summary>
            Reparse point tag used to identify mount points and junction points.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.NonInterpretedPathPrefix">
            <summary>
            This prefix indicates to NTFS that the path is to be treated as a non-interpreted
            path in the virtual file system.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.ReparseTag">
            <summary>
            Reparse point tag. Must be a Microsoft reparse point tag.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.ReparseDataLength">
            <summary>
            Size, in bytes, of the data after the Reserved member. This can be calculated by:
            (4 * sizeof(ushort)) + SubstituteNameLength + PrintNameLength + 
            (namesAreNullTerminated ? 2 * sizeof(char) : 0);
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.Reserved">
            <summary>
            Reserved; do not use. 
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.SubstituteNameOffset">
            <summary>
            Offset, in bytes, of the substitute name string in the PathBuffer array.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.SubstituteNameLength">
            <summary>
            Length, in bytes, of the substitute name string. If this string is null-terminated,
            SubstituteNameLength does not include space for the null character.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.PrintNameOffset">
            <summary>
            Offset, in bytes, of the print name string in the PathBuffer array.
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.PrintNameLength">
            <summary>
            Length, in bytes, of the print name string. If this string is null-terminated,
            PrintNameLength does not include space for the null character. 
            </summary>
        </member>
        <member name="F:Intermech.IO.WindowsJunctionPointsManager.NativeMethods.REPARSE_DATA_BUFFER.PathBuffer">
            <summary>
            A buffer containing the unicode-encoded path string. The path string contains
            the substitute name string and print name string.
            </summary>
        </member>
        <member name="T:Intermech.IO.WindowsSymbolicLinkManager">
            <summary>
            Реализация менеджера операций с символическими ссылками для Microsoft Windows. Реализация является thread safe.
            </summary>
            <remarks>
            Для корректной работы менеджеру требуется системная привилегия SeCreateSymbolicLinkPrivilege, которую можно 
            раздать через редактор локальной политики безопасности. Кроме того, если включен UAC и пользователь входит
            в группу 'Администраторы' то требуется повышение привилегий до административных. Для обычных пользователей
            достаточно наличия привилегии.
            </remarks>
        </member>
        <member name="M:Intermech.IO.WindowsSymbolicLinkManager.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.IO.WindowsSymbolicLinkManager.IsSupported">
            <summary>
            Возвращает признак, что операции с символическими ссылками поддерживаются операционной системой.
            </summary>
        </member>
        <member name="M:Intermech.IO.WindowsSymbolicLinkManager.DoCreateLink(System.String,System.String)">
            <summary>
            Создает символическую ссылку.
            </summary>
            <param name="symlinkPath">Абсолютный путь символической ссылки</param>
            <param name="targetPath">Путь к цели символической ссылки - файлу или каталогу. Может быть в абсолютной или относительной форме</param>
            <exception cref="T:IOException">Ошибка при создании символической ссылки</exception>
        </member>
        <member name="M:Intermech.IO.WindowsSymbolicLinkManager.DoGetLinkTarget(System.String)">
            <summary>
            Возвращает путь к цели для указанной символической ссылки. Метод должен вернуть null, если указанный путь не является символической ссылкой
            </summary>
            <param name="symlinkPath">Абсолютный путь символической ссылки</param>
            <returns>Путь к цели символической ссылки в абсолютной форме или null, если указанный путь не является символической ссылкой</returns>
            <exception cref="T:IOException">Ошибка при операции с символической ссылкой</exception>
        </member>
        <member name="T:Intermech.IServiceRef">
            <summary>
            Интерфейс ссылки на общедоступный сервис приложения с защитой от null значений.
            </summary>
        </member>
        <member name="P:Intermech.IServiceRef.HasValue">
            <summary>
            Возвращает true, если у ссылки есть целевой объект.
            </summary>
        </member>
        <member name="T:Intermech.Localization.CustomAttributeHelper">
            <summary>
            Вспомогательный класс для локализации содержимого атрибутов <see cref="T:Intermech.Localization.BaseCustomCategoryAttribute"/>, <see cref="T:Intermech.Localization.BaseCustomDisplayNameAttribute"/>, <see cref="T:Intermech.Localization.BaseCustomDescriptionAttribute"/>
            </summary>
        </member>
        <member name="T:Intermech.Localization.LocalizationManager">
            <summary>
            Менеджер для получения локализованных ресурсов.
            </summary>
            <remarks>
            Реализация является thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Создает объект.
            </summary>
            <param name="resourceAssembly">Сборка с ресурсами для локализации</param>
            <param name="resourceName">Имя ресурса для локализации</param>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.#ctor(System.Type,System.String)">
            <summary>
            Создает объект.
            </summary>
            <param name="typeInResourceAssembly">Тип, объявленный в сборке с ресурсами для локализации</param>
            <param name="resourceName">Имя ресурса для локализации</param>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.TryGetString(System.String)">
            <summary>
            Возвращает локализованную строку или null, если строка отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя строки</param>
            <returns>Локализованная строка или null</returns>
            <remarks>
            Метод является прямой оберткой над внутренним <see cref="T:System.Resources.ResourceManager"/>.
            Не используйте его без необходимости, предпочтительным методом является <see cref="M:Intermech.Localization.LocalizationManager.GetString(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.TryGetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Возвращает локализованную строку или null, если строка отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя строки</param>
            <param name="culture">Культура локализации</param>
            <returns>Локализованная строка или null</returns>
            <remarks>
            Метод является прямой оберткой над внутренним <see cref="T:System.Resources.ResourceManager"/>.
            Не используйте его без необходимости, предпочтительным методом является <see cref="M:Intermech.Localization.LocalizationManager.GetString(System.String,System.Globalization.CultureInfo)"/>.
            </remarks>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.GetString(System.String)">
            <summary>
            Возвращает локализованную строку или ее имя, если строка отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя строки</param>
            <returns>Локализованная строка или ее имя</returns>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Возвращает локализованную строку или ее имя, если строка отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя строки</param>
            <param name="culture">Культура локализации</param>
            <returns>Локализованная строка или ее имя</returns>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.GetString(System.String,System.Object[])">
            <summary>
            Возвращает локализованную строку с форматированием или ее имя, если строка отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя строки</param>
            <param name="args">Аргументы для форматирования</param>
            <returns>Локализованная строка или ее имя</returns>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.GetString(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Возвращает локализованную строку с форматированием или ее имя, если строка отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя строки</param>
            <param name="culture">Культура локализации</param>
            <param name="args">Аргументы для форматирования</param>
            <returns>Локализованная строка или ее имя</returns>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.TryGetObject(System.String)">
            <summary>
            Возвращает локализованный объект или null, если объект отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя объекта</param>
            <returns>Локализованный объект или null</returns>
            <remarks>
            Метод является прямой оберткой над внутренним <see cref="T:System.Resources.ResourceManager"/>.
            Не используйте его без необходимости, предпочтительным методом является <see cref="!:GetObject(string)"/>.
            </remarks>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.TryGetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Возвращает локализованный объект или null, если объект отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя объекта</param>
            <param name="culture">Культура локализации</param>
            <returns>Локализованный объект или null</returns>
            <remarks>
            Метод является прямой оберткой над внутренним <see cref="T:System.Resources.ResourceManager"/>.
            Не используйте его без необходимости, предпочтительным методом является <see cref="M:Intermech.Localization.LocalizationManager.GetObject(System.String,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.GetObject(System.String,System.Object)">
            <summary>
            Возвращает локализованный объект или значение по умолчанию, если объект отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя объекта</param>
            <returns>Локализованный объект или значение по умолчанию</returns>
        </member>
        <member name="M:Intermech.Localization.LocalizationManager.GetObject(System.String,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Возвращает локализованный объект или значение по умолчанию, если объект отсутствует в ресурсах локализации.
            </summary>
            <param name="name">Имя объекта</param>
            <param name="culture">Культура локализации</param>
            <returns>Локализованный объект или значение по умолчанию</returns>
        </member>
        <member name="T:Intermech.Localization.LocalizationSet">
            <summary>
            Набор ресурсов для локализации сборки.
            </summary>
            <remarks>
            Реализация является thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.Localization.LocalizationSet.#ctor(System.String,System.String,System.String,System.Reflection.Assembly,Intermech.Localization.LocalizationSet)">
            <summary>
            Создает объект.
            </summary>
            <param name="defaultNamespaceName">Имя пространства имен сборки по умолчанию (см. свойства csproj-проекта)</param>
            <param name="mainStreamName">Относительный путь и имя потока без расширения для основного ресурса локализации</param>
            <param name="attributeStreamName">Относительный путь и имя потока без расширения для локализации атрибутов</param>
            <param name="assembly">Сборка, в которой следует искать ресурсы локализации</param>
            <param name="fallbackSet">Набор ресурсов, который будет использован, если запрашиваемая локализация не найдена в текущем наборе</param>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="defaultNamespaceName"/> содержит null; параметр <paramref name="mainStreamName"/> содержит null; параметр <paramref name="attributeStreamName"/> содержит null; параметр <paramref name="assembly"/> содержит null</exception>
        </member>
        <member name="P:Intermech.Localization.LocalizationSet.RM">
            <summary>
            Возвращает объект для получения локализации из основного ресурса
            </summary>
        </member>
        <member name="P:Intermech.Localization.LocalizationSet.RMA">
            <summary>
            Возвращает объект для получения локализации из ресурса для атрибутов
            </summary>
        </member>
        <member name="T:Intermech.Localization.LocalizationSetBuilder">
            <summary>
            Построитель для объектов типа <see cref="T:Intermech.Localization.LocalizationSet"/>
            </summary>
            <remarks>
            Реализация не является thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetResourceAssembly(System.Reflection.Assembly)">
            <summary>
            Задает сборку, содержащую ресурсы для локализации
            </summary>
            <param name="resourceAssembly">Сборка с ресурсами для локализации</param>
            <returns>Текущий объект</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="resourceAssembly"/> содержит null</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetResourceAssemblyFromType(System.Type)">
            <summary>
            Задает сборку, содержащую ресурсы для локализации, используя указанный тип.
            </summary>
            <param name="typeInResourceAssembly">Тип, объявленный в сборке с ресурсами для локализации</param>
            <returns>Текущий объект</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="typeInResourceAssembly"/> содержит null</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetDefaultNamespace(System.String)">
            <summary>
            Задает имя пространства имен по умолчанию для ресурсной сборке, которое задается в параметрах csproj-проекта.
            </summary>
            <param name="namespaceName">Имя пространства имен по умолчанию для ресурсной сборке, которое задается в параметрах csproj-проекта</param>
            <returns>Текущий объект</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="namespaceName"/> содержит null</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetMainResourceStream(System.String)">
            <summary>
            Задает имя основного ресурса для локализации.
            Имя быть без расширения и содержать относительный путь к файлу ресурса, разделенный точками ('.')
            </summary>
            <param name="streamName">Имя основного ресурса для локализации</param>
            <returns>Текущий объект</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="streamName"/> содержит null</exception>
            <exception cref="T:System.ArgumentException">параметр <paramref name="streamName"/> содержит пустое значение</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetAttributeResourceStream(System.String)">
            <summary>
            Задает имя дополнительного ресурса для локализации атрибутов C#-кода.
            Имя быть без расширения и содержать относительный путь к файлу ресурса, разделенный точками ('.')
            </summary>
            <param name="streamName">Имя основного ресурса для локализации</param>
            <returns>Текущий объект</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="streamName"/> содержит null</exception>
            <exception cref="T:System.ArgumentException">параметр <paramref name="streamName"/> содержит пустое значение</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetFallbackSet(Intermech.Localization.LocalizationSet)">
            <summary>
            Задает дополнительный набор для локализации, который будет использован, если требуемый ресурс отсутствует в основном наборе.
            </summary>
            <returns>Текущий объект</returns>
            <param name="fallbackSet">Дополнительный набор для локализации</param>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="fallbackSet"/> содержит null</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetFallbackSetFromLocalizationHolder(System.Type)">
            <summary>
            Задает дополнительный набор для локализации, который будет использован, если требуемый ресурс отсутствует в основном наборе.
            </summary>
            <returns>Текущий объект</returns>
            <param name="localizationHolder">Класс LocalizationHolder, содержащий дополнительный набор для локализации</param>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="localizationHolder"/> содержит null</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.SetFallbackSetFromLocalizationHolder(System.String)">
            <summary>
            Задает дополнительный набор для локализации, который будет использован, если требуемый ресурс отсутствует в основном наборе.
            </summary>
            <returns>Текущий объект</returns>
            <param name="localizationHolderTypeName">Полное имя класса LocalizationHolder, содержащего дополнительный набор для локализации</param>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="localizationHolderTypeName"/> содержит null</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.ReflectionGetLocalizationSet(System.Type)">
            <summary>
            Возвращает набор для локализации из другой сборки, используя класс LocalizationHolder из той сборки.
            </summary>
            <param name="localizationHolder">Имя класса LocalizationHolder в другой сборке</param>
            <returns>Набор ресурсов для локализаци</returns>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="localizationHolder"/> содержит null</exception>
            <exception cref="T:System.NotSupportedException">Указанный LocalizationHolder не содержит поля 'ls', содержащего ссылку на набор локализации</exception>
        </member>
        <member name="M:Intermech.Localization.LocalizationSetBuilder.Build">
            <summary>
            Создает набор ресурсов для локализации.
            </summary>
            <returns>Набор ресурсов для локализации</returns>
        </member>
        <member name="T:Intermech.MatrixD">
            <summary>Инкапсулирует матрицу 3 на 3 афинного преобразования. Этот класс не может быть наследован.</summary>
            <remarks>Матрица 3 на 3 содержит значения x в первом столбце, y – во втором и w – в третьем.</remarks>
        </member>
        <member name="T:Intermech.MatrixD.MatrixOrder">
            <summary> Указывает порядок матричных преобразований. </summary>
            <remarks>Матричные преобразования не обязательно перестановочны. Важен порядок их применения. </remarks>
        </member>
        <member name="F:Intermech.MatrixD.MatrixOrder.Append">
            <summary> Новое преобразование применяется после старого. </summary>
        </member>
        <member name="F:Intermech.MatrixD.MatrixOrder.Prepend">
            <summary> Новое преобразование применяется перед старым. </summary>
        </member>
        <member name="M:Intermech.MatrixD.#ctor">
            <summary>Инициализирует новый экземпляр класса MatrixD в виде единичной матрицы.</summary>
        </member>
        <member name="M:Intermech.MatrixD.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Инициализирует новый экземпляр класса MatrixD с указанными элементами.</summary>
            <param name="m11"> Значение на пересечении первой строки и первого столбца нового объекта MatrixD.</param>
            <param name="m12"> Значение на пересечении первой строки и второго столбца нового объекта MatrixD. </param>
            <param name="m21"> Значение на пересечении второй строки и первого столбца нового объекта MatrixD. </param>
            <param name="m22"> Значение на пересечении второй строки и второго столбца нового объекта MatrixD. </param>
            <param name="dx">  Значение на пересечении третьей строки и первого столбца нового объекта MatrixD.</param>
            <param name="dy">  Значение на пересечении третьей строки и второго столбца нового объекта MatrixD.</param>
        </member>
        <member name="P:Intermech.MatrixD.Elements">
            <summary>Получает массив значений с плавающей запятой, представляющий элементы объекта MatrixD.</summary>
            <returns>Массив значений с плавающей запятой, представляющий элементы объекта MatrixD.</returns>
        </member>
        <member name="M:Intermech.MatrixD.Clone">
            <summary>Создает точную копию объекта MatrixD.</summary>
            <returns>Объект MatrixD, созданный данным методом.</returns>
        </member>
        <member name="M:Intermech.MatrixD.Equals(System.Object)">
            <summary>Проверяет, является ли заданный объект объектом MatrixD и идентичен ли он этому объекту MatrixD.</summary>
            <returns>Данный метод возвращает значение true, если obj является указанным объектом MatrixD, идентичным объекту MatrixD; в противном случае – false.</returns>
            <param name="obj">Объект для проверки.</param>
        </member>
        <member name="M:Intermech.MatrixD.GetHashCode">
            <summary>Возвращает хэш-код.</summary>
            <returns>Хеш-код для этого объекта MatrixD.</returns>
        </member>
        <member name="M:Intermech.MatrixD.Invert">
            <summary>Обращает матрицу MatrixD, если она обратима.</summary>
        </member>
        <member name="M:Intermech.MatrixD.Multiply(Intermech.MatrixD)">
            <summary>Умножает объект MatrixD на матрицу, указанную в параметре matrix, путем добавления его в начало.</summary>
            <param name="matrix">Объект MatrixD, на который умножается объект MatrixD.</param>
        </member>
        <member name="M:Intermech.MatrixD.Multiply(Intermech.MatrixD,Intermech.MatrixD.MatrixOrder)">
            <summary>Умножает объект MatrixD на матрицу, указанную в параметре matrix, в порядке, задаваемом в параметре order.</summary>
            <param name="matrix"> Объект MatrixD, на который умножается объект MatrixD.</param>
            <param name="order">Перечисление MatrixOrder, представляющее порядок перемножения.</param>
        </member>
        <member name="M:Intermech.MatrixD.Reset">
            <summary>Сбрасывает объект MatrixD, так что его элементы становятся единичными матрицами.</summary>
            <remarks>Элементы на главной диагонали единичной матрицы равны 1. Все остальные ее элементы равны 0.</remarks>
        </member>
        <member name="M:Intermech.MatrixD.Rotate(System.Double)">
            <summary>Добавляет в начало объекта MatrixD поворот по часовой стрелке вокруг начала координат на указанный угол.</summary>
            <param name="angle">Угол(градусы) поворота.</param>
        </member>
        <member name="M:Intermech.MatrixD.Rotate(System.Double,Intermech.MatrixD.MatrixOrder)">
            <summary>Применяет поворот по часовой стрелке на величину, указаную в параметре angle, вокруг начала координат (нулевые координаты x и y) к объекту MatrixD.</summary>
            <param name="angle">Угол(градусы) поворота.</param>
            <param name="order">Перечисление MatrixOrder, указывающее порядок (в конце или в начале), в котором поворот применяется к объекту MatrixD.</param>
        </member>
        <member name="M:Intermech.MatrixD.RotateAt(System.Double,Intermech.PointD)">
            <summary>Применяет поворот по часовой стрелке вокруг указанной в параметре point точки к объекту MatrixD, добавляя поворот в начало.</summary>
            <param name="angle">Угол(градусы) поворота. </param>
            <param name="point">Структура PointD, представляющая центральную точку поворота.</param>
        </member>
        <member name="M:Intermech.MatrixD.RotateAt(System.Double,Intermech.PointD,Intermech.MatrixD.MatrixOrder)">
            <summary>Применяет поворот по часовой стрелке вокруг указанной точки к объекту MatrixD в указанном порядке.</summary>
            <param name="angle">Угол(градусы) поворота.</param>
            <param name="point">Структура PointD, представляющая центральную точку поворота.</param>
            <param name="order">Перечисление MatrixOrder, указывающее порядок (в конце или в начале), в котором применяется поворот.</param>
        </member>
        <member name="M:Intermech.MatrixD.Scale(System.Double,System.Double)">
            <summary>Применяет указанный вектор масштабирования к объекту MatrixD, добавляя вектор в начало.</summary>
            <param name="scaleX">Коэффициент изменения масштаба объекта MatrixD вдоль оси Х.</param>
            <param name="scaleY">Коэффициент изменения масштаба объекта MatrixD вдоль оси Y.</param>
        </member>
        <member name="M:Intermech.MatrixD.Scale(System.Double,System.Double,Intermech.MatrixD.MatrixOrder)">
            <summary>Применяет указанный вектор масштабирования (scaleX и scaleY) к объекту MatrixD в указанном порядке.</summary>
            <param name="scaleX">Коэффициент изменения масштаба объекта MatrixD вдоль оси Х.</param>
            <param name="scaleY">Коэффициент изменения масштаба объекта MatrixD вдоль оси Y.</param>
            <param name="order">Перечисление MatrixOrder, указывающее порядок (в конце или в начале), в котором вектор масштабирования применяется к объекту MatrixD.</param>
        </member>
        <member name="M:Intermech.MatrixD.Shear(System.Double,System.Double)">
            <summary>Применяет указанный вектор сдвига к объекту MatrixD, добавляя преобразование сдвига в начало.</summary>
            <param name="shearX">Коэффициент горизонтального сдвига.</param>
            <param name="shearY">Коэффициент вертикального сдвига. </param>
        </member>
        <member name="M:Intermech.MatrixD.Shear(System.Double,System.Double,Intermech.MatrixD.MatrixOrder)">
            <summary>Применяет указанный вектор сдвига к объекту MatrixD в указанном порядке.</summary>
            <param name="shearX">Коэффициент горизонтального сдвига.</param>
            <param name="shearY">Коэффициент вертикального сдвига.</param>
            <param name="order">Перечисление MatrixOrder, указывающее порядок (в конце или в начале), в котором применяется сдвиг.</param>
        </member>
        <member name="M:Intermech.MatrixD.TransformPoints(Intermech.PointD[])">
            <summary>Применяет геометрическое преобразование, представляемое объектом MatrixD, к указанному массиву точек.</summary>
            <param name="pts">Массив структур PointD, который представлет точки для преобразования.</param>
        </member>
        <member name="M:Intermech.MatrixD.TransformVectors(Intermech.PointD[])">
            <summary>Умножает каждый вектор массива на матрицу. Элементы сдвига данной матрицы (третья строка) игнорируются.</summary>
            <param name="pts">Массив структур Point, который представляет точки для преобразования.</param>
        </member>
        <member name="M:Intermech.MatrixD.Translate(System.Double,System.Double)">
            <summary>Применяет указанный вектор сдвига (offsetX и offsetY) к объекту MatrixD, добавляя вектор в начало.</summary>
            <param name="offsetX">Величина x, на которую сдвигается объект MatrixD.</param>
            <param name="offsetY">Величина y, на которую сдвигается объект MatrixD.</param>
        </member>
        <member name="M:Intermech.MatrixD.Translate(System.Double,System.Double,Intermech.MatrixD.MatrixOrder)">
            <summary>Применяет указанный вектор сдвига к объекту MatrixD в указанном порядке.</summary>
            <param name="offsetX">Величина x, на которую сдвигается объект MatrixD.</param>
            <param name="offsetY">Величина y, на которую сдвигается объект MatrixD.</param>
            <param name="order">Перечисление MatrixOrder, указывающее порядок (в конце или в начале), в котором сдвиг применяется к объекту MatrixD.</param>
        </member>
        <member name="P:Intermech.MatrixD.IsIdentity">
            <summary>Получает значение, определяющее, является ли объект MatrixD единичной матрицей.</summary>
            <returns>Это свойство имеет значение true, если матрица Matrix единичная; в противном случае false.</returns>
        </member>
        <member name="P:Intermech.MatrixD.IsInvertible">
            <summary>Получает значение, определяющее, является ли объект MatrixD обратимым.</summary>
            <returns>Это свойство имеет значение true, если матрица Matrix является обратимой; в противном случае false.</returns>
        </member>
        <member name="P:Intermech.MatrixD.OffsetX">
            <summary>Получает значение сдвига по x (значение dx, или элемент на пересечении третьей строки и первого столбца) объекта MatrixD.</summary>
            <returns>Значение сдвига по x объекта MatrixD.</returns>
        </member>
        <member name="P:Intermech.MatrixD.OffsetY">
            <summary>Получает значение сдвига по y (значение dy, или элемент на пересечении третьей строки и второго столбца) объекта MatrixD.</summary>
            <returns>Значение сдвига по y объекта MatrixD.</returns>
        </member>
        <member name="T:Intermech.PointD">
            <summary>Представляет упорядоченную пару координат Х и Y с плавающей запятой, определяющую точку на двумерной плоскости.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:Intermech.PointD.Empty">
            <summary>Представляет новый экземпляр класса PointD с неинициализированными данными членов.</summary>
        </member>
        <member name="F:Intermech.PointD._x">
            <summary> координата X </summary>
        </member>
        <member name="F:Intermech.PointD._y">
            <summary> координата Y </summary>
        </member>
        <member name="M:Intermech.PointD.#cctor">
            <summary>инициализация статических переменных</summary>
        </member>
        <member name="M:Intermech.PointD.#ctor(System.Double,System.Double)">
            <summary>Инициализирует новый экземпляр класса PointD с указанными координатами.</summary>
            <param name="x">Горизонтальное положение точки.</param>
            <param name="y">Вертикальное положение точки.</param>
        </member>
        <member name="M:Intermech.PointD.#ctor(System.Drawing.PointF)">
            <summary>Инициализирует новый экземпляр класса PointD с указанными координатами.</summary>
            <param name="pointF">точка типа  PointF</param>
        </member>
        <member name="P:Intermech.PointD.IsEmpty">
            <summary>Получает значение, определяющее, пуст ли класс PointD. </summary>
            <returns>Это свойство возвращает значение true, если значения параметров X и Y равны нулю; в противном случае — false.</returns>
        </member>
        <member name="P:Intermech.PointD.X">
            <summary>Получает координату Х PointD.</summary>
            <returns>Координата Х PointD.</returns>
        </member>
        <member name="P:Intermech.PointD.Y">
            <summary>Получает координату Y PointD.</summary>
            <returns>Координата Y PointD.</returns>
        </member>
        <member name="M:Intermech.PointD.op_Equality(Intermech.PointD,Intermech.PointD)">
            <summary>Сравнивает две структуры PointD. Результат указывает, равны значения свойств X и Y двух объектов PointD или нет.</summary>
            <param name="left">Класс PointD для сравнения.</param>
            <param name="right">Класс PointD для сравнения.</param>
            <returns>Возвращает значение true, если значения свойств X и Y левого и правого объектов PointD равны; в противном случае — false.</returns>
        </member>
        <member name="M:Intermech.PointD.op_Inequality(Intermech.PointD,Intermech.PointD)">
            <summary>Сравнивает два объекта PointD. Результат указывает несовпадение значений свойств X или Y двух объектов PointD.</summary>
            <param name="left">Класс PointD для сравнения.</param>
            <param name="right">Класс PointD для сравнения.</param>
            <returns>Оператор возвращает значение true, если значения свойств Х и Y левого и правого параметров различаются; в противном случае — false.</returns>
        </member>
        <member name="M:Intermech.PointD.Equals(System.Object)">
            <summary>Задает, содержит объект PointD те же координаты, что и указанный объект Object, или нет. </summary>
            <param name="obj">Object для проверки.</param>
            <returns>Метод возвращает значение true, если obj является PointD и имеет такие же координаты, как и PointD.</returns>
        </member>
        <member name="M:Intermech.PointD.Equals(Intermech.PointD)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Intermech.PointD.GetHashCode">
            <summary> Возвращает хеш-код объекта PointD.</summary>
            <returns>Целое значение, указывающее значение хеша для объекта PointD.</returns>
        </member>
        <member name="M:Intermech.PointD.ToString">
            <summary>Преобразует PointD в строку, доступную для чтения.</summary>
            <returns>Строка, представляющая PointD.</returns>
        </member>
        <member name="M:Intermech.PointD.op_Addition(Intermech.PointD,Intermech.SizeD)">
            <summary>Преобразует PointD при помощи заданного SizeD. </summary>
            <param name="point">Класс PointD для преобразования.</param>
            <param name="size">SizeD, указывающий пару чисел, которые нужно добавить к значениям координат pt.</param>
            <returns>Это свойство возвращает объект PointD.</returns>
        </member>
        <member name="M:Intermech.PointD.op_Subtraction(Intermech.PointD,Intermech.SizeD)">
            <summary>Преобразует PointD при помощи отрицательного значения заданного SizeD. </summary>
            <param name="point">Класс PointD для преобразования.</param>
            <param name="size">SizeD, указывающий пару чисел, которые нужно отнять из значений координат pt. </param>
            <returns>Это свойство возвращает объект PointD.</returns>
        </member>
        <member name="M:Intermech.PointD.ToPointF(Intermech.PointD)">
            <summary>Преобразует указанный объект PointD в объект PointF, усекая значения объекта PointD.</summary>
            <param name="pointD">Преобразуемый объект PointD.</param>
            <returns>Объект PointF, который является результатом преобразований этого метода.</returns>
        </member>
        <member name="M:Intermech.PointD.Offset(System.Double,System.Double)">
            <summary>Преобразует PointD на указанное число.</summary>
            <param name="x">Число для смещения координаты Х.</param>
            <param name="y">Число для смещения координаты Y.</param>
        </member>
        <member name="T:Intermech.PointDConverter">
            <summary>Преобразует объект Point3D из одного типа данных в другой. Этот класс доступен с помощью объекта TypeDescriptor.</summary>
        </member>
        <member name="M:Intermech.PointDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Определяет, может ли конвертер преобразовывать заданный тип источника объекта в собственный тип.</summary>
            <param name="context">Контекст средства форматирования. Данный объект используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Значением параметра может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение пустой ссылке (Nothing).</param>
            <param name="sourceType">Тип, из которого требуется сделать преобразование.</param>
            <returns>Метод возвращает значение true, если объект может быть преобразован; в противном случае — false.</returns>
        </member>
        <member name="M:Intermech.PointDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Получает значение, показывающее, может ли данный конвертер преобразовать тип объекта с помощью контекста в конечный тип.</summary>
            <param name="context">Объект ITypeDescriptorContext, предоставляющий контекст формата.</param>
            <param name="destinationType">Объект Type, который представляет нужный результат конвертирования.</param>
            <returns>Метод возвращает значение true, если конвертер может выполнить преобразование; в противном случае — false.</returns>
            <remarks>Данный параметр context используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Это может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать пустую ссылку (Nothing). </remarks>
        </member>
        <member name="M:Intermech.PointDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Преобразовывает указанный объект в объект PointD. </summary>
            <param name="context">Контекст средства форматирования. Данный объект используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Значением параметра может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение пустой ссылке (Nothing).</param>
            <param name="culture">Объект, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретной культурной средой. На основании стандарта RFC 1766.</param>
            <param name="value">Преобразуемый объект.</param>
            <returns>Преобразованный объект. Если конвертация не может быть выполнена, генерирует исключение.</returns>
            <exception cref="T:System.ArgumentException">Преобразование не может быть выполнено.</exception>
        </member>
        <member name="M:Intermech.PointDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Преобразовывает указанный объект в указанный тип.</summary>
            <param name="context">Контекст средства форматирования. Данный объект используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Значением параметра может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение пустой ссылке (Nothing).</param>
            <param name="culture">Объект, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретной культурной средой. It is based on the RFC 1766 standard.</param>
            <param name="value">Преобразуемый объект.</param>
            <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
            <returns>Преобразованный объект.</returns>
            <remarks>Наиболее распространенный тип, в который и из которого преобразуют объекты, — строка. Реализация по умолчанию вызывает метод ToString объекта, если объект действителен и конечный тип — строка. Если этот метод не может преобразовать тип объекта в конечный тип, генерирует исключение ArgumentException.</remarks>
        </member>
        <member name="T:Intermech.RectangleD">
            <summary>Содержит набор из четырех чисел с плавающей запятой, определяющих расположение и размер прямоугольника.</summary>
            <remarks>Прямоугольник определяется шириной, высотой и положением левого верхнего угла.</remarks>
        </member>
        <member name="F:Intermech.RectangleD.Empty">
            <summary>Представляет экземпляр класса RectangleD с неинициализированными членами.</summary>
        </member>
        <member name="F:Intermech.RectangleD._x">
            <summary>Координата по оси X верхнего левого угла прямоугольника.</summary>
        </member>
        <member name="F:Intermech.RectangleD._y">
            <summary>Координата по оси Y верхнего левого угла прямоугольника.</summary>
        </member>
        <member name="F:Intermech.RectangleD._width">
            <summary>Ширина прямоугольника.</summary>
        </member>
        <member name="F:Intermech.RectangleD._height">
            <summary>Высота прямоугольника.</summary>
        </member>
        <member name="M:Intermech.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Инициализирует новый экземпляр класса RectangleD с указанным расположением и размером.</summary>
            <param name="x">Координата по оси X верхнего левого угла прямоугольника.</param>
            <param name="y">Координата по оси Y верхнего левого угла прямоугольника.</param>
            <param name="width">Ширина прямоугольника.</param>
            <param name="height">Высота прямоугольника.</param>
        </member>
        <member name="M:Intermech.RectangleD.#ctor(Intermech.PointD,Intermech.SizeD)">
            <summary>Инициализирует новый экземпляр класса RectangleD с указанным расположением и размером.</summary>
            <param name="location">PointD, представляющий левый верхний угол прямоугольной области. </param>
            <param name="size">SizeD, представляющий ширину и высоту прямоугольной области.</param>
        </member>
        <member name="M:Intermech.RectangleD.#cctor">
            <summary>инициализация статических переменных</summary>
        </member>
        <member name="P:Intermech.RectangleD.X">
            <summary>Возвращает или задает координату по оси X левого верхнего угла структуры RectangleD.</summary>
        </member>
        <member name="P:Intermech.RectangleD.Y">
            <summary>Возвращает или задает координату по оси Y левого верхнего угла структуры RectangleD. </summary>
        </member>
        <member name="P:Intermech.RectangleD.Width">
            <summary>Возвращает или задает ширину структуры RectangleD. </summary>
        </member>
        <member name="P:Intermech.RectangleD.Height">
            <summary>Получает или задает высоту структуры RectangleD. </summary>
        </member>
        <member name="P:Intermech.RectangleD.Bottom">
            <summary>Получает координату по оси Y нижнего края структуры RectangleD. </summary>
        </member>
        <member name="P:Intermech.RectangleD.Top">
            <summary>Возвращает координату по оси Y верхнего края структуры RectangleD.</summary>
        </member>
        <member name="P:Intermech.RectangleD.Left">
            <summary>Возвращает координату по оси X левого края структуры RectangleD.</summary>
        </member>
        <member name="P:Intermech.RectangleD.Right">
            <summary>Возвращает координату по оси X правого края структуры RectangleD. </summary>
        </member>
        <member name="P:Intermech.RectangleD.IsEmpty">
            <summary>Проверяет, все ли числовые свойства этого RectangleD имеют нулевые значения. </summary>
        </member>
        <member name="P:Intermech.RectangleD.Location">
            <summary>Возвращает или задает координаты левого верхнего угла структуры RectangleD.</summary>
        </member>
        <member name="P:Intermech.RectangleD.Size">
            <summary>Возвращает или задает размер этого RectangleD. </summary>
        </member>
        <member name="M:Intermech.RectangleD.Contains(Intermech.PointD)">
            <summary>Определяет, содержится ли заданная точка в структуре RectangleD. </summary>
            <param name="pt">Объект PointD для проверки. </param>
            <returns>Этот метод возвращает true, если точка, представленная параметром pt, содержится в структуре RectangleD; в противном случае — значение false. </returns>
        </member>
        <member name="M:Intermech.RectangleD.Contains(Intermech.RectangleD)">
            <summary>Определяет, содержится ли вся прямоугольная область, представленная rect, в структуре RectangleD.</summary>
            <param name="rectangle">Объект RectangleD для проверки.</param>
            <returns>Этот метод возвращает true, если прямоугольная область, представленная rect, полностью содержится в прямоугольной области, представленной этим RectangleD; в противном случае — значение false.</returns>
        </member>
        <member name="M:Intermech.RectangleD.Contains(System.Double,System.Double)">
            <summary>Определяет, содержится ли заданная точка в структуре RectangleD.</summary>
            <param name="x">Координата проверяемой точки по оси X.</param>
            <param name="y">Координата проверяемой точки по оси Y.</param>
            <returns>Этот метод возвращает true, если точка, представленная параметром pt, содержится в структуре RectangleD; в противном случае — значение false.</returns>
        </member>
        <member name="M:Intermech.RectangleD.Equals(System.Object)">
            <summary>Проверяет, является ли obj прямоугольником RectangleD с таким же расположением и размером, что и RectangleD.</summary>
            <param name="obj">Объект Object для проверки.</param>
            <returns>Этот метод возвращает значение true, если obj является RectangleD и его свойства X, Y, Width и Height совпадают с соответствующими свойствами RectangleD; в противном случае — значение false.</returns>
        </member>
        <member name="M:Intermech.RectangleD.GetHashCode">
            <summary>Возвращает хеш-код для этой структуры RectangleD.</summary>
            <returns>Хеш-код для этого RectangleD.</returns>
        </member>
        <member name="M:Intermech.RectangleD.op_Equality(Intermech.RectangleD,Intermech.RectangleD)">
            <summary>Проверяет, имеют ли две структуры RectangleD одинаковое положение и размер.</summary>
            <param name="left">Структура RectangleD, которая находится слева от оператора равенства.</param>
            <param name="right">Структура RectangleD, которая находится справа от оператора равенства.</param>
            <returns>Этот оператор возвращает true, если две указанные структуры RectangleD имеют одинаковые свойства X, Y, Width и Height.</returns>
        </member>
        <member name="M:Intermech.RectangleD.op_Inequality(Intermech.RectangleD,Intermech.RectangleD)">
            <summary>Проверяет, различаются ли две структуры RectangleD по положению или размеру.</summary>
            <param name="left">Структура RectangleD, которая находится слева от оператора равенства.</param>
            <param name="right">Структура RectangleD, которая находится справа от оператора равенства.</param>
            <returns>Этот оператор возвращает значение true, если значения каких-либо из свойств X, Y, Width или Height двух структур RectangleD не совпадают; в противном случае — значение false.</returns>
        </member>
        <member name="M:Intermech.RectangleD.op_Implicit(System.Drawing.Rectangle)~Intermech.RectangleD">
            <summary>Преобразует указанный Rectangle в RectangleD.</summary>
            <param name="value">Преобразуемый Rectangle.</param>
            <returns>Объект RectangleD, который является результатом преобразований этого метода.</returns>
        </member>
        <member name="M:Intermech.RectangleD.op_Implicit(System.Drawing.RectangleF)~Intermech.RectangleD">
            <summary>Преобразует указанный RectangleF в RectangleD.</summary>
            <param name="value">Преобразуемый RectangleF.</param>
            <returns>Объект RectangleD, который является результатом преобразований этого метода.</returns>
        </member>
        <member name="M:Intermech.RectangleD.ToRectangleF(Intermech.RectangleD)">
            <summary>Преобразует указанный объект RectangleD в объект RectangleF, усекая значения объекта RectangleD.</summary>
            <param name="rectangleD">Преобразуемый объект RectangleD.</param>
            <returns>Объект RectangleF, который является результатом преобразований этого метода.</returns>
        </member>
        <member name="M:Intermech.RectangleD.ToString">
            <summary>Преобразует Location и Size этого RectangleD в удобную для восприятия строку. </summary>
            <returns>Строка, содержащая положение, ширину и высоту данной структуры RectangleD</returns>
        </member>
        <member name="M:Intermech.RectangleD.Inflate(System.Double,System.Double)">
            <summary>Увеличивает структуру этого RectangleD на указанную величину.</summary>
            <param name="x">Величина, на которую увеличится структура RectangleD в горизонтальном направлении.</param>
            <param name="y">Величина, на которую увеличится структура RectangleD в вертикальном направлении.</param>
        </member>
        <member name="M:Intermech.RectangleD.Inflate(Intermech.SizeD)">
            <summary>Увеличивает этот RectangleD на указанную величину.</summary>
            <param name="size">Величина, на которую увеличится данный прямоугольник.</param>
        </member>
        <member name="M:Intermech.RectangleD.Inflate(Intermech.RectangleD,System.Double,System.Double)">
            <summary>Создает и возвращает увеличенную копию указанной структуры RectangleD. Копия увеличивается на указанную величину. Исходный прямоугольник остается без изменений.</summary>
            <param name="rect">Копируемый RectangleD. Этот прямоугольник не был изменен.</param>
            <param name="x">Величина, на которую увеличится копия прямоугольника в горизонтальном направлении.</param>
            <param name="y">Величина, на которую увеличится копия прямоугольника в вертикальном направлении.</param>
            <returns>Увеличенный RectangleD.</returns>
        </member>
        <member name="M:Intermech.RectangleD.Intersect(Intermech.RectangleD)">
            <summary>Заменяет структуру RectangleD ее пересечением с указанной структурой RectangleD.</summary>
            <param name="rect">Прямоугольник для пересечения.</param>
        </member>
        <member name="M:Intermech.RectangleD.Intersect(Intermech.RectangleD,Intermech.RectangleD)">
            <summary>Возвращает структуру RectangleD, представляющую пересечение двух прямоугольников. Если пересечение отсутствует, возвращается пустое значение.</summary>
            <param name="first">Прямоугольник для пересечения.</param>
            <param name="second">Прямоугольник для пересечения.</param>
            <returns>Третья структура RectangleD, размер которой представляет область наложения двух указанных прямоугольников.</returns>
        </member>
        <member name="M:Intermech.RectangleD.IntersectsWith(Intermech.RectangleD)">
            <summary>Определяет, пересекается ли данный прямоугольник с rect.</summary>
            <param name="rect">Прямоугольник для проверки.</param>
            <returns>Этот метод возвращает true, если имеется какое-либо пересечение.</returns>
        </member>
        <member name="M:Intermech.RectangleD.Offset(Intermech.PointD)">
            <summary>Изменяет положение этого прямоугольника на указанную величину.</summary>
            <param name="pos">Величина смещения.</param>
        </member>
        <member name="M:Intermech.RectangleD.Offset(System.Double,System.Double)">
            <summary>Изменяет положение этого прямоугольника на указанную величину.</summary>
            <param name="x">Величина смещения по горизонтали.</param>
            <param name="y">Величина смещения по вертикали.</param>
        </member>
        <member name="M:Intermech.RectangleD.Union(Intermech.RectangleD,Intermech.RectangleD)">
            <summary>Создает третий прямоугольник минимального размера, позволяющего ему вместить оба прямоугольника, образующих объединение.</summary>
            <param name="first">Прямоугольник для объединения.</param>
            <param name="second">Прямоугольник для объединения.</param>
            <returns>Структура третьего RectangleD, содержащая оба прямоугольника, образующих объединение.</returns>
        </member>
        <member name="P:Intermech.RectangleD.Center">
            <summary>геометрический центр прямоугольника</summary>
        </member>
        <member name="M:Intermech.RectangleD.ContainsX(System.Double)">
            <summary>Определяет, содержится ли заданная x-координата в структуре RectangleD.</summary>
            <param name="x">Координата проверяемой точки по оси X.</param>
            <returns>Этот метод возвращает true, если x-координата, содержится в структуре RectangleD; в противном случае — значение false.</returns>
        </member>
        <member name="M:Intermech.RectangleD.ContainsY(System.Double)">
            <summary>Определяет, содержится ли заданная y-координата в структуре RectangleD.</summary>
            <param name="y">Координата проверяемой точки по оси Y.</param>
            <returns>Этот метод возвращает true, если y-координата, содержится в структуре RectangleD; в противном случае — значение false.</returns>
        </member>
        <member name="M:Intermech.RectangleD.PerimeterTranslation(System.Double,System.Double)">
            <summary>проекция точки на прямоугольник.</summary>
            <param name="x">x- координата точки</param>
            <param name="y">y- координата точки</param>
            <returns>точки после преобразования</returns>
        </member>
        <member name="M:Intermech.RectangleD.PerimeterTranslation(Intermech.PointD)">
            <summary>проекция точки на прямоугольник.</summary>
            <param name="pt">точка для преобразования</param>
            <returns>точки после преобразования</returns>
        </member>
        <member name="T:Intermech.RectangleDConverter">
            <summary>Преобразует объект RectangleD из одного типа данных в другой. Этот класс доступен с помощью объекта TypeDescriptor.</summary>
        </member>
        <member name="M:Intermech.RectangleDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Определяет, может ли конвертер преобразовывать заданный тип источника объекта в собственный тип.</summary>
            <param name="context">Контекст средства форматирования. Данный объект используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Значением параметра может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение пустой ссылке (Nothing).</param>
            <param name="sourceType">Тип, из которого требуется сделать преобразование.</param>
            <returns>Метод возвращает значение true, если объект может быть преобразован; в противном случае — false.</returns>
        </member>
        <member name="M:Intermech.RectangleDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Получает значение, показывающее, может ли данный конвертер преобразовать тип объекта с помощью контекста в конечный тип.</summary>
            <param name="context">Объект ITypeDescriptorContext, предоставляющий контекст формата.</param>
            <param name="destinationType">Объект Type, который представляет нужный результат конвертирования.</param>
            <returns>Метод возвращает значение true, если конвертер может выполнить преобразование; в противном случае — false.</returns>
            <remarks>Данный параметр context используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Это может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать пустую ссылку (Nothing). </remarks>
        </member>
        <member name="M:Intermech.RectangleDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Преобразовывает указанный объект в объект RectangleD. </summary>
            <param name="context">Контекст средства форматирования. Данный объект используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Значением параметра может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение пустой ссылке (Nothing).</param>
            <param name="culture">Объект, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретной культурной средой. На основании стандарта RFC 1766.</param>
            <param name="value">Преобразуемый объект.</param>
            <returns>Преобразованный объект. Если конвертация не может быть выполнена, генерирует исключение.</returns>
            <exception cref="T:System.ArgumentException">Преобразование не может быть выполнено.</exception>
        </member>
        <member name="M:Intermech.RectangleDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Преобразовывает указанный объект в указанный тип.</summary>
            <param name="context">Контекст средства форматирования. Данный объект используется для получения дополнительных сведений о среде, из которой вызывается этот конвертер. Значением параметра может быть пустая ссылка (Nothing в Visual Basic), поэтому всегда следует выполнять проверку. Свойства объекта контекста также могут возвращать значение пустой ссылке (Nothing).</param>
            <param name="culture">Объект, содержащий сведения о культурной среде, например язык, календарь и культурные соглашения, связанные с конкретной культурной средой. It is based on the RFC 1766 standard.</param>
            <param name="value">Преобразуемый объект.</param>
            <param name="destinationType">Тип, в который требуется преобразовать объект.</param>
            <returns>Преобразованный объект.</returns>
            <remarks>Наиболее распространенный тип, в который и из которого преобразуют объекты, — строка. Реализация по умолчанию вызывает метод ToString объекта, если объект действителен и конечный тип — строка. Если этот метод не может преобразовать тип объекта в конечный тип, генерирует исключение ArgumentException.</remarks>
        </member>
        <member name="T:Intermech.SizeD">
            <summary>Содержит упорядоченную пару чисел с плавающей запятой, обычно ширину и высоту прямоугольника.</summary>
        </member>
        <member name="F:Intermech.SizeD.Empty">
            <summary>Инициализирует новый экземпляр класса SizeD.</summary>
        </member>
        <member name="M:Intermech.SizeD.#ctor(Intermech.SizeD)">
            <summary>Инициализирует новый экземпляр класса SizeD из указанного существующего SizeD.</summary>
            <param name="size">SizeD, из которого создается новый SizeD.</param>
        </member>
        <member name="M:Intermech.SizeD.#ctor(Intermech.PointD)">
            <summary>Инициализирует новый экземпляр класса SizeD из указанного PointD.</summary>
            <param name="pt">PointD, из которого инициализируется данный SizeD.</param>
        </member>
        <member name="M:Intermech.SizeD.#ctor(System.Double,System.Double)">
            <summary>Инициализирует новый экземпляр класса SizeD из указанных размеров.</summary>
            <param name="width">Компонент ширины нового SizeD.</param>
            <param name="height">Компонент высоты нового SizeD.</param>
        </member>
        <member name="P:Intermech.SizeD.Height">
            <summary>Получает или задает вертикальный компонент этого SizeD.</summary>	
            <return>Вертикальный компонент этого SizeD.</return>
        </member>
        <member name="P:Intermech.SizeD.Width">
            <summary>Получает или задает горизонтальный компонент этого SizeD.</summary>
            <return>Горизонтальный компонент этого SizeD.</return>
        </member>
        <member name="P:Intermech.SizeD.IsEmpty">
            <summary>Получает значение, указывающее, имеет ли этот SizeD нулевые ширину и высоту.</summary>
            <return>Это свойство возвращает true, когда этот SizeD имеет нулевую ширину и высоту, в противном случае возвращается значение — false.</return>
        </member>
        <member name="M:Intermech.SizeD.Equals(System.Object)">
            <summary>Проверяет, является ли указанный объект SizeD с такими же размерами, что и SizeD.</summary>
            <param name="obj">Объект Object для проверки.</param>
            <returns>Данный метод возвращает значение true, если obj является SizeD с такой же шириной и высотой, как SizeD, в противном случае — значение false.</returns>
        </member>
        <member name="M:Intermech.SizeD.GetHashCode">
            <summary>Возвращает хеш-код для этой структуры SizeD.</summary>
            <returns>Целочисленное значение, определяющее значение хеша для этой структуры SizeD.</returns>
        </member>
        <member name="M:Intermech.SizeD.op_Equality(Intermech.SizeD,Intermech.SizeD)">
            <summary>Проверяет равенство двух структур SizeD.</summary>
            <param name="left">Структура SizeD, которая находится слева от оператора равенства.</param>
            <param name="right">Структура SizeD, которая находится справа от оператора равенства.</param>
            <returns>Этот оператор возвращает значение true, если left и right имеют равные ширину и высоту; в противном случае возвращается значение — false.</returns>
        </member>
        <member name="M:Intermech.SizeD.op_Inequality(Intermech.SizeD,Intermech.SizeD)">
            <summary>Проверяет, различны ли две структуры SizeF.</summary>
            <param name="left">Структура SizeD, которая находится слева от оператора неравенства.</param>
            <param name="right">Структура SizeD, которая находится справа от оператора неравенства.</param>
            <returns>Этот оператор возвращает значение true, если left и right отличаются по ширине или по высоте; в противном случае возвращается значение — false.</returns>
        </member>
        <member name="M:Intermech.SizeD.op_Addition(Intermech.SizeD,Intermech.SizeD)">
            <summary>Прибавляет ширину и высоту одной структуры SizeD к ширине и высоте другой структуры SizeD.</summary>
            <param name="left">Структура SizeD, которая находится слева от оператора сложения.</param>
            <param name="right">Структура SizeD, которая находится справа от оператора сложения.</param>
            <returns>Структура SizeD, полученная в результате операции сложения.</returns>
        </member>
        <member name="M:Intermech.SizeD.op_Subtraction(Intermech.SizeD,Intermech.SizeD)">
            <summary>Вычитает ширину и высоту одной структуры SizeD из ширины и высоты другой структуры SizeD.</summary>
            <param name="left">Структура SizeD, которая находится слева от оператора вычитания.</param>
            <param name="right">Структура SizeD, которая находится справа от оператора вычитания.</param>
            <returns>Структура SizeD, полученная в результате операции вычитания.</returns>
        </member>
        <member name="M:Intermech.SizeD.op_Explicit(Intermech.SizeD)~Intermech.PointD">
            <summary>Преобразует указанный SizeD в PointD.</summary>
            <param name="size">Преобразуемый SizeD.</param>
            <returns>Структура PointD, полученная в результате операции преобразования.</returns>
        </member>
        <member name="M:Intermech.SizeD.ToString">
            <summary>Создает удобную для восприятия строку, представляющую SizeF.</summary>
            <returns>Строка, представляющая этот SizeF.</returns>
        </member>
        <member name="M:Intermech.SizeD.ToSizeF(Intermech.SizeD)">
            <summary>Преобразует указанный SizeD в SizeF.</summary>
            <param name="size">Преобразуемый SizeD.</param>
            <returns>Структура SizeF, полученная в результате операции преобразования.</returns>
        </member>
        <member name="M:Intermech.SizeD.#cctor">
            <summary>инициализация статических переменных</summary>
        </member>
        <member name="T:Intermech.Memento.DateTimeFormatInfoMemento">
            <summary>
            Класс для безопасного сохранения / передачи данных DateTimeFormatInfo через remoting
            </summary>
        </member>
        <member name="M:Intermech.Memento.DateTimeFormatInfoMemento.#ctor(System.Globalization.DateTimeFormatInfo)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Intermech.Memento.DateTimeFormatInfoMemento.GetState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Intermech.Memento.IMemento`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Intermech.Memento.NumberFormatInfoMemento">
            <summary>
            Класс для безопасного сохранения / передачи данных NumberFormatInfo через remoting
            </summary>
        </member>
        <member name="M:Intermech.Memento.NumberFormatInfoMemento.#ctor(System.Globalization.NumberFormatInfo)">
            <summary>
            
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Intermech.Memento.NumberFormatInfoMemento.GetState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Intermech.Mvp.AbstractViewDisplayState">
            <summary>
            Базовый класс для объектов состояния вида MVP (view).
            </summary>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewDisplayState.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewDisplayState.SetInitialState(System.Boolean)">
            <summary>
            Задает начальное состояние объекта.
            </summary>
            <param name="isViewShown">Признак, что вид отображен на экране</param>
        </member>
        <member name="P:Intermech.Mvp.AbstractViewDisplayState.IsViewShown">
            <summary>
            Возвращает true, если вид MVP (view) отображен на экране.
            </summary>
        </member>
        <member name="E:Intermech.Mvp.AbstractViewDisplayState.ViewShown">
            <summary>
            Событие срабатывает, когда вид MVP (view) появляется на экране. По этому событию происходит 
            подключение посредника MVP (presenter) к виду в методе <see cref="M:Intermech.Mvp.Presenter.OnAttachView()"/>.
            </summary>
        </member>
        <member name="E:Intermech.Mvp.AbstractViewDisplayState.ViewClosed">
            <summary>
            Событие срабатывает, когда вид MVP (view) закрывается. По этому событию происходит
            отключение посредника MVP (presenter) от вида в методе <see cref="M:Intermech.Mvp.Presenter.OnDetachView()"/>.
            </summary>
        </member>
        <member name="T:Intermech.Mvp.AbstractViewService">
            <summary>
            Базовый класс для сервиса видов MVP, реализованных с помощью определенной технологии - Windows Forms, WPF и др.
            </summary>
            <remarks>
            Сервис видов обеспечивает абстрагирование от используемой технологии и решает следующие задачи -
            создание видов, отображение видов на экране в модальном и немодальном режиме, и др.
            </remarks>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.RegisterView(System.Type,System.Type)">
            <summary>
            Регистрирует реализацию вида MVP (view), связывая реализацию вида с указанным интерфейсом вида.
            </summary>
            <param name="viewInterface">Интерфейс вида</param>
            <param name="viewImplementation">Реализация вида</param>
            <exception cref="T:ArgumentNullException">viewInterface || viewImplementation</exception>
            <exception cref="T:MvpException">Реализация вида не соответствует интерфейсу вида, либо реализация некорректна, либо отсутствуют необходимые аннотации</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.UnregisterView(System.Type)">
            <summary>
            Отменяет регистрацию вида MVP (view).
            </summary>
            <param name="viewInterface">Интерфейс вида</param>
            <exception cref="T:ArgumentNullException">viewInterface</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.DoValidateViewType(System.Type,System.Type)">
            <summary>
            Проверяет, соответствие реализации вида его интерфейсу, а также корректность реализации, наличие необходимых аннотаций и так далее.
            </summary>
            <param name="viewInterface">Интерфейс вида</param>
            <param name="viewImplementation">Реализация вида</param>
            <exception cref="T:MvpException">Реализация вида не соответствует интерфейсу, либо реализация некорректна, либо отсутствуют необходимые аннотации</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.FindRegisteredViewType(System.Type)">
            <summary>
            Находит и возвращает зарегистрированный тип реализации вида MVP (view), соответствующий указанному интерфейсу вида.
            </summary>
            <param name="viewInterface">Интерфейс вида</param>
            <returns>Тип реализации вида или null, если тип не был зарегистрирован</returns>
            <exception cref="T:ArgumentNullException">viewInterface</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.FindSuitableViewType(Intermech.Mvp.IPresenter)">
            <summary>
            Находит и возвращает тип реализации вида MVP (view), соответствующий интерфейсу вида, полученному у посредника MVP.
            Если реализация вида не была зарегистрирована, то метод ищет реализацию вида в сборке, содержащей реализацию посредника MVP.
            </summary>
            <param name="presenter">Посредник MVP</param>
            <returns>Реализация вида или null, если реализация вида не была зарегистрирована или найдена в сборке с реализацией посредника</returns>
            <exception cref="T:ArgumentNullException">presenter</exception>
            <remarks>
            Метод используется в тех случаях, когда используется только одна технология создания видов - Windows Forms, WPF и др.
            В этом случае можно не выпонять предварительную регистрацию реализаций видов. Вместо этого реализации видов MVP размещаются в
            той же сборке, что и посредники MVP, а сервис видов находит их самостоятельно.
            </remarks>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.IsSuitableViewType(System.Type,System.Type)">
            <summary>
            Проверяет, может ли указанный тип являться реализацией вида MVP с указанный интерфейсом вида.
            Метод используется при автоматическом поиске реализации вида в сборке с реализацией посредника MVP, в случае,
            когда реализация вида не была явно зарегистрирована в сервисе видов.
            </summary>
            <param name="viewInterface">Интерфейс вида</param>
            <param name="viewImplementation">Реализация вида</param>
            <returns>true - если это подходящая реализация вида; иначе - false</returns>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.CreateView(System.Type)">
            <summary>
            Создает и возвращает вид MVP (view) для указанного интерфейса вида.
            </summary>
            <param name="viewInterface">Интерфейс вида</param>
            <returns>Экземпляр вида MVP</returns>
            <exception cref="T:ArgumentNullException">viewInterface</exception>
            <exception cref="T:MvpException">Невозможно создать вид MVP для указанного интерфейса вида, так как реализация вида не была зарегистрирована</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.CreateViewIfMissing(Intermech.Mvp.IPresenter)">
            <summary>
            Создает вида MVP (view) для указанного посредника MVP (presenter) и связывает их друг с другом, если у посредника еще нет вида.
            Для поиска реализации вида используется не только зарегистрированные виды, но и все подходящие типы из сборки с реализацией посредника.
            </summary>
            <param name="presenter">Посредник MVP</param>
            <exception cref="T:ArgumentNullException">presenter</exception>
            <exception cref="T:MvpException">Невозможно создать вид MVP для указанного посредника, так как не удалось найти реализацию вида</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.DoCreateView(System.Type,System.Type)">
            <summary>
            Создает экземпляр вида.
            </summary>
            <param name="viewInterface">Интерфейс вида</param>
            <param name="viewImplementation">Реализация вида</param>
            <returns>Экземпляр вида MVP</returns>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.Show(Intermech.Mvp.IView)">
            <summary>
            Отображает вид MVP (view) на экране в немодальном режиме.
            </summary>
            <param name="IView">Вид MVP</param>
            <exception cref="T:ArgumentNullException">view</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.Show(Intermech.Mvp.IPresenter)">
            <summary>
            Отображает связанный с посредником вид MVP (view) на экране в немодальном режиме.
            Если вид еще не создан, то он будет создан автоматически.
            </summary>
            <param name="presenter">Посредник MVP</param>
            <exception cref="T:ArgumentNullException">presenter</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.DoShow(Intermech.Mvp.IView,Intermech.Mvp.IPresenter)">
            <summary>
            Отображает вид MVP (view) на экране в немодальном режиме.
            </summary>
            <param name="view">Вид MVP</param>
            <param name="presenter">Посредник MVP. Параметр может быть не задан и равен null</param>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.ShowModal(Intermech.Mvp.IPresenter,System.Object)">
            <summary>
            Отображает связанный с посредником вид MVP (view) на экране в модальном режиме.
            Если вид еще не создан, то он будет создан автоматически.
            </summary>
            <param name="presenter">Посредник MVP</param>
            <param name="ownerView">Вид-владелец. Параметр может быть не задан и равен null</param>
            <exception cref="T:ArgumentNullException">presenter</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.DoShowModal(Intermech.Mvp.IView,Intermech.Mvp.IPresenter,System.Object)">
            <summary>
            Отображает вид MVP (view) на экране в модальном режиме.
            </summary>
            <param name="view">Вид MVP</param>
            <param name="presenter">Посредник MVP. Параметр может быть не задан и равен null</param>
            <param name="ownerView">Вид-владелец. Параметр может быть не задан и равен null</param>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.RunApplication(Intermech.Mvp.IView)">
            <summary>
            Запускает цикл обработки сообщений приложения для вида MVP (view).
            </summary>
            <param name="view">Вид MVP</param>
            <exception cref="T:ArgumentNullException">view</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.RunApplication(Intermech.Mvp.IPresenter)">
            <summary>
            Запускает цикл обработки сообщений приложения для связанного с посредником вида MVP (view).
            Если вид еще не создан, то он будет создан автоматически.
            </summary>
            <param name="presenter">Посредник MVP</param>
            <exception cref="T:ArgumentNullException">presenter</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.DoRunApplication(Intermech.Mvp.IView,Intermech.Mvp.IPresenter)">
            <summary>
            Запускает цикл обработки сообщений приложения для вида MVP (view).
            </summary>
            <param name="view">Вид MVP</param>
            <param name="presenter">Посредник MVP. Параметр может быть не задан и равен null</param>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.ActivateView(Intermech.Mvp.IView)">
            <summary>
            Активирует вид MVP и переводит на него фокус ввода. Вид должен быть отображен на экране.
            </summary>
            <param name="view">Вид MVP</param>
            <exception cref="T:ArgumentNullException">view</exception>
        </member>
        <member name="M:Intermech.Mvp.AbstractViewService.DoActivateView(Intermech.Mvp.IView)">
            <summary>
            Активирует вид MVP и переводит на него фокус ввода.
            </summary>
            <param name="view">Вид MVP</param>
        </member>
        <member name="T:Intermech.Mvp.Components.IOperationConfirmationView">
            <summary>
            Интерфейс вида MVP, в котором пользователь имеет возможность подтвердить сделанные изменения или свой выбор перед 
            завершение работы вида. Как правило, этот интерфейс реализуется диалоговыми окнами выбора или редакторами с
            кнопкой "OK", по которой происходит сохранение изменений и завершение работы вида.
            </summary>
        </member>
        <member name="E:Intermech.Mvp.Components.IOperationConfirmationView.OperationConfirmed">
            <summary>
            Событие успешного подтвержения сделанных изменений или своего выбора пользователем.
            После этого события взаимодействие пользователя с видом заканчивается.
            </summary>
        </member>
        <member name="T:Intermech.Mvp.IMvpContextPAL">
            <summary>
            Интерфейс PAL-сервиса для платформенно-зависимой реализации <see cref="T:Intermech.Mvp.MvpContext"/>.
            Реализация должна быть thread safe.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.IMvpContextPAL.CreateViewService">
            <summary>
            Создает и возвращает сервис видов MVP.
            </summary>
            <returns>Экземпляр сервиса</returns>
        </member>
        <member name="T:Intermech.Mvp.IPresenter">
            <summary>
            Базовый интерфейс для всех посредников MVP (presenter).
            </summary>
        </member>
        <member name="P:Intermech.Mvp.IPresenter.View">
            <summary>
            Возвращает или задает вид MVP (view), который будет использоваться текущим посредником MVP (presenter).
            Подключение посредника к виду будет выполнено при отображении вида на экране, а отключение посредника от вида - при закрытии вида.
            Если в момент установки свойства вид отображен на экране, то подключение посредника к виду будет выполнено немедленно.
            </summary>
        </member>
        <member name="P:Intermech.Mvp.IPresenter.ViewInterface">
            <summary>
            Возвращает интерфейс вида MVP (view), требуемого этому посреднику MVP (presenter).
            </summary>
        </member>
        <member name="T:Intermech.Mvp.IView">
            <summary>
            Базовый интерфейс для всех видов MVP (view).
            </summary>
        </member>
        <member name="P:Intermech.Mvp.IView.DisplayState">
            <summary>
            Возвращает состояние вида MVP (view). Объект состояния вида используется посредником MVP (presenter) для подключения к виду и отключения от него.
            </summary>
        </member>
        <member name="T:Intermech.Mvp.IViewDisplayState">
            <summary>
            Интерфейс состояния вида MVP (view). Он предоставляет свойства и события изменения состояния вида,
            и используется посредником MVP (presenter) для подключения к виду при отображении вида на экране.
            </summary>
        </member>
        <member name="P:Intermech.Mvp.IViewDisplayState.IsViewShown">
            <summary>
            Возвращает true, если вид MVP (view) отображен на экране.
            </summary>
        </member>
        <member name="E:Intermech.Mvp.IViewDisplayState.ViewShown">
            <summary>
            Событие срабатывает, когда вид MVP (view) появляется на экране. По этому событию происходит 
            подключение посредника MVP (presenter) к виду в методе <see cref="M:Intermech.Mvp.Presenter.OnAttachView()"/>.
            </summary>
        </member>
        <member name="E:Intermech.Mvp.IViewDisplayState.ViewClosed">
            <summary>
            Событие срабатывает, когда вид MVP (view) закрывается. По этому событию происходит
            отключение посредника MVP (presenter) от вида в методе <see cref="M:Intermech.Mvp.Presenter.OnDetachView()"/>.
            </summary>
        </member>
        <member name="T:Intermech.Mvp.MvpContext">
            <summary>
            Предоставляет доступ к глобальным сервисам MVP (ambient context).
            Все свойства класса, используемые для доступа к экземплярам сервисов, никогда не возвращают null.
            </summary>
        </member>
        <member name="P:Intermech.Mvp.MvpContext.ViewService">
            <summary>
            Возвращает сервис видов MVP, отвечающий за создание видов и отображение их на экране.
            Значение свойства по умолчанию содержит ссылку на сервис видов Windows Forms.
            </summary>
        </member>
        <member name="T:Intermech.Mvp.Presenter`1">
            <summary>
            Базовый класс, облегчающий создание посредников MVP (presenter).
            </summary>
            <typeparam name="TView">Интерфейс вида MVP, используемый посредником MVP</typeparam>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.Mvp.Presenter`1.View">
            <summary>
            Возвращает или задает вид MVP (view), который будет использоваться текущим посредником MVP (presenter).
            Подключение посредника к виду будет выполнено при отображении вида на экране, а отключение посредника от вида - при закрытии вида.
            Если в момент установки свойства вид отображен на экране, то подключение посредника к виду будет выполнено немедленно.
            </summary>
        </member>
        <member name="P:Intermech.Mvp.Presenter`1.Intermech#Mvp#IPresenter#View">
            <summary>
            Возвращает или задает вид MVP (view), который будет использоваться текущим посредником MVP (presenter).
            Подключение посредника к виду будет выполнено при отображении вида на экране, а отключение посредника от вида - при закрытии вида.
            Если в момент установки свойства вид отображен на экране, то подключение посредника к виду будет выполнено немедленно.
            </summary>
        </member>
        <member name="P:Intermech.Mvp.Presenter`1.ViewInterface">
            <summary>
            Возвращает интерфейс вида MVP (view), требуемого этому посреднику MVP (presenter).
            </summary>
        </member>
        <member name="P:Intermech.Mvp.Presenter`1.IsAttachedToView">
            <summary>
            Возвращает true, если посредник MVP (presenter) подключен к виду MVP (view).
            </summary>
            <remarks>
            Обычно это свойство используется посредником для проверки возможности обновления вида из 
            асинхронных обработчиков событий и фоновых потоков, так как в этом случае есть вероятность 
            отключения посредника от вида до срабатывания обработчика.
            </remarks>
        </member>
        <member name="P:Intermech.Mvp.Presenter`1.SynchronizationContext">
            <summary>
            Возвращает контекст синхронизации доступа к UI-потоку вида MVP (view).
            Контекст синхронизации используется посредником MVP (presenter) для обновления вида из фоновых потоков.
            Свойство может возвращать null, если посредник не подключен к виду.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.DoValidate">
            <summary>
            Позволяет проверить корректность инициализации посредника MVP (presenter).
            Метод вызывается непосредственно перед подключением посредника к виду MVP (view).
            Необработанное исключение в этом методе прерывает процесс подключения.
            </summary>
            <exception cref="T:Intermech.Mvp.PresenterPropertyException">Указанное свойство посредника некорректно</exception>
            <exception cref="T:Intermech.Mvp.MvpException">Посредник не был корректно инициализирован</exception>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.OnAttachView">
            <summary>
            Позволяет обработать событие подключения посредника MVP (presenter) к виду MVP (view).
            Посредник должен заполнить свой вид исходными данными и подписаться на события вида.
            Необработанное исключение в этом методе прерывает процесс подключения и запускает процесс отключения.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.OnAfterAttachView">
            <summary>
            Позволяет обработать событие успешного подключения посредника MVP (presenter) к виду MVP (view).
            Необработанное исключение в этом методе не приводит к отключению посредника от своего вида.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.OnBeforeDetachView">
            <summary>
            Позволяет обработать событие, предваряющее отключение посредника MVP (presenter) от вида MVP (view).
            Метод вызывается только в том случае, если ранее посредник был успешно подключен к виду.
            Необработанное исключение в этом методе не прерывает процесс отключения посредника от своего вида, 
            исключение будет подавлено, а сведения о нем будут выведены в журнал трассировки приложения.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.OnDetachView">
            <summary>
            Позволяет обработать событие отключения посредника MVP (presenter) от вида MVP (view).
            Посредник должен очистить вид и отписаться от всех событий вида.
            Метод вызывается как при закрытии вида, так и в случае ошибки подключения к виду.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.DetachView">
            <summary>
            Отключает посредника MVP (presenter) от вида MVP (view), если ранее этот посредник был успешно подключен к виду.
            Метод автоматически вызывается при закрытии вида и при его удалении с экрана.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.InvokeSilently(System.Action,System.String)">
            <summary>
            Выполняет указанный метод или блок кода с контролем необработанных исключений. Если при выполнении произойдет необработанное исключение,
            оно будет подавлено, и, если требуется, информация об этом событии будет записана в журнал трассировки.
            </summary>
            <param name="action">Выполняемый метод или блок кода</param>
            <param name="exceptionLocation">Описание места падения исключения, используется только в случае падения исключения. Значение параметра может быть равно null, в этом случае место падения будет вычислено автоматически</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="action"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.CheckAllowPropertyChange">
            <summary>
            Позволяет проверить, можно ли изменить значение свойства посредника MVP (presenter).
            Как правило, значения свойств посредника можно изменять, если он не подключен к виду.
            </summary>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.SendToViewThread(System.Action)">
            <summary>
            Позволяет посреднику MVP (presenter) обновить свой вид MVP (view) из фонового потока посредника.
            Это синхронный метод, поэтому фоновый поток будет приостановлен, пока вид не будет обновлен.
            </summary>
            <param name="method">Метод для обновления вида</param>
        </member>
        <member name="M:Intermech.Mvp.Presenter`1.PostToViewThread(System.Action)">
            <summary>
            Позволяет посреднику MVP (presenter) обновить свой вид MVP (view) из фонового потока посредника.
            Это асинхронный метод, поэтому фоновый поток посредника не будет приостановлен.
            </summary>
            <param name="method">Метод для обновления вида</param>
        </member>
        <member name="T:Intermech.Net.ClientTimeDelay">
            <summary>
            Содержит результаты вычисления задержки времени клиента относительно времени сервера.
            </summary>
        </member>
        <member name="P:Intermech.Net.ClientTimeDelay.Value">
            <summary>
            Возвращает задержку времени клиента относительно времени сервера. Если эту задержку добавить к системному времени клиента, то время клиента и сервера будет
            синхронизировано.
            </summary>
        </member>
        <member name="P:Intermech.Net.ClientTimeDelay.ValueSD">
            <summary>
            Возвращает среднеквадратичное отклонение для задержки времени клиента.
            </summary>
        </member>
        <member name="P:Intermech.Net.ClientTimeDelay.NetworkLag">
            <summary>
            Возвращает задержку сети - время прохождения сетевого пакета от клиента к серверу.
            </summary>
        </member>
        <member name="P:Intermech.Net.ClientTimeDelay.NetworkLagSD">
            <summary>
            Возвращает среднеквадратичное отклонение для задержки сети.
            </summary>
        </member>
        <member name="P:Intermech.Net.ClientTimeDelay.RoundtripTime">
            <summary>
            Возвращает суммарное время, затраченное на обращения к серверу.
            </summary>
        </member>
        <member name="P:Intermech.Net.ClientTimeDelay.Zero">
            <summary>
            Возвращает пустой результат измерений. Он используется в случаях, когда действительное измерение еще не выполнялось.
            </summary>
        </member>
        <member name="M:Intermech.Net.ClientTimeDelay.ToMillisecondsText">
            <summary>
            Возвращает строковое представление, где все временные величины выражены в миллисекундах.
            </summary>
            <param name="delay">Результы измерения задержки клиентского времени относительно серверного</param>
            <returns>Строковое представление</returns>
        </member>
        <member name="T:Intermech.Net.ISimplePtpServer">
            <summary>
            Интерфейс сервера для высокоточной синхронизации времени. За основу взят протокол PTP, работающий в режиме peer-to-peer (IEEE 1588 Precision Time Protocol).
            </summary>
        </member>
        <member name="M:Intermech.Net.ISimplePtpServer.DelayRequest(System.DateTime)">
            <summary>
            Обрабатывает запрос на получение задержки времени клиента относительно времени сервера.
            </summary>
            <param name="t1">Время отправки запроса от клиента в UTC</param>
            <returns>Ответ сервера</returns>
        </member>
        <member name="T:Intermech.Net.SimplePtpClient">
            <summary>
            Реализует клиент для высокоточной синхронизации времени. За основу взят протокол PTP, работающий в режиме peer-to-peer (IEEE 1588 Precision Time Protocol).
            </summary>
        </member>
        <member name="M:Intermech.Net.SimplePtpClient.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.Net.SimplePtpClient.Result">
            <summary>
            Возвращает результаты измерения.
            </summary>
        </member>
        <member name="M:Intermech.Net.SimplePtpClient.Reset">
            <summary>
            Очищает объект, удаляя результаты предыдущих обращений к серверу.
            </summary>
        </member>
        <member name="M:Intermech.Net.SimplePtpClient.CalculateInstantDelay(Intermech.Net.ISimplePtpServer)">
            <summary>
            Выполняет обращение к серверу и расчитывает мгновенное задержку времени клиента относительно серверного времени, а также задержку сети.
            Вычисление выполняется за одно обращение к серверу.
            </summary>
            <param name="server">Объект сервера</param>
        </member>
        <member name="M:Intermech.Net.SimplePtpClient.CalculateMeanDelay(Intermech.Net.ISimplePtpServer)">
            <summary>
            Выполняет обращение к серверу и расчитывает задержку времени клиента относительно серверного времени, а также задержку сети.
            усредняя значения нескольких обращений к серверу.
            </summary>
            <param name="server">Объект сервера</param>
        </member>
        <member name="T:Intermech.Net.SimplePtpDelayResponse">
            <summary>
            Реализует ответ сервера на запрос задержки времени клиента относительно времени сервера.
            </summary>
        </member>
        <member name="M:Intermech.Net.SimplePtpDelayResponse.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Создает объект.
            </summary>
            <param name="t2">Время получения сервером запроса от клиента в UTC</param>
            <param name="t3">Время отправки сервером ответа клиенту в UTC</param>
        </member>
        <member name="P:Intermech.Net.SimplePtpDelayResponse.T2">
            <summary>
            Время получения сервером запроса от клиента в UTC.
            </summary>
        </member>
        <member name="P:Intermech.Net.SimplePtpDelayResponse.T3">
            <summary>
            Время отправки сервером ответа клиенту в UTC.
            </summary>
        </member>
        <member name="T:Intermech.Net.SimplePtpServer">
            <summary>
            Реализует сервер для высокоточной синхронизации времени. За основу взят протокол PTP, работающий в режиме peer-to-peer (IEEE 1588 Precision Time Protocol).
            </summary>
        </member>
        <member name="M:Intermech.Net.SimplePtpServer.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Net.SimplePtpServer.#ctor(System.TimeSpan)">
            <summary>
            Создает объект и позволяет указать дополнительное смещение времени сервера относительно системного времени. Используется для unit-тестирования.
            </summary>
            <param name="fakeOffset">Искусственное смещение времени сервера относительно системного времени</param>
        </member>
        <member name="M:Intermech.Net.SimplePtpServer.DelayRequest(System.DateTime)">
            <summary>
            Обрабатывает запрос на получение задержки времени клиента относительно времени сервера.
            </summary>
            <param name="t1">Время отправки запроса от клиента в UTC</param>
            <returns>Ответ сервера</returns>
        </member>
        <member name="T:Intermech.PAL.DefaultPluginLoader">
            <summary>
            Класс загрузчика по умолчанию для плагинов PAL (platform adaptation layer).
            </summary>
            <remarks>
            Реализация является thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.PAL.DefaultPluginLoader.LoadPluginAssembly(System.String,System.Boolean)">
            <summary>
            Загружает сборку плагина по ее имени.
            </summary>
            <param name="assemblyName">Имя сборки в формате текстовой строки</param>
            <param name="throwIfNotFound">Бросать ли исключение, если не удалось загрузить сборку</param>
            <returns>Загруженная сборка плагина или null, если исключения отключены</returns>
        </member>
        <member name="T:Intermech.PAL.IPluginLoader">
            <summary>
            Интерфейс загрузчика для плагинов PAL (platform adaptation layer).
            Реализация должна быть thread safe.
            </summary>
        </member>
        <member name="M:Intermech.PAL.IPluginLoader.LoadPluginAssembly(System.String,System.Boolean)">
            <summary>
            Загружает сборку плагина по ее имени.
            </summary>
            <param name="assemblyName">Имя сборки в формате текстовой строки</param>
            <param name="throwIfNotFound">Бросать ли исключение, если не удалось загрузить сборку</param>
            <returns>Загруженная сборка плагина или null, если исключения отключены</returns>
        </member>
        <member name="T:Intermech.PAL.PALContext">
            <summary>
            Контекст выполнения сервисов PAL (platform adaptation layer)
            </summary>
            <remarks>
            Реализация является thread safe.
            </remarks>
        </member>
        <member name="P:Intermech.PAL.PALContext.PluginLoader">
            <summary>
            Возвращает или задает загрузчик плагинов PAL.
            </summary>
        </member>
        <member name="T:Intermech.PAL.PALService`1">
            <summary>
            Точка доступа к сервису PAL (platform adaptation layer)
            </summary>
            <typeparam name="TService">Интерфейс сервиса</typeparam>
            <remarks>
            Реализация является thread safe.
            </remarks>
        </member>
        <member name="P:Intermech.PAL.PALService`1.Instance">
            <summary>
            Возвращает реализацию сервиса, специфичную для текущей комбинации FX и операционной системы
            </summary>
        </member>
        <member name="T:Intermech.Pools.ConcurrentBagPool`1">
            <summary>
            Реализует пул объектов на основе класса ConcurrentBag. Реализация является thread safe.
            </summary>
            <typeparam name="T">Тип объектов в пуле</typeparam>
        </member>
        <member name="M:Intermech.Pools.ConcurrentBagPool`1.#ctor(System.Int32,Intermech.Pools.PoolableObjectFactory{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов. Значение параметра может быть равно 0</param>
            <param name="objectFactory">Фабрика для создания и обслуживания объектов в пуле</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="objectFactory"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.ConcurrentBagPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов. Значение параметра может быть равно 0</param>
            <param name="createFunction">Функция создания экземпляров объектов для пула</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="createFunction"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.ConcurrentBagPool`1.CreateObjectContainer(System.Int32)">
            <summary>
            Создает пустой контейнер для элементов пула.
            </summary>
            <param name="minCapacity">Затребованная клиентом минимальная емкость пула</param>
        </member>
        <member name="M:Intermech.Pools.ConcurrentBagPool`1.TryGetObject(`0@)">
            <summary>
            Извлекает объект из пула.
            </summary>
            <param name="obj">Извлеченный объект</param>
            <returns>Признак успешного или неуспешного извлечения в случае пустого пула</returns>
        </member>
        <member name="M:Intermech.Pools.ConcurrentBagPool`1.PutObject(`0)">
            <summary>
            Помещает указанный объект в контейнер для элементов пула.
            </summary>
            <param name="obj">Добавляемый объект</param>
        </member>
        <member name="P:Intermech.Pools.ConcurrentBagPool`1.IdleObjects">
            <summary>
            Количество объектов в пуле, доступных для выделения.
            </summary>
        </member>
        <member name="T:Intermech.Pools.IObjectPool`1">
            <summary>
            Интерфейс пула объектов.
            </summary>
            <typeparam name="T">Тип объектов в пуле</typeparam>
        </member>
        <member name="M:Intermech.Pools.IObjectPool`1.Allocate">
            <summary>
            Выделяет объект из пула.
            </summary>
            <returns>Выделенный объект</returns>
        </member>
        <member name="M:Intermech.Pools.IObjectPool`1.Release(`0)">
            <summary>
            Возвращает объект обратно в пул.
            </summary>
            <param name="obj">Объект пула, выделенный ранее с помощью метода Allocate</param>
        </member>
        <member name="P:Intermech.Pools.IObjectPool`1.IdleObjects">
            <summary>
            Количество объектов в пуле, доступных для выделения.
            </summary>
        </member>
        <member name="T:Intermech.Pools.ListPool`1">
            <summary>
            Реализует пул объектов на основе класса List. Реализация не является thread safe.
            </summary>
            <typeparam name="T">Тип объектов в пуле</typeparam>
        </member>
        <member name="M:Intermech.Pools.ListPool`1.#ctor(System.Int32,Intermech.Pools.PoolableObjectFactory{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов. Значение параметра может быть равно 0</param>
            <param name="objectFactory">Фабрика для создания и обслуживания объектов в пуле</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="objectFactory"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.ListPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов. Значение параметра может быть равно 0</param>
            <param name="createFunction">Функция создания экземпляров объектов для пула</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="createFunction"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.ListPool`1.CreateObjectContainer(System.Int32)">
            <summary>
            Создает пустой контейнер для элементов пула.
            </summary>
            <param name="minCapacity">Затребованная клиентом минимальная емкость пула</param>
        </member>
        <member name="M:Intermech.Pools.ListPool`1.TryGetObject(`0@)">
            <summary>
            Извлекает объект из пула.
            </summary>
            <param name="obj">Извлеченный объект</param>
            <returns>Признак успешного или неуспешного извлечения в случае пустого пула</returns>
        </member>
        <member name="M:Intermech.Pools.ListPool`1.PutObject(`0)">
            <summary>
            Помещает указанный объект в контейнер для элементов пула.
            </summary>
            <param name="obj">Добавляемый объект</param>
        </member>
        <member name="P:Intermech.Pools.ListPool`1.IdleObjects">
            <summary>
            Количество объектов в пуле, доступных для выделения.
            </summary>
        </member>
        <member name="T:Intermech.Pools.ObjectPoolBase`1">
            <summary>
            Базовый класс для пулов объектов.
            </summary>
            <typeparam name="T">Тип объектов в пуле</typeparam>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolBase`1.#ctor(System.Int32,Intermech.Pools.PoolableObjectFactory{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов. Значение параметра может быть равно 0</param>
            <param name="objectFactory">Фабрика для создания и обслуживания объектов в пуле</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="objectFactory"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolBase`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов</param>
            <param name="createFunction">Функция создания экземпляров объектов для пула</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="createFunction"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolBase`1.Allocate">
            <summary>
            Выделяет объект из пула.
            </summary>
            <returns>Выделенный объект</returns>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolBase`1.Release(`0)">
            <summary>
            Возвращает объект обратно в пул.
            </summary>
            <param name="obj">Объект пула, выделенный ранее с помощью метода Allocate</param>
        </member>
        <member name="P:Intermech.Pools.ObjectPoolBase`1.IdleObjects">
            <summary>
            Количество объектов в пуле, доступных для выделения.
            </summary>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolBase`1.CreateObjectContainer(System.Int32)">
            <summary>
            Создает пустой контейнер для элементов пула.
            </summary>
            <param name="minCapacity">Затребованная клиентом минимальная емкость пула. Значение параметра может быть равно 0</param>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolBase`1.TryGetObject(`0@)">
            <summary>
            Извлекает объект из пула.
            </summary>
            <param name="obj">Извлеченный объект</param>
            <returns>Признак успешного или неуспешного извлечения в случае пустого пула</returns>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolBase`1.PutObject(`0)">
            <summary>
            Помещает указанный объект в контейнер для элементов пула.
            </summary>
            <param name="obj">Добавляемый объект</param>
        </member>
        <member name="T:Intermech.Pools.ObjectPoolScope`1">
            <summary>
            Динамическая область видимости, обеспечивающая захват объектов из пула и возврат объектов в пул.
            </summary>
            <typeparam name="T">Тип объектов в пуле</typeparam>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolScope`1.#ctor(Intermech.Pools.IObjectPool{`0},`0)">
            <summary>
            Создает объект.
            </summary>
            <param name="pool">Пул объектов</param>
            <param name="allocatedObject">Экземпляр объекта, полученный из пула объектов</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="pool"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.Pools.ObjectPoolScope`1.Object">
            <summary>
            Возвращает экземпляр объекта, полученный из пула объектов.
            </summary>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolScope`1.Dispose">
            <summary>
            Очищает текущий объект и освобождает все использованные ресурсы. Экземпляр объекта, полученный из пула, будет возвращен обратно в пул.
            </summary>
        </member>
        <member name="P:Intermech.Pools.ObjectPoolScope`1.IsDisposed">
            <summary>
            Возвращает признак, что ресурсы текущего объекта были освобождены. Использовать текущий объект больше нельзя.
            </summary>
        </member>
        <member name="T:Intermech.Pools.ObjectPoolSyncWrapper`1">
            <summary>
            Обертка для объектов типа IObjectPool, позволяющая сделать их thread safe.
            </summary>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolSyncWrapper`1.#ctor(Intermech.Pools.IObjectPool{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="pool">Пул объектов, который необходимо сделать thread safe</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="pool"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolSyncWrapper`1.Unwrap">
            <summary>
            Возвращает объект, скрытый за оберткой.
            </summary>
            <returns>Объект, скрытый за оберткой</returns>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolSyncWrapper`1.Allocate">
            <summary>
            Выделяет объект из пула.
            </summary>
            <returns>Выделенный объект</returns>
        </member>
        <member name="M:Intermech.Pools.ObjectPoolSyncWrapper`1.Release(`0)">
            <summary>
            Возвращает объект обратно в пул.
            </summary>
            <param name="obj">Объект пула, выделенный ранее с помощью метода Allocate</param>
        </member>
        <member name="P:Intermech.Pools.ObjectPoolSyncWrapper`1.IdleObjects">
            <summary>
            Количество объектов в пуле, доступных для выделения.
            </summary>
        </member>
        <member name="T:Intermech.Pools.PoolableObjectFactory`1">
            <summary>
            Реализует фабрику объектов, размещенных в пуле.
            </summary>
            <typeparam name="T">Тип объектов в пуле</typeparam>
        </member>
        <member name="M:Intermech.Pools.PoolableObjectFactory`1.CreateObject">
            <summary>
            Создает экземпляр объект. Метод используется при недостатке объектов в пуле для пополнения пула.
            </summary>
            <returns>Экземпляр объекта</returns>
        </member>
        <member name="M:Intermech.Pools.PoolableObjectFactory`1.ActivateObject(`0)">
            <summary>
            Активирует объект после извлечения из пула перед возвратом клиенту пула.
            </summary>
            <param name="obj">Экземпляр объекта</param>
        </member>
        <member name="M:Intermech.Pools.PoolableObjectFactory`1.DeactivateObject(`0)">
            <summary>
            Деактивирует и очищает объект перед возвратом в пул.
            </summary>
            <param name="obj">Экземпляр объекта</param>
        </member>
        <member name="T:Intermech.Pools.SimplePoolableObjectFactory`1">
            <summary>
            Реализует простейшую фабрику объектов, размещенных в пуле.
            </summary>
        </member>
        <member name="M:Intermech.Pools.SimplePoolableObjectFactory`1.#ctor(System.Func{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="createFunction">Функция для создания экземпляров объектов</param>
            <exception cref="T:ArgumentNullException">Параметр не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.SimplePoolableObjectFactory`1.CreateObject">
            <summary>
            Создает экземпляр объект. Метод используется при недостатке объектов в пуле для пополнения пула.
            </summary>
            <returns>Экземпляр объекта</returns>
        </member>
        <member name="T:Intermech.Pools.StackPool`1">
            <summary>
            Реализует пул объектов на основе класса Stack. Реализация не является thread safe.
            </summary>
            <typeparam name="T">Тип объектов в пуле</typeparam>
        </member>
        <member name="M:Intermech.Pools.StackPool`1.#ctor(System.Int32,Intermech.Pools.PoolableObjectFactory{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов. Значение параметра может быть равно 0</param>
            <param name="objectFactory">Фабрика для создания и обслуживания объектов в пуле</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="objectFactory"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.StackPool`1.#ctor(System.Int32,System.Func{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="minCapacity">Начальая емкость пула объектов. Значение параметра может быть равно 0</param>
            <param name="createFunction">Функция создания экземпляров объектов для пула</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="minCapacity"/> не должен быть отрицательным числом</exception>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="createFunction"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Pools.StackPool`1.CreateObjectContainer(System.Int32)">
            <summary>
            Создает пустой контейнер для элементов пула.
            </summary>
            <param name="minCapacity">Затребованная клиентом минимальная емкость пула</param>
        </member>
        <member name="M:Intermech.Pools.StackPool`1.TryGetObject(`0@)">
            <summary>
            Извлекает объект из пула.
            </summary>
            <param name="obj">Извлеченный объект</param>
            <returns>Признак успешного или неуспешного извлечения в случае пустого пула</returns>
        </member>
        <member name="M:Intermech.Pools.StackPool`1.PutObject(`0)">
            <summary>
            Помещает указанный объект в контейнер для элементов пула.
            </summary>
            <param name="obj">Добавляемый объект</param>
        </member>
        <member name="P:Intermech.Pools.StackPool`1.IdleObjects">
            <summary>
            Количество объектов в пуле, доступных для выделения.
            </summary>
        </member>
        <member name="T:Intermech.RuntimeId">
            <summary>
            Реализует генератор уникальных идентификаторов, которые могут использоваться только во время работы приложения.
            При разных запусках приложения значения генерируемых идентификаторов могут отличаться. Полученные от этого сервиса
            идентификаторы нельзя сохранять в базу или в файл.
            </summary>
        </member>
        <member name="M:Intermech.RuntimeId.Create">
            <summary>
            Создает и возвращает новый идентификатор.
            </summary>
            <returns>Значение идентификатора</returns>
        </member>
        <member name="T:Intermech.Runtime.ComInterop.ComErrorCodes">
            <summary>
            Содержит часто встречающиеся коды ошибок, возвращаемых функциями WinAPI для работы с COM-объектами, а также самими COM-объектами.
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.S_OK">
            <summary>
            Вызов прошел без ошибок
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.E_FAIL">
            <summary>
            Общая ошибка. Часто используется как аналог System.InvalidOperationException, т.е. вызов не применим к объекту в текущем состоянии
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.E_ABORT">
            <summary>
            Операция прервана
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.E_APPLICATION_EXITING">
            <summary>
            Приложение завершает работу и не может обработать запрос
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.RPC_E_CALL_REJECTED">
            <summary>
            Приложение занято и не может обработать входящий вызов
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.TYPE_E_LIBNOTREGISTERED">
            <summary>
            Библиотека типов не зарегистрирована
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.REGDB_E_CLASSNOTREG">
            <summary>
            Класс не зарегистрирован.
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.TYPE_E_REGISTRYACCESS">
            <summary>
            Ошибка при обращении к реестру OLE
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.STG_E_FILEALREADYEXISTS">
            <summary>
            Файл существует, но не является структурированным хранилищем
            </summary>
        </member>
        <member name="F:Intermech.Runtime.ComInterop.ComErrorCodes.STG_E_INVALIDFUNCTION">
            <summary>
            Не удается выполнить требуемую операцию.
            </summary>
        </member>
        <member name="T:Intermech.Runtime.FXApplicationHostType">
            <summary>
            Тип хостинга приложения
            </summary>
        </member>
        <member name="F:Intermech.Runtime.FXApplicationHostType.Normal">
            <summary>
            Обычное приложение с точкой входа
            </summary>
        </member>
        <member name="F:Intermech.Runtime.FXApplicationHostType.UnmanagedHostExtension">
            <summary>
            Специальное приложение без точки входа, в котором неуправляемое приложение загружает отдельные сборки 
            в качестве плагинов/расширение (IIS, COM-host и др.)
            </summary>
        </member>
        <member name="T:Intermech.Runtime.FXApplicationInfo">
            <summary>
            Информация о текущем выполняемом приложении.
            </summary>
            <remarks>
            Реализация является платформенно-независимой и thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.Runtime.FXApplicationInfo.#ctor(Intermech.Runtime.FXApplicationHostType,System.Boolean,System.String,System.String)">
            <summary>
            Создает объект.
            </summary>
            <param name="hostType">Тип хостинга текущего приложения</param>
            <param name="is64Bit">Признак 64-битного процесса приложения</param>
            <param name="name">Имя приложения</param>
            <param name="baseDirectory">Путь к базовому каталогу приложения</param>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="name"/> содержит null; параметр <paramref name="baseDirectory"/> содержит null</exception>
        </member>
        <member name="P:Intermech.Runtime.FXApplicationInfo.HostType">
            <summary>
            Возвращает тип хостинга текущего приложения.
            </summary>
        </member>
        <member name="P:Intermech.Runtime.FXApplicationInfo.Is64Bit">
            <summary>
            Возвращает признак 64-битного процесса приложения.
            </summary>
        </member>
        <member name="P:Intermech.Runtime.FXApplicationInfo.Name">
            <summary>
            Возвращает имя приложения.
            Значение свойства может быть пустым, если текущая среда выполнения не содержит
            полноценного приложения, а используется для загрузки отдельных сборок (IIS, COM-host и др.)
            </summary>
        </member>
        <member name="P:Intermech.Runtime.FXApplicationInfo.BaseDirectory">
            <summary>
            Возвращает путь к базовому каталогу приложения.
            Значение свойства может быть пустым, если текущая среда выполнения не содержит
            полноценного приложения, а используется для загрузки отдельных сборок (IIS, COM-host и др.)
            </summary>
        </member>
        <member name="T:Intermech.Runtime.FXOperatingSystemInfo">
            <summary>
            Информация о текущей операционной системе.
            </summary>
            <remarks>
            Реализация является платформенно-независимой и thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.Runtime.FXOperatingSystemInfo.#ctor(System.Boolean,System.String)">
            <summary>
            Создает объект
            </summary>
            <param name="is64bit">Признак 64-битной операционной системы</param>
            <param name="description">Развернутое описание операционной системы и ее версии</param>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="description"/> содержит null</exception>
        </member>
        <member name="P:Intermech.Runtime.FXOperatingSystemInfo.Is64Bit">
            <summary>
            Возвращает признак 64-битной операционной системы
            </summary>
        </member>
        <member name="P:Intermech.Runtime.FXOperatingSystemInfo.Description">
            <summary>
            Возвращает развернутое описание операционной системы и ее версии
            </summary>
        </member>
        <member name="M:Intermech.Runtime.FXOperatingSystemInfo.IsWindows">
            <summary>
            Проверяет, что приложение работает на ОС Windows.
            </summary>
            <returns>true - Windows, false - что-то иное</returns>
        </member>
        <member name="M:Intermech.Runtime.FXOperatingSystemInfo.IsLinux">
            <summary>
            Проверяет, что приложение работает на ОС Linux.
            </summary>
            <returns>true - Linux, false - что-то иное</returns>
        </member>
        <member name="M:Intermech.Runtime.FXOperatingSystemInfo.IsMacOS">
            <summary>
            Проверяет, что приложение работает на ОС MacOS.
            </summary>
            <returns>true - MacOS, false - что-то иное</returns>
        </member>
        <member name="T:Intermech.Runtime.FXRuntimeEnvironment">
            <summary>
            Предоставляет информацию о текущей среде выполнения: типе и версии реализации .NET, текущем приложении, текущей операционной системе.
            </summary>
            <remarks>
            Реализация является платформенно-независимой и thread safe.
            </remarks>
        </member>
        <member name="P:Intermech.Runtime.FXRuntimeEnvironment.CurrentApplication">
            <summary>
            Возвращает информацию о текущем приложении
            </summary>
        </member>
        <member name="P:Intermech.Runtime.FXRuntimeEnvironment.CurrentRuntime">
            <summary>
            Возвращает информацию о текущей реализации и версии .NET
            </summary>
        </member>
        <member name="P:Intermech.Runtime.FXRuntimeEnvironment.CurrentOS">
            <summary>
            Возвращает информацию о текущей операционной системе
            </summary>
        </member>
        <member name="T:Intermech.Runtime.FXRuntimeInfo">
            <summary>
            Информация о текущей реализации и версии .NET
            </summary>
            <remarks>
            Реализация является платформенно-независимой и thread safe.
            </remarks>
        </member>
        <member name="M:Intermech.Runtime.FXRuntimeInfo.#ctor(Intermech.Runtime.FXRuntimeType,System.String)">
            <summary>
            Создает объект.
            </summary>
            <param name="runtimeType">Тип реализации .NET</param>
            <param name="runtimeVersion">Версия .NET</param>
        </member>
        <member name="P:Intermech.Runtime.FXRuntimeInfo.RuntimeType">
            <summary>
            Возвращает тип реализации .NET
            </summary>
        </member>
        <member name="P:Intermech.Runtime.FXRuntimeInfo.RuntimeVersion">
            <summary>
            Возвращает версию .NET
            </summary>
        </member>
        <member name="T:Intermech.Runtime.FXRuntimeType">
            <summary>
            Типы реализации .NET
            </summary>
        </member>
        <member name="F:Intermech.Runtime.FXRuntimeType.NETFramework">
            <summary>
            Полный .NET Framework
            </summary>
        </member>
        <member name="F:Intermech.Runtime.FXRuntimeType.NETCore">
            <summary>
            .NET Core версий 1-3
            </summary>
        </member>
        <member name="F:Intermech.Runtime.FXRuntimeType.NET">
            <summary>
            .NET версия 5 и выше
            </summary>
        </member>
        <member name="F:Intermech.Runtime.FXRuntimeType.Unknown">
            <summary>
            Неизвестная реализация
            </summary>
        </member>
        <member name="T:Intermech.Runtime.PropertyExceptions">
            <summary>
            Содержит методы для создания исключений о некорретно заполненных свойствах объектов.
            </summary>
        </member>
        <member name="T:Intermech.Runtime.SilentActionInvoker">
            <summary>
            Сервисный объект, реализующий возможность выполнить указанный метод или блок кода, подавив все исключения.
            При необходимости, подавленные исключения могут быть выведены в журнал трассировки приложения.
            </summary>
        </member>
        <member name="M:Intermech.Runtime.SilentActionInvoker.Invoke(System.Action,System.String)">
            <summary>
            Выполняет указанный метод или блок кода с контролем необработанных исключений. Если при выполнении произойдет необработанное исключение,
            оно будет подавлено, и, если требуется, информация об этом событии будет записана в журнал трассировки.
            </summary>
            <param name="action">Выполняемый метод или блок кода</param>
            <param name="exceptionLocation">Описание места падения исключения, используется только в случае падения исключения. Значение параметра может быть равно null, в этом случае место падения будет вычислено автоматически</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="action"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.Runtime.SilentActionInvoker.Default">
            <summary>
            Возвращает общедоступный экземпляр объекта, используемый по умолчанию.
            </summary>
        </member>
        <member name="T:Intermech.ServiceContainerExtensions">
            <summary>Расширения для объекта ServiceContainer и интерфейса IServiceProvider</summary>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.AddService``1(System.ComponentModel.Design.IServiceContainer,``0,System.Boolean)">
            <summary>Добавить сервис в контейнер сервисов</summary>
            <typeparam name="T">Тип помещаемого в контейнер сервиса</typeparam>
            <param name="serviceContainer">Контейнер сервисов</param>
            <param name="service">Помещаемый в контейнер сервиса</param>
            <param name="promote">Добавлять ли сервис так же во все родительские контейнеры</param>
            <returns>Исходный контейнер сервисов</returns>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.AddServiceOrOverride``1(System.ComponentModel.Design.IServiceContainer,``0,System.Boolean)">
            <summary>Добавить сервис в контейнер сервисов</summary>
            <typeparam name="T">Тип помещаемого в контейнер сервиса</typeparam>
            <param name="serviceContainer">Контейнер сервисов</param>
            <param name="service">Помещаемый в контейнер сервиса</param>
            <param name="promote">Добавлять ли сервис так же во все родительские контейнеры</param>
            <returns>Исходный контейнер сервисов</returns>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.RemoveService``1(System.ComponentModel.Design.IServiceContainer,System.Boolean)">
            <summary>Изъять сервис из контейнера сервисов</summary>
            <typeparam name="T">Тип изымаемого из контейнера сервиса</typeparam>
            <param name="serviceContainer">Контейнер сервисов</param>
            <param name="promote">Изымать ли сервис так же из всех родительских контейнеров</param>
            <returns>Исходный контейнер сервисов</returns>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.GetService``1(System.IServiceProvider,System.Boolean,System.String)">
            <summary>Попытка извлечения сервиса из провайдера сервисов</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Исключительная ситуация выбрасывается в случае отсутствия у провайдера запрашиваемого
                                                   сервиса (при аргументе throwExceptionIfNotFound == true)</exception>
            <typeparam name="T">Тип извлекаемого сервиса</typeparam>
            <param name="serviceProvider">Провайдер сервисов</param>
            <param name="throwExceptionIfNotFound">Выбрасывать ли исключительную ситуацию в случае отсутствия в провайдере запрашиваемого
                                                   сервиса</param>
            <param name="exceptionMessageIfFail">Текст сообщения об ошибке, в выбрасываемой исключительной ситуации в случае отсутствия
                                                 запрашиваемого сервиса в провайдере. Если null, то используется стандартное сообщение</param>
            <returns>Извлекаемый сервис</returns>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.GetService``1(System.IServiceProvider,System.String)">
            <summary>Извлечение сервиса из провайдера сервисов</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Исключительная ситуация выбрасывается в случае отсутствия у провайдера запрашиваемого
                                                   сервиса</exception>
            <typeparam name="T">Тип извлекаемого сервиса</typeparam>
            <param name="serviceProvider">Провайдер сервисов</param>
            <param name="exceptionMessageIfFail">Текст сообщения об ошибке, в выбрасываемой исключительной ситуации в случае отсутствия
                                                 запрашиваемого сервиса в провайдере. Если null, то используется стандартное сообщение</param>
            <returns>Извлекаемый сервис</returns>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.GetService``1(System.IServiceProvider,``0@,System.String)">
            <summary>Извлечение сервиса из провайдера</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Исключительная ситуация выбрасывается в случае отсутствия у провайдера запрашиваемого
                                                   сервиса</exception>
            <typeparam name="T">Тип извлекаемого сервиса</typeparam>
            <param name="serviceProvider">Провайдер сервисов</param>
            <param name="service">[out] извлекаемый сервис</param>
            <param name="exceptionMessageIfFail">Текст сообщения об ошибке, в выбрасываемой исключительной ситуации в случае отсутствия
                                                 запрашиваемого сервиса в провайдере. Если null, то используется стандартное сообщение</param>
            <returns>Провайдер сервисов (для построения цепочки вызовов)</returns>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.TryGetService``1(System.IServiceProvider,``0@)">
            <summary>Попытка извлечения сервиса из провайдера сервисов</summary>
            <typeparam name="T">Тип извлекаемого сервиса</typeparam>
            <param name="serviceProvider">Провайдер сервисов</param>
            <param name="service">[out] извлекаемый сервис</param>
            <returns>true если сервис был получен, иначе false</returns>
        </member>
        <member name="M:Intermech.ServiceContainerExtensions.EnsureInitialized``1(System.IServiceProvider,``0@,System.String)">
            <summary>Контроль того, что сервис был извлечён из провайдера в переданную переменную. Если нет (она null), то извлечь в неё сервис</summary>
            <typeparam name="T">Тип извлекаемого сервиса</typeparam>
            <param name="serviceProvider">Провайдер сервисов</param>
            <param name="service">[in, out] извлекаемый сервис</param>
            <param name="exceptionMessageIfFail">Текст сообщения об ошибке, в выбрасываемой исключительной ситуации в случае отсутствия
                                                 запрашиваемого сервиса в провайдере. Если null, то используется стандартное сообщение</param>
            <returns>извлекаемый сервис</returns>
        </member>
        <member name="T:Intermech.ServiceRef`1">
            <summary>
            Реализует ссылку на общедоступный сервис приложения с защитой от null значений. Данный класс является thread-safe.
            </summary>
            <typeparam name="T">Тип сервиса</typeparam>
        </member>
        <member name="M:Intermech.ServiceRef`1.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.ServiceRef`1.#ctor(`0)">
            <summary>
            Создает объект.
            </summary>
            <param name="value">Начальное значение ссылки</param>
        </member>
        <member name="P:Intermech.ServiceRef`1.HasValue">
            <summary>
            Возвращает true, если у ссылки есть целевой объект.
            </summary>
        </member>
        <member name="P:Intermech.ServiceRef`1.Value">
            <summary>
            Возвращает или задает значение ссылки. Если значение читаемой ссылки равно null, то будет сброшено исключение.
            </summary>
            <exception cref="T:System.InvalidOperationException">Не задано значение ссылки</exception>
        </member>
        <member name="M:Intermech.Settings.IValueCell.Invalidate">
            <summary>
            Сбрасывает признак, что значение ячейки было проверено на допустимость. Автоматически
            вызывается при изменении значения в ячейке.
            </summary>
        </member>
        <member name="M:Intermech.Settings.IValueCell.Validate">
            <summary>
            Проверяет значение ячейки на допустимость.
            </summary>
        </member>
        <member name="M:Intermech.Settings.ValueCell`1.Invalidate">
            <summary>
            Сбрасывает признак, что значение ячейки было проверено на допустимость. Автоматически
            вызывается при изменении значения в ячейке.
            </summary>
        </member>
        <member name="M:Intermech.Settings.ValueCell`1.Validate">
            <summary>
            Проверяет значение ячейки на допустимость.
            </summary>
        </member>
        <member name="T:Intermech.StringKey">
            <summary>
            Реализует класс строковых ключей, не зависящих от регистра.
            </summary>
        </member>
        <member name="F:Intermech.StringKey.value">
            <summary>
            Значение ключа
            </summary>
        </member>
        <member name="F:Intermech.StringKey.hashCode">
            <summary>
            Хэш-код
            </summary>
        </member>
        <member name="M:Intermech.StringKey.#ctor(System.String)">
            <summary>
            Создает новый ключ.
            </summary>
            <param name="value">Значение ключа</param>
        </member>
        <member name="M:Intermech.StringKey.Equals(Intermech.StringKey)">
            <summary>
            Возвращает true, если этот ключ эквивалентен указанном.
            </summary>
            <param name="other">Другой ключ</param>
            <returns>true, если ключи эквивалентны</returns>
        </member>
        <member name="M:Intermech.StringKey.GetHashCode">
            <summary>
            Возвращает хэш-код ключа.
            </summary>
            <returns>Значение хэш-кода</returns>
        </member>
        <member name="M:Intermech.StringKey.Equals(System.Object)">
            <summary>
            Возвращает true, если этот ключ эквивалентен указанному объекту.
            </summary>
            <param name="obj">Другой объект</param>
            <returns>true, если объекты эквивалентны</returns>
        </member>
        <member name="M:Intermech.StringKey.ToString">
            <summary>
            Возвращает текстовое представление ключа.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Intermech.StringView">
            <summary>
            Структура для описания фрагмента строки.
            </summary>
        </member>
        <member name="M:Intermech.StringView.#ctor(System.Int32,System.Int32)">
            <summary>
            Создает объект.
            </summary>
            <param name="startIndex">Индекс символа в строке, с которого начинается фрагмент</param>
            <param name="length">Длина фрагмента в символах, может быть равна 0</param>
        </member>
        <member name="P:Intermech.StringView.StartIndex">
            <summary>
            Возвращает индекс символа в строке, с которого начинается фрагмент.
            </summary>
        </member>
        <member name="P:Intermech.StringView.Length">
            <summary>
            Возвращает длину фрагмента строки в символах
            </summary>
        </member>
        <member name="P:Intermech.StringView.IsEmpty">
            <summary>
            Возвращает признак, что это пустой фрагмент строки. Его длина равна 0.
            </summary>
        </member>
        <member name="F:Intermech.TextUtils.TextSplitPatterns">
            <summary>
            Массив выражений для деления текста на отдельные строки.
            </summary>
        </member>
        <member name="F:Intermech.TextUtils.LineSplitPatterns">
            <summary>
            Массив выражений для деления текстовой строки на отдельные элементы.
            </summary>
        </member>
        <member name="T:Intermech.Text.ImStringBuilder">
            <summary>
            Специализированная реализация построителя строк, избавленная от проблем системного <see cref="T:System.Text.StringBuilder"/> - объекты этого типа
            эффективно используют Capacity и внутренний буфер символов, могут переиспользоваться произвольное количество раз,
            могут быть очищены без утечки памяти. <see cref="T:Intermech.Text.ImStringBuilder"/> не является равноценной заменой для
            системного <see cref="T:System.Text.StringBuilder"/>, это тип предназначен для использования в высоконагруженных сервисах, 
            генерирующих большое количество разнообразных текстов.
            </summary>
        </member>
        <member name="M:Intermech.Text.StringBuilderPoolableFactory.CreateObject">
            <summary>
            Создает экземпляр объект. Метод используется при недостатке объектов в пуле для пополнения пула.
            </summary>
            <returns>Экземпляр объекта</returns>
        </member>
        <member name="M:Intermech.Text.StringBuilderPoolableFactory.DeactivateObject(System.Text.StringBuilder)">
            <summary>
            Деактивирует и очищает объект перед возвратом в пул.
            </summary>
            <param name="item">Экземпляр объекта</param>
        </member>
        <member name="T:Intermech.Text.StringBuilderPoolSelector">
            <summary>
            Обеспечивает выбора пула StringBuilder в зависимости от затребованной емкости. Реализация не является thread safe.
            </summary>
        </member>
        <member name="M:Intermech.Text.StringBuilderPoolSelector.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.Text.StringBuilderPoolSelector.Allocate">
            <summary>
            Выделяет StringBuilder из пула.
            </summary>
            <returns>Динамическая область видимости, содержащая выделенный объект</returns>
        </member>
        <member name="M:Intermech.Text.StringBuilderPoolSelector.Allocate(System.Int32)">
            <summary>
            Выделяет StringBuilder из пула.
            </summary>
            <param name="capacity">Начальная емкость для StringBuilder</param>
            <returns>Динамическая область видимости, содержащая выделенный объект</returns>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="capacity"/> не должен быть отрицательным числом</exception>
        </member>
        <member name="T:Intermech.Text.TextServices">
            <summary>
            Сервисы и утилиты, используемые при работе с текстом и строками.
            </summary>
        </member>
        <member name="M:Intermech.Text.TextServices.Trim(System.String)">
            <summary>
            Удаляет из начала и конца строки пробелы и аналогичные им символы, а также символы переноса строк.
            </summary>
            <param name="value">Строковое значение</param>
            <returns>Очищенное строковое значение</returns>
        </member>
        <member name="P:Intermech.Text.TextServices.TrimPatterns">
            <summary>
            Возвращает массив символов, удаляемых из строковых значений при выполнении метода Trim.
            </summary>
        </member>
        <member name="P:Intermech.Text.TextServices.WordsSplitPatterns">
            <summary>
            Возвращает массив образцов для деления текстовой строки на отдельные слова.
            </summary>
        </member>
        <member name="P:Intermech.Text.TextServices.TextLinesSplitPatterns">
            <summary>
            Возвращает массив образцов для деления многострочного текста на отдельные строки.
            </summary>
        </member>
        <member name="M:Intermech.Text.TextServices.EnumerateTextLines(System.String,System.String)">
            <summary>
            Разбивает текст на отдельные строки, используя указанный разделитель строк.
            </summary>
            <param name="text">Однострочный или многострочный текст</param>
            <param name="delimiter">Разделитель строк в тексте</param>
            <returns>Перечислитель фрагментов текста, каждый из которых описывает отдельную строку без символов разделителя строк</returns>
            <exception cref="T:ArgumentException">Параметры <paramref name="text"/>, <paramref name="delimiter"/> не должны быть равны null. Параметр <paramref name="delimiter"/> не должен быть равен пустой строке.</exception>
        </member>
        <member name="P:Intermech.Text.TextServices.StringBuilderPool">
            <summary>
            Возвращает или задает пул объектов StringBuilder.
            </summary>
        </member>
        <member name="T:Intermech.Threading.AsyncCommand">
            <summary>
            Базовый класс для команд, допускающих асинхронное выполнение и асинхронное прерывание выполения.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommand.#ctor">
            <summary>
            Создает объект
            </summary>
        </member>
        <member name="P:Intermech.Threading.AsyncCommand.ResultStatus">
            <summary>
            Возвращает статус последнего выполнения команды.
            </summary>
            <remarks>
            Если было использовано асинхронное прерывание выполнения команды, то статус команды не обязательно будет равен <see cref="M:AsyncCommandResultStatus.Aborted"/>.
            В тот момент, когда было затребовано прерывание выполнения, команда уже могла находиться в коде завершения выполнения или захвата необработанного исключения.
            </remarks>
        </member>
        <member name="P:Intermech.Threading.AsyncCommand.Exception">
            <summary>
            Возвращает необработанное исключение при последнем выполнении команды.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommand.DoReset">
            <summary>
            Очищает внутреннее состояние команды и готовит ее к выполнению.
            Метод вызывается перед каждым выполнением команды, он используется для очистки результатов предыдущего выполнения.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommand.DoExecute(Intermech.Threading.IAsyncCommandContext)">
            <summary>
            Реализует выполенение команды.
            </summary>
            <param name="commandContext">Контекст управления выполнением команды. Используется для прерывания выполнения команды.</param>
            <exception cref="T:Exception">В процессе выполнения команды произошло необработанное исключение</exception>
            <remarks>
            <para>
            Команда, получив сигнал прерывания, должна немедленно прекратить выполнение. При этом любые результаты работы команды,
            как полные, так и частичные, должны быть отброшены.</para>
            <para>Если команда самостоятельно не прекратит выполнение в течение определенного интервала времени, 
            то она может быть принудительно остановлена с помощью асинхронного исключения.</para>
            <see cref="T:System.Threading.ThreadAbortException"/>.
            </remarks>
        </member>
        <member name="T:Intermech.Threading.AsyncCommandActionAdapter">
            <summary>
            Класс-обертка, позволяющий представить произвольный метод в виде асинхронной команды с поддержкой прерывания выполнения.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommandActionAdapter.#ctor(System.Action)">
            <summary>
            Создает объект.
            </summary>
            <param name="action">Метод, который должен быть представлен как команда</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="action"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Threading.AsyncCommandActionAdapter.DoExecute(Intermech.Threading.IAsyncCommandContext)">
            <summary>
            Реализует выполенение команды.
            </summary>
            <param name="commandContext">Контекст управления выполнением команды. Используется для прерывания выполнения команды.</param>
            <exception cref="T:Exception">В процессе выполнения команды произошло необработанное исключение</exception>
            <remarks>
            <para>
            Команда, получив сигнал прерывания, должна немедленно прекратить выполнение. При этом любые результаты работы команды,
            как полные, так и частичные, должны быть отброшены.</para>
            <para>Если команда самостоятельно не прекратит выполнение в течение определенного интервала времени, 
            то она может быть принудительно остановлена с помощью асинхронного исключения.</para>
            <see cref="T:System.Threading.ThreadAbortException"/>.
            </remarks>
        </member>
        <member name="T:Intermech.Threading.AsyncCommandFuncAdapter`1">
            <summary>
            Класс-обертка, позволяющий представить произвольную функцию в виде асинхронной команды с поддержкой прерывания выполнения.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommandFuncAdapter`1.#ctor(System.Func{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="action">Функция, которая должна быть представлена как команда</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="function"/> не должен быть равен null</exception>
        </member>
        <member name="P:Intermech.Threading.AsyncCommandFuncAdapter`1.ReturnValue">
            <summary>
            Возвращает результат последнего выполнения команды.
            Значение свойства не определено, если свойство <see cref="P:AsyncCommand.ResultType"/> не равно Completed.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommandFuncAdapter`1.DoReset">
            <summary>
            Очищает внутреннее состояние команды и готовит ее к выполнению.
            Метод вызывается перед каждым выполнением команды, он используется для очистки результатов предыдущего выполнения.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommandFuncAdapter`1.DoExecute(Intermech.Threading.IAsyncCommandContext)">
            <summary>
            Реализует выполенение команды.
            </summary>
            <param name="commandContext">Контекст управления выполнением команды. Используется для прерывания выполнения команды.</param>
            <exception cref="T:Exception">В процессе выполнения команды произошло необработанное исключение</exception>
            <remarks>
            <para>
            Команда, получив сигнал прерывания, должна немедленно прекратить выполнение. При этом любые результаты работы команды,
            как полные, так и частичные, должны быть отброшены.</para>
            <para>Если команда самостоятельно не прекратит выполнение в течение определенного интервала времени, 
            то она может быть принудительно остановлена с помощью асинхронного исключения.</para>
            <see cref="T:System.Threading.ThreadAbortException"/>.
            </remarks>
        </member>
        <member name="T:Intermech.Threading.AsyncCommandResultStatus">
            <summary>
            Описывает возможные результаты выполнения асинхронной команды.
            </summary>
        </member>
        <member name="F:Intermech.Threading.AsyncCommandResultStatus.Undefined">
            <summary>
            Команда еще не была выполнена
            </summary>
        </member>
        <member name="F:Intermech.Threading.AsyncCommandResultStatus.Completed">
            <summary>
            Команда успешно выполнена
            </summary>
        </member>
        <member name="F:Intermech.Threading.AsyncCommandResultStatus.Failed">
            <summary>
            В процессе выполнения команды возникло необработанное исключение
            </summary>
        </member>
        <member name="F:Intermech.Threading.AsyncCommandResultStatus.Aborted">
            <summary>
            Выполнение команды было прервано
            </summary>
        </member>
        <member name="T:Intermech.Threading.AsyncCommands">
            <summary>
            Фабрика асинхронных команд с поддержкой прерывания выполнения.
            </summary>
        </member>
        <member name="M:Intermech.Threading.AsyncCommands.FromAction(System.Action)">
            <summary>
            Создает команду из указанного метода.
            </summary>
            <param name="action">Метод, который должен быть представлен как команда</param>
            <returns>Созданная команда</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="action"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.Threading.AsyncCommands.FromFunction``1(System.Func{``0})">
            <summary>
            Создает команду из указанной функции.
            </summary>
            <param name="action">Функция, которая должна быть представлена как команда</param>
            <returns>Созданная команда</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="function"/> не должен быть равен null</exception>
        </member>
        <member name="T:Intermech.Threading.ICrossThreadObjectGuard`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Intermech.Threading.ICrossThreadObjectGuard`1.EnterLock(`0,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <param name="timeOut"></param>
        </member>
        <member name="M:Intermech.Threading.ICrossThreadObjectGuard`1.EnterLock(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Intermech.Threading.ICrossThreadObjectGuard`1.ExitLock(`0)">
            <summary>
            
            </summary>
            <param name="object"></param>
        </member>
        <member name="T:Intermech.Threading.CrossThreadObjectGuardItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Intermech.Threading.CrossThreadObjectGuardItem._lock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuardItem.#ctor(System.Threading.LockRecursionPolicy)">
            <summary>
            
            </summary>
            <param name="lockPolicy"></param>
        </member>
        <member name="F:Intermech.Threading.CrossThreadObjectGuardItem.ReferenceCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermech.Threading.CrossThreadObjectGuardItem.Lock">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuardItem.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Intermech.Threading.CrossThreadObjectGuardItemPoolSelector._poolNoRecursion">
            <summary>
            
            </summary>
        </member>
        <member name="F:Intermech.Threading.CrossThreadObjectGuardItemPoolSelector._poolWithRecursion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuardItemPoolSelector.CreateGuardItem(System.Threading.LockRecursionPolicy)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuardItemPoolSelector.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="minPoolCapacity"></param>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuardItemPoolSelector.GetPool(System.Threading.LockRecursionPolicy)">
            <summary>
            
            </summary>
            <param name="lockPolicy"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="F:Intermech.Threading.CrossThreadObjectGuardItemPoolSelector.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:Intermech.Threading.CrossThreadObjectGuard`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Intermech.Threading.CrossThreadObjectGuard`1._object2GuardItemCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:Intermech.Threading.CrossThreadObjectGuard`1._guardItemPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuard`1.EnterLockCore(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <param name="timeOutTotalMilliseconds"></param>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuard`1.ExitLockCore(`0)">
            <summary>
            
            </summary>
            <param name="@object"></param>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuard`1.#ctor(System.Threading.LockRecursionPolicy)">
            <summary>
            
            </summary>
            <param name="lockPolicy"></param>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuard`1.EnterLock(`0,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <param name="timeOut"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuard`1.EnterLock(`0,System.Int32)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <param name="millisecondsTimeout"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Intermech.Threading.CrossThreadObjectGuard`1.ExitLock(`0)">
            <summary>
            
            </summary>
            <param name="object"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Intermech.Threading.DataReadLock">
            <summary>
            Упрощает использование ReaderWriterLock для чтения данных.
            </summary>
        </member>
        <member name="M:Intermech.Threading.DataReadLock.#ctor(System.Threading.ReaderWriterLock,System.Int32)">
            <summary>
            Получает блокировку на чтение данных.
            </summary>
            <param name="rwl">Объект синхронизации</param>
        </member>
        <member name="M:Intermech.Threading.DataReadLock.Dispose">
            <summary>
            Снимает полученную ранее блокировку.
            </summary>
        </member>
        <member name="T:Intermech.Threading.DataReadLockSlim">
            <summary>
            Упрощает использование ReaderWriterLockSlim для чтения данных.
            </summary>
        </member>
        <member name="M:Intermech.Threading.DataReadLockSlim.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Получает блокировку на чтение данных.
            </summary>
            <param name="rwl">Объект синхронизации</param>
        </member>
        <member name="M:Intermech.Threading.DataReadLockSlim.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)">
            <summary>
            Получает блокировку на чтение данных.
            </summary>
            <param name="rwl">Объект синхронизации</param>
        </member>
        <member name="M:Intermech.Threading.DataReadLockSlim.Dispose">
            <summary>
            Снимает полученную ранее блокировку.
            </summary>
        </member>
        <member name="T:Intermech.Threading.DataWriteLock">
            <summary>
            Упрощает использование ReaderWriterLock для записи данных.
            </summary>
        </member>
        <member name="M:Intermech.Threading.DataWriteLock.#ctor(System.Threading.ReaderWriterLock,System.Int32)">
            <summary>
            Получает блокировку на запись данных.
            </summary>
            <param name="rwl">Объект синхронизации</param>
        </member>
        <member name="M:Intermech.Threading.DataWriteLock.#ctor(Intermech.Threading.DataReadLock,System.Int32)">
            <summary>
            Позволяет получить блокировку на запись данных из кода, уже имеющего блокировку на чтение.
            </summary>
            <param name="dataReadLock"></param>
        </member>
        <member name="M:Intermech.Threading.DataWriteLock.#ctor(Intermech.Threading.DataReadLock,System.Boolean,System.Int32)">
            <summary>
            Позволяет получить блокировку на запись данных из кода, уже имеющего блокировку на чтение.
            </summary>
            <param name="dataReadLock"></param>
            <param name="sameRevision">Указывает, что блокировка на запись должна быть получена для той же
            ревизии данных, что и блокировка на чтение</param>
            <exception cref="T:System.Threading.SynchronizationLockException">Блокировка на запись не была
            получена, т.к. данные были изменены другим потоком</exception>
        </member>
        <member name="M:Intermech.Threading.DataWriteLock.Dispose">
            <summary>
            Снимает полученную ранее блокировку.
            </summary>
        </member>
        <member name="T:Intermech.Threading.DataWriteLockSlim">
            <summary>
            Упрощает использование ReaderWriterLockSlim для записи данных.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Intermech.Threading.DataWriteLockSlim.#ctor(System.Threading.ReaderWriterLockSlim)" -->
        <!-- Badly formed XML comment ignored for member "M:Intermech.Threading.DataWriteLockSlim.#ctor(System.Threading.ReaderWriterLockSlim,System.Int32)" -->
        <member name="M:Intermech.Threading.DataWriteLockSlim.Dispose">
            <summary>
            Снимает полученную ранее блокировку.
            </summary>
        </member>
        <member name="T:Intermech.Threading.EmptySyncRoot">
            <summary>
            Реализует пустую точку синхронизации, которую можно использовать, когда многопоточный доступ к ресурсу не требуется.
            </summary>
        </member>
        <member name="F:Intermech.Threading.EmptySyncRoot.Value">
            <summary>
            Глобальный экземпляр пустой точки, который следует использовать вместо создание новых объектов этого типа.
            </summary>
        </member>
        <member name="T:Intermech.Threading.IAsyncCommandContext">
            <summary>
            Интерфейс объекта для управления выполнением команды.
            </summary>
        </member>
        <member name="P:Intermech.Threading.IAsyncCommandContext.CommandAborted">
            <summary>
            Признак, что было затребовано прерывание выполнения команды.
            Значение свойства может быть изменено в любой момент, так как прерывание выполнения команды может быть выполнено асинхронно из любого потока приложения.
            </summary>
        </member>
        <member name="T:Intermech.Threading.ISyncRoot">
            <summary>
            Позволяет реализовать точку синхронизации для ресурсов, защищаемых с помощью простой блокировки.
            </summary>
        </member>
        <member name="M:Intermech.Threading.ISyncRoot.Lock">
            <summary>
            Получить блокировку для доступа к ресурсу.
            </summary>
        </member>
        <member name="M:Intermech.Threading.ISyncRoot.Unlock">
            <summary>
            Разблокировать ресурс.
            </summary>
        </member>
        <member name="P:Intermech.Threading.LockObjects.LockTimeout">
            <summary>
            Возвращает или задает таймаут получения блокировки на объекте. Используется для автоматического разрушения deadlock'ов.
            </summary>
        </member>
        <member name="M:Intermech.Threading.LockObjects.RestoreLockTimeout">
            <summary>
            Восстанавливает значение таймаута по умолчанию.
            </summary>
        </member>
        <member name="T:Intermech.Threading.RefSyncRoot">
            <summary>
            Реализует точку синхронизации с помощью ссылки на объект.
            </summary>
        </member>
        <member name="M:Intermech.Threading.RefSyncRoot.#ctor(System.Object)">
            <summary>
            Создает точку синхронизации.
            </summary>
            <param name="syncRoot">Ссылка на объект, который будет использоваться для синхронизации доступа к ресурсу</param>
            <exception cref="T:System.ArgumentNullException">Ссылка на объект не может быть null</exception>
        </member>
        <member name="M:Intermech.Threading.RefSyncRoot.#ctor">
            <summary>
            Создает точку синхронизации.
            </summary>
        </member>
        <member name="T:Intermech.Threading.RunOnceGuard">
            <summary>
            Класс для выполнения методов только один раз.
            Реализация является thread safe.
            </summary>
        </member>
        <member name="M:Intermech.Threading.RunOnceGuard.RunOnce(System.Action)">
            <summary>
            Выполняет метод, если он еще не был выполнен.
            </summary>
            <param name="action">Выполняемый метод</param>
            <exception cref="T:System.ArgumentNullException">Параметр <paramref name="action"/> содержит null</exception>
        </member>
        <member name="T:Intermech.Threading.TaskToApm">
            <summary>
            Provides support for efficiently using Tasks to implement the APM (Begin/End) pattern.
            </summary>
        </member>
        <member name="M:Intermech.Threading.TaskToApm.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>
            Marshals the Task as an IAsyncResult, using the supplied callback and state
            to implement the APM pattern.
            </summary>
            <param name="task">The Task to be marshaled.</param>
            <param name="callback">The callback to be invoked upon completion.</param>
            <param name="state">The state to be stored in the IAsyncResult.</param>
            <returns>An IAsyncResult to represent the task's asynchronous operation.</returns>
        </member>
        <member name="M:Intermech.Threading.TaskToApm.End(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="M:Intermech.Threading.TaskToApm.End``1(System.IAsyncResult)">
            <summary>Processes an IAsyncResult returned by Begin.</summary>
            <param name="asyncResult">The IAsyncResult to unwrap.</param>
        </member>
        <member name="T:Intermech.Threading.TaskToApm.TaskAsyncResult">
            <summary>Provides a simple IAsyncResult that wraps a Task.</summary>
            <remarks>
            We could use the Task as the IAsyncResult if the Task's AsyncState is the same as the object state,
            but that's very rare, in particular in a situation where someone cares about allocation, and always
            using TaskAsyncResult simplifies things and enables additional optimizations.
            </remarks>
        </member>
        <member name="F:Intermech.Threading.TaskToApm.TaskAsyncResult._task">
            <summary>The wrapped Task.</summary>
        </member>
        <member name="F:Intermech.Threading.TaskToApm.TaskAsyncResult._callback">
            <summary>Callback to invoke when the wrapped task completes.</summary>
        </member>
        <member name="M:Intermech.Threading.TaskToApm.TaskAsyncResult.#ctor(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>Initializes the IAsyncResult with the Task to wrap and the associated object state.</summary>
            <param name="task">The Task to wrap.</param>
            <param name="callback">Callback to invoke when the wrapped task completes.</param>
            <param name="state">The new AsyncState value.</param>
        </member>
        <member name="M:Intermech.Threading.TaskToApm.TaskAsyncResult.InvokeCallback">
            <summary>Invokes the callback.</summary>
        </member>
        <member name="P:Intermech.Threading.TaskToApm.TaskAsyncResult.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="P:Intermech.Threading.TaskToApm.TaskAsyncResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the asynchronous operation completed synchronously.</summary>
            <remarks>This is set lazily based on whether the <see cref="F:Intermech.Threading.TaskToApm.TaskAsyncResult._task"/> has completed by the time this object is created.</remarks>
        </member>
        <member name="P:Intermech.Threading.TaskToApm.TaskAsyncResult.IsCompleted">
            <summary>Gets a value that indicates whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:Intermech.Threading.TaskToApm.TaskAsyncResult.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
        <member name="M:Intermech.Threading.ThreadContract.CheckLockedAtSyncRoot(System.Object)">
            <summary>
            Проверяет, что доступ к текущему объекту уже синхронизирован в открытом методе текущего объекта или обработчике события где-то выше по call stack.
            </summary>
            <param name="syncRoot">Вспомогательный объект для синхронизации доступа</param>
            <exception cref="T:System.ArgumentNullException">параметр <paramref name="syncRoot"/> содержит null</exception>
            <exception cref="T:System.InvalidOperationException">доступ к текущему объекту не был синхронизирован</exception>
        </member>
        <member name="T:Intermech.TimeUtils">
            <summary>
            Содержит различные утилиты для типов DateTime и TimeSpan.
            </summary>
        </member>
        <member name="M:Intermech.TimeUtils.TruncateToSecond(System.DateTime)">
            <summary>
            Возвращает новое значение, у которого отброшены миллисекунды. Этот метод часто используется при работе с временем модификации файлов.
            </summary>
            <param name="value">Исходное значение</param>
            <returns>Значение без миллисекунд</returns>
        </member>
        <member name="M:Intermech.TimeUtils.TruncateToMillisecond(System.DateTime)">
            <summary>
            Возвращает новое значение, у которого отброшены микросекунды.
            </summary>
            <param name="value">Исходное значение</param>
            <returns>Значение без микросекунд</returns>
        </member>
        <member name="T:Intermech.UI.CodeBehavior">
            <summary>
            Базовый класс для объектов-поведений, которые позволяют в декларативной форме менять
            поведение элементов пользовательского интерфейса. Создание и подключение
            объектов-поведений выполняется в code-behind.
            </summary>
        </member>
        <member name="M:Intermech.UI.CodeBehavior.Attach">
            <summary>
            Подключает текущий объект, если он еще не подключен.
            </summary>
        </member>
        <member name="M:Intermech.UI.CodeBehavior.Detach">
            <summary>
            Отключает текущий объект, если он еще подключен.
            </summary>
        </member>
        <member name="M:Intermech.UI.CodeBehavior.DoAttach">
            <summary>
            Подключает текущий объект.
            </summary>
        </member>
        <member name="M:Intermech.UI.CodeBehavior.DoDetach">
            <summary>
            Отключает текущий объект.
            </summary>
        </member>
        <member name="P:Intermech.UI.CodeBehavior.IsAttached">
            <summary>
            Возвращает признак, что текущий объект подключен.
            </summary>
        </member>
        <member name="T:Intermech.UI.ContextMenuViewModel`1">
            <summary>
            Класс модели вида для динамически создаваемого контекстного меню.
            </summary>
            <typeparam name="T">Тип моделей вида элементов контекстного меню</typeparam>
        </member>
        <member name="M:Intermech.UI.ContextMenuViewModel`1.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.UI.ContextMenuViewModel`1.HasItems">
            <summary>
            Возвращает признак, что контекстное меню не пусто.
            </summary>
        </member>
        <member name="P:Intermech.UI.ContextMenuViewModel`1.Items">
            <summary>
            Возвращает коллекцию элементов контекстного меню.
            </summary>
        </member>
        <member name="T:Intermech.UI.FixedTaskCountProgressUpdater">
            <summary>
            Реализует алгоритм обновления индикатора готовности процесса для случая, когда известно общее количество задач, из которых состоит процесс. 
            </summary>
        </member>
        <member name="M:Intermech.UI.FixedTaskCountProgressUpdater.#ctor(Intermech.UI.IPercentageProgressSink,System.Int32)">
            <summary>
            Создает объект.
            </summary>
            <param name="progressSink">Индикатор готовности процесса</param>
            <param name="totalTaskCount">Общее количество задач, из которых состоит процесс</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="progressSink"/> не должен быть равен null</exception>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="totalTaskCount"/> не должен меньше или равен 0</exception>
        </member>
        <member name="P:Intermech.UI.FixedTaskCountProgressUpdater.ProgressSink">
            <summary>
            Возвращает индикатор готовности процесса.
            </summary>
        </member>
        <member name="P:Intermech.UI.FixedTaskCountProgressUpdater.TotalTasks">
            <summary>
            Возвращает общее количество задач, из которых состоит процесс.
            </summary>
        </member>
        <member name="P:Intermech.UI.FixedTaskCountProgressUpdater.CompletedTasks">
            <summary>
            Возвращает количество выполненных задач.
            </summary>
        </member>
        <member name="M:Intermech.UI.FixedTaskCountProgressUpdater.AddCompletedTasks(System.Int32)">
            <summary>
            Увеличивает количество выполненных задач на указанное значение. Выполнение этого метода вызывает обновление индикатора готовности процесса.
            </summary>
            <param name="value">Приращение количества задач</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="value"/> не должен быть меньше 0, а результат увеличения количества выполненных задач не должен превышать общее количество задач</exception>
        </member>
        <member name="T:Intermech.UI.ICloseableViewModel">
            <summary>
            Интерфейс для моделей вида, поддерживающих концепцию завершения работы.
            Если модель завершает свою работу, то вид, связанный с моделью, будет
            автоматически закрыт.
            </summary>
        </member>
        <member name="P:Intermech.UI.ICloseableViewModel.IsClosed">
            <summary>
            Возвращает признак, что модель вида завершила работу и не может больше использоваться.
            </summary>
        </member>
        <member name="M:Intermech.UI.ICloseableViewModel.Close">
            <summary>
            Завершает работу модели вида, если это еще не было сделано.
            </summary>
        </member>
        <member name="T:Intermech.UI.IDynamicProgressUpdater">
            <summary>
            Интерфейс алгоритма обновления индикатора готовности процесса для случая, когда неизвестно общее количество задач, из которых состоит процесс. 
            </summary>
        </member>
        <member name="P:Intermech.UI.IDynamicProgressUpdater.ProgressSink">
            <summary>
            Возвращает индикатор готовности процесса.
            </summary>
        </member>
        <member name="P:Intermech.UI.IDynamicProgressUpdater.CompletedTasks">
            <summary>
            Возвращает количество выполненных задач.
            </summary>
        </member>
        <member name="P:Intermech.UI.IDynamicProgressUpdater.TotalTasks">
            <summary>
            Возвращает общее количество задач, из которых состоит процесс.
            </summary>
        </member>
        <member name="P:Intermech.UI.IDynamicProgressUpdater.TotalTasksLocked">
            <summary>
            Возвращает признак, что общее количество задач установлено окончательно и больше меняться не будет.
            </summary>
        </member>
        <member name="M:Intermech.UI.IDynamicProgressUpdater.AddCompletedTasks(System.Int32)">
            <summary>
            Увеличивает количество выполненных задач на указанное значение. Выполнение этого метода вызывает обновление индикатора готовности процесса.
            </summary>
            <param name="value">Приращение количества задач</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="value"/> не должен быть меньше 0, а результат увеличения количества выполненных задач не должен превышать общее количество задач</exception>
        </member>
        <member name="M:Intermech.UI.IDynamicProgressUpdater.AddTotalTasks(System.Int32)">
            <summary>
            Увеличивает общее количество задач, из которых состоит процесс, на указанное значение.
            </summary>
            <param name="value">Приращение количества задач</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="value"/> не должен быть меньше 0</exception>
            <exception cref="T:InvalidOperationException">Невозможно изменить общее количество задач, так как оно заблокировано и больше изменяться не должно</exception>
        </member>
        <member name="M:Intermech.UI.IDynamicProgressUpdater.LockTotalTasks">
            <summary>
            Блокирует общее количество задач, из которых состоит процесс. Метод используется в том случае, когда общее количество задач установлено окончательно и больше изменяться не должно.
            Это позволяет алгоритму точнее обновлять индикатор готовности процесса.
            </summary>
        </member>
        <member name="T:Intermech.UI.IPercentageProgressSink">
            <summary>
            Интерфейс индикатора хода выполнения процесса, который позволяет сообщать процент готовности процесса.
            </summary>
        </member>
        <member name="M:Intermech.UI.IPercentageProgressSink.SetProgress(System.Double)">
            <summary>
            Сообщает процент готовности процесса. Новое новое значение процента должно быть больше текущего значения. 
            </summary>
            <param name="percentValue">Процент готовности процесса в диапазоне от 0 до 100</param>
            <exception cref="T:ArgumentOutOfRangeException">Значение параметра <paramref name="percentValue"/> должно быть в интервале от 0 до 100</exception>
        </member>
        <member name="M:Intermech.UI.IPercentageProgressSink.CreateNestedSink(System.Double)">
            <summary>
            Создает и возвращает индикатор хода выполнения для вложенного процесса.
            </summary>
            <param name="progressDelta">Приращение процента готовности текущего процесса, которое соответствует полной длительности вложенного процесса</param>
            <returns>Индикатор хода выполнения для вложенного процесса</returns>
            <exception cref="T:ArgumentOutOfRangeException">Значение параметра <paramref name="percentDelta"/> должно быть больше 0</exception>
        </member>
        <member name="T:Intermech.UI.IProgressSink">
            <summary>
            Базовый интерфейс для индикаторов хода выполнения процесса.
            </summary>
        </member>
        <member name="P:Intermech.UI.IProgressSink.IsCancelled">
            <summary>
            Возвращает признак прерывания выполнения текущего процесса. Процесс должен периодически проверять значение этого свойства.
            Если значение свойства стало равно true, то процесс должен прервать свое выполнение.
            </summary>
        </member>
        <member name="M:Intermech.UI.IProgressSink.SetState(System.String)">
            <summary>
            Сообщает текущее состояние процесса.
            </summary>
            <param name="text">Описание текущего состояния процесса или выполняемой операции</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="text"/> не должен быть равен null</exception>
        </member>
        <member name="T:Intermech.UI.IProgressSinkDialogService">
            <summary>
            Интерфейс сервиса для выполнения процессов с отображением хода выполнения в диалоговом окне.
            </summary>
        </member>
        <member name="M:Intermech.UI.IProgressSinkDialogService.Invoke(System.String,Intermech.UI.ProgressSinkDialogFlags,System.Action{Intermech.UI.IPercentageProgressSink})">
            <summary>
            Позволяет выполнить указанный процесс с отображением хода его выполнения в диалоговом окне.
            </summary>
            <param name="dialogCaption">Заголовок окна</param>
            <param name="dialogFlags">Флаги, управляющие поведением окна</param>
            <param name="processAction">Выполняемый процесс</param>
            <exception cref="T:ArgumentNullException">Параметры <paramref name="dialogCaption"/>, <paramref name="processAction"/> не должны быть равны null</exception>
        </member>
        <member name="M:Intermech.UI.IProgressSinkDialogService.Invoke``1(System.String,Intermech.UI.ProgressSinkDialogFlags,System.Func{Intermech.UI.IPercentageProgressSink,``0})">
            <summary>
            Позволяет выполнить указанный процесс с отображением хода его выполнения в диалоговом окне.
            </summary>
            <typeparam name="TResult">Тип результата выполнения процесса</typeparam>
            <param name="dialogCaption">Заголовок окна</param>
            <param name="dialogFlags">Флаги, управляющие поведением окна</param>
            <param name="processAction">Выполняемый процесс</param>
            <returns>Результат выполнения процесса</returns>
            <exception cref="T:ArgumentNullException">Параметры <paramref name="dialogCaption"/>, <paramref name="processAction"/> не должны быть равны null</exception>
        </member>
        <member name="M:Intermech.UI.IProgressSinkDialogService.Invoke(System.String,Intermech.UI.ProgressSinkDialogFlags,System.Action{Intermech.UI.IMasterSlaveProgressSink})">
            <summary>
            Позволяет выполнить указанный процесс с отображением хода его выполнения в диалоговом окне.
            </summary>
            <param name="dialogCaption">Заголовок окна</param>
            <param name="dialogFlags">Флаги, управляющие поведением окна</param>
            <param name="processAction">Выполняемый процесс</param>
            <exception cref="T:ArgumentNullException">Параметры <paramref name="dialogCaption"/>, <paramref name="processAction"/> не должны быть равны null</exception>
        </member>
        <member name="M:Intermech.UI.IProgressSinkDialogService.Invoke``1(System.String,Intermech.UI.ProgressSinkDialogFlags,System.Func{Intermech.UI.IMasterSlaveProgressSink,``0})">
            <summary>
            Позволяет выполнить указанный процесс с отображением хода его выполнения в диалоговом окне.
            </summary>
            <typeparam name="TResult">Тип результата выполнения процесса</typeparam>
            <param name="dialogCaption">Заголовок окна</param>
            <param name="dialogFlags">Флаги, управляющие поведением окна</param>
            <param name="processAction">Выполняемый процесс</param>
            <returns>Результат выполнения процесса</returns>
            <exception cref="T:ArgumentNullException">Параметры <paramref name="dialogCaption"/>, <paramref name="processAction"/> не должны быть равны null</exception>
        </member>
        <member name="T:Intermech.UI.ProgressSinkDialogFlags">
            <summary>
            Флаги, управляющие поведением окна с индикатором готовности процесса.
            </summary>
        </member>
        <member name="F:Intermech.UI.ProgressSinkDialogFlags.Default">
            <summary>
            Поведение окна по умолчанию
            </summary>
        </member>
        <member name="T:Intermech.UI.IProgressSinksPAL">
            <summary>
            Интерфейс PAL-сервиса для платформенно-зависимой реализации <see cref="T:Intermech.UI.ProgressSinks"/>.
            Реализация должна быть thread safe.
            </summary>
        </member>
        <member name="M:Intermech.UI.IProgressSinksPAL.CreateDialogService">
            <summary>
            Создает и возвращает реализацию сервиса диалогов для <see cref="T:Intermech.UI.ProgressSinks"/>.
            </summary>
            <returns>Реализация сервиса диалогов</returns>
        </member>
        <member name="T:Intermech.UI.IProgressUpdater">
            <summary>
            Интерфейс алгоритма обновления индикатора готовности процесса для случая, когда известно общее количество задач, из которых состоит процесс. 
            </summary>
        </member>
        <member name="P:Intermech.UI.IProgressUpdater.ProgressSink">
            <summary>
            Возвращает индикатор готовности процесса.
            </summary>
        </member>
        <member name="P:Intermech.UI.IProgressUpdater.TotalTasks">
            <summary>
            Возвращает общее количество задач, из которых состоит процесс.
            </summary>
        </member>
        <member name="P:Intermech.UI.IProgressUpdater.CompletedTasks">
            <summary>
            Возвращает количество выполненных задач.
            </summary>
        </member>
        <member name="M:Intermech.UI.IProgressUpdater.AddCompletedTasks(System.Int32)">
            <summary>
            Увеличивает количество выполненных задач на указанное значение. Выполнение этого метода вызывает обновление индикатора готовности процесса.
            </summary>
            <param name="value">Приращение количества задач</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="value"/> не должен быть меньше 0, а результат увеличения количества выполненных задач не должен превышать общее количество задач</exception>
        </member>
        <member name="T:Intermech.UI.NullMasterSlaveProgressSink">
            <summary>
            Индикатор-заглушка, используемый в тех случаях, когда отображения хода выполнения процесса не требуется.
            </summary>
        </member>
        <member name="P:Intermech.UI.NullMasterSlaveProgressSink.Default">
            <summary>
            Возвращает экземпляр индикатора, который может использоваться по умолчанию.
            </summary>
        </member>
        <member name="T:Intermech.UI.NullPercentageProgressSink">
            <summary>
            Индикатор-заглушка, используемый в тех случаях, когда отображения хода выполнения процесса не требуется.
            </summary>
        </member>
        <member name="P:Intermech.UI.NullPercentageProgressSink.IsCancelled">
            <summary>
            Возвращает признак прерывания выполнения текущего процесса. Процесс должен периодически проверять значение этого свойства.
            Если значение свойства стало равно true, то процесс должен прервать свое выполнение.
            </summary>
        </member>
        <member name="M:Intermech.UI.NullPercentageProgressSink.SetState(System.String)">
            <summary>
            Сообщает текущее состояние процесса.
            </summary>
            <param name="text">Описание текущего состояния процесса или выполняемой операции</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="text"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.UI.NullPercentageProgressSink.SetProgress(System.Double)">
            <summary>
            Сообщает процент готовности процесса. Новое новое значение процента должно быть больше текущего значения. 
            </summary>
            <param name="percentValue">Процент готовности процесса в диапазоне от 0 до 100</param>
            <exception cref="T:ArgumentOutOfRangeException">Значение параметра <paramref name="percentValue"/> должно быть в интервале от 0 до 100</exception>
        </member>
        <member name="M:Intermech.UI.NullPercentageProgressSink.CreateNestedSink(System.Double)">
            <summary>
            Создает и возвращает индикатор хода выполнения для вложенного процесса.
            </summary>
            <param name="progressDelta">Приращение процента готовности текущего процесса, которое соответствует полной длительности вложенного процесса</param>
            <returns>Индикатор хода выполнения для вложенного процесса</returns>
            <exception cref="T:ArgumentOutOfRangeException">Значение параметра <paramref name="percentDelta"/> должно быть больше 0</exception>
        </member>
        <member name="P:Intermech.UI.NullPercentageProgressSink.Default">
            <summary>
            Возвращает экземпляр индикатора, который может использоваться по умолчанию.
            </summary>
        </member>
        <member name="T:Intermech.UI.PercentageProgressSinkBase">
            <summary>
            Базовый класс индикатора хода выполнения процесса, который позволяет сообщать процент готовности процесса.
            </summary>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.UI.PercentageProgressSinkBase.IsCancelled">
            <summary>
            Возвращает признак прерывания выполнения текущего процесса. Процесс должен периодически проверять значение этого свойства.
            Если значение свойства стало равно true, то процесс должен прервать свое выполнение.
            </summary>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.SetState(System.String)">
            <summary>
            Сообщает текущее состояние процесса.
            </summary>
            <param name="text">Описание текущего состояния процесса или выполняемой операции</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="text"/> не должен быть равен null</exception>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.SetProgress(System.Double)">
            <summary>
            Сообщает процент готовности процесса. Новое новое значение процента должно быть больше текущего значения. 
            </summary>
            <param name="percentValue">Процент готовности процесса в диапазоне от 0 до 100</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="percentValue"/> должен быть в диапазоне от 0 до 100</exception>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.CreateNestedSink(System.Double)">
            <summary>
            Создает и возвращает индикатор хода выполнения для вложенного процесса.
            </summary>
            <param name="progressDelta">Приращение процента готовности текущего процесса, которое соответствует полной длительности вложенного процесса</param>
            <returns>Индикатор хода выполнения для вложенного процесса</returns>
            <exception cref="T:ArgumentOutOfRangeException">Значение параметра <paramref name="percentDelta"/> должно быть больше 0</exception>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.DoSetState(System.String)">
            <summary>
            Сообщает текущее состояние процесса.
            </summary>
            <param name="text">Описание текущего состояния процесса или выполняемой операции</param>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.DoSetProgress(System.Double)">
            <summary>
            Сообщает процент готовности процесса. Новое новое значение процента должно быть больше текущего значения. 
            </summary>
            <param name="percentValue">Процент готовности процесса в диапазоне от 0 до 100</param>
        </member>
        <member name="P:Intermech.UI.PercentageProgressSinkBase.NestedProgressSink.IsCancelled">
            <summary>
            Возвращает признак прерывания выполнения текущего процесса. Процесс должен периодически проверять значение этого свойства.
            Если значение свойства стало равно true, то процесс должен прервать свое выполнение.
            </summary>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.NestedProgressSink.DoSetState(System.String)">
            <summary>
            Сообщает текущее состояние процесса.
            </summary>
            <param name="text">Описание текущего состояния процесса или выполняемой операции</param>
        </member>
        <member name="M:Intermech.UI.PercentageProgressSinkBase.NestedProgressSink.DoSetProgress(System.Double)">
            <summary>
            Сообщает процент готовности процесса. Новое новое значение процента должно быть больше текущего значения. 
            </summary>
            <param name="percentValue">Процент готовности процесса в диапазоне от 0 до 100</param>
        </member>
        <member name="T:Intermech.UI.PluggableCommand">
            <summary>
            Команда для моделей вида, обработчик котором можно задавать через свойство.
            </summary>
        </member>
        <member name="M:Intermech.UI.PluggableCommand.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.UI.PluggableCommand.#ctor(System.Action)">
            <summary>
            Создает объект.
            </summary>
            <param name="handler">Обработчик команды, не должен быть null</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="handler"/> не должен быть null</exception>
        </member>
        <member name="P:Intermech.UI.PluggableCommand.Handler">
            <summary>
            Возвращает или задает обработчик команды.
            Значение свойства может быть не задано и равно null.
            </summary>
        </member>
        <member name="M:Intermech.UI.PluggableCommand.IsHandlerSet">
            <summary>
            Проверяет, назначен ли обработчик для команды.
            </summary>
            <returns>true - если обработчик назначен; flase - если обработчик не назначен</returns>
        </member>
        <member name="M:Intermech.UI.PluggableCommand.DoExecute(System.Object)">
            <summary>
            Выполняет команду.
            </summary>
            <param name="parameter">Параметр выполнения команды</param>
        </member>
        <member name="T:Intermech.UI.PluggableCommand`1">
            <summary>
            Команда для моделей вида, обработчик котором можно задавать через свойство.
            </summary>
            <typeparam name="T">Тип параметра команды</typeparam>
        </member>
        <member name="M:Intermech.UI.PluggableCommand`1.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="M:Intermech.UI.PluggableCommand`1.#ctor(System.Action{`0})">
            <summary>
            Создает объект.
            </summary>
            <param name="handler">Обработчик команды, не должен быть null</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="handler"/> не должен быть null</exception>
        </member>
        <member name="P:Intermech.UI.PluggableCommand`1.Handler">
            <summary>
            Возвращает или задает обработчик команды.
            Значение свойства может быть не задано и равно null.
            </summary>
        </member>
        <member name="M:Intermech.UI.PluggableCommand`1.IsHandlerSet">
            <summary>
            Проверяет, назначен ли обработчик для команды.
            </summary>
            <returns>true - если обработчик назначен; flase - если обработчик не назначен</returns>
        </member>
        <member name="M:Intermech.UI.PluggableCommand`1.DoExecute(System.Object)">
            <summary>
            Выполняет команду.
            </summary>
            <param name="parameter">Параметр выполнения команды</param>
        </member>
        <member name="T:Intermech.UI.ProgressSinks">
            <summary>
            Содержит сервисные методы и свойства для работы с индикаторами хода выполнения различных процессов.
            </summary>
        </member>
        <member name="P:Intermech.UI.ProgressSinks.DialogService">
            <summary>
            Возвращает или задает сервис для выполнения процессов с отображением хода выполнения в диалоговом окне. 
            </summary>
            <exception cref="T:ArgumentNullException">Новое значение свойства не должно быть равно null</exception>
        </member>
        <member name="M:Intermech.UI.ProgressSinks.CreateProgressUpdater(Intermech.UI.IPercentageProgressSink,System.Int32)">
            <summary>
            Создает и возвращает алгоритм обновления индикатора готовности процесса для случая, когда известно общее количество задач, из которых состоит процесс.
            </summary>
            <param name="progressSink">Индикатор готовности процесса</param>
            <param name="totalTaskCount">Общее число задач, из которых состоит процесс</param>
            <returns>Алгоритм обновления индикатора готовности процесса</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="progressSink"/> не должен быть равен null</exception>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="totalTaskCount"/> не должен меньше или равен 0</exception>
        </member>
        <member name="M:Intermech.UI.ProgressSinks.CreateDynamicProgressUpdater(Intermech.UI.IPercentageProgressSink,System.Int32)">
            <summary>
            Создает и возвращает алгоритм обновления индикатора готовности процесса для случая, когда неизвестно общее количество задач, из которых состоит процесс.
            </summary>
            <param name="progressSink">Индикатор готовности процесса</param>
            <param name="initialTaskCount">Изначально известное количество задач, из которых состоит процесс</param>
            <returns>Алгоритм обновления индикатора готовности процесса</returns>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="progressSink"/> не должен быть равен null</exception>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="initialTaskCount"/> не должен меньше 0</exception>
        </member>
        <member name="M:Intermech.UI.UICommandInfo.#ctor(System.String)">
            <summary>
            Создает объект.
            </summary>
            <param name="displayName">Имя UI-команды</param>
            <exception cref="T:ArgumentException">Параметр <paramref name="displayName"/> не должен быть пуст или равен null</exception>
        </member>
        <member name="P:Intermech.UI.UICommandInfo.DisplayName">
            <summary>
            Возвращае имя UI-команды.
            </summary>
        </member>
        <member name="P:Intermech.UI.UICommandInfo.Tags">
            <summary>
            Возвращает коллекцию тегов UI-команды.
            </summary>
        </member>
        <member name="M:Intermech.UI.UIReport.CreateScope">
            <summary>
            Создает новую область видимости только в том случае, если нет активной области.
            </summary>
            <returns>Созданная область видимости или null</returns>
        </member>
        <member name="M:Intermech.UI.UIReport.CreateScopeInternal">
            <summary>
            Создает новую область видимости независимо от того, имеется ли уже активная область.
            </summary>
            <returns>Созданная область видимости</returns>
        </member>
        <member name="M:Intermech.UI.UIReport.CreateIsolatedScope">
            <summary>
            Создает новую область видимости только в том случае, если уже имеется активная область видимости. Иначе метод вернет null.
            Этот метод используется, если часть отчета должна быть отображена как отдельный отчет.
            </summary>
            <returns>Созданная область видимости или null</returns>
        </member>
        <member name="M:Intermech.UI.UIReport.CreateChildScope">
            <summary>
            Создает новую область видимости только в том случае, если уже имеется активная область видимости. Иначе метод вернет null.
            Этот метод используется, если часть отчета требует специальной обработки перед показом пользователю. С помощью области видимости,
            создаваемой этим методом, можно получить эту часть отчета.
            </summary>
            <returns>Созданная область видимости или null</returns>
        </member>
        <member name="T:Intermech.UI.VariableTaskCountProgressUpdater">
            <summary>
            Реализует алгоритм обновления индикатора готовности процесса для случая, когда неизвестно общее количество задач, из которых состоит процесс. 
            </summary>
        </member>
        <member name="M:Intermech.UI.VariableTaskCountProgressUpdater.#ctor(Intermech.UI.IPercentageProgressSink,System.Int32)">
            <summary>
            Создает объект.
            </summary>
            <param name="progressSink">Индикатор готовности процесса</param>
            <param name="initialTaskCount">Изначально известное количество задач, из которых состоит процесс</param>
            <exception cref="T:ArgumentNullException">Параметр <paramref name="progressSink"/> не должен быть равен null</exception>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="initialTaskCount"/> не должен меньше 0</exception>
        </member>
        <member name="P:Intermech.UI.VariableTaskCountProgressUpdater.ProgressSink">
            <summary>
            Возвращает индикатор готовности процесса.
            </summary>
        </member>
        <member name="P:Intermech.UI.VariableTaskCountProgressUpdater.CompletedTasks">
            <summary>
            Возвращает количество выполненных задач.
            </summary>
        </member>
        <member name="P:Intermech.UI.VariableTaskCountProgressUpdater.TotalTasks">
            <summary>
            Возвращает общее количество задач, из которых состоит процесс.
            </summary>
        </member>
        <member name="P:Intermech.UI.VariableTaskCountProgressUpdater.TotalTasksLocked">
            <summary>
            Возвращает признак, что общее количество задач установлено окончательно и больше меняться не будет.
            </summary>
        </member>
        <member name="M:Intermech.UI.VariableTaskCountProgressUpdater.AddCompletedTasks(System.Int32)">
            <summary>
            Увеличивает количество выполненных задач на указанное значение. Выполнение этого метода вызывает обновление индикатора готовности процесса.
            </summary>
            <param name="value">Приращение количества задач</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="value"/> не должен быть меньше 0, а результат увеличения количества выполненных задач не должен превышать общее количество задач</exception>
        </member>
        <member name="M:Intermech.UI.VariableTaskCountProgressUpdater.AddTotalTasks(System.Int32)">
            <summary>
            Увеличивает общее количество задач, из которых состоит процесс, на указанное значение.
            </summary>
            <param name="value">Приращение количества задач</param>
            <exception cref="T:ArgumentOutOfRangeException">Параметр <paramref name="value"/> не должен быть меньше 0</exception>
            <exception cref="T:InvalidOperationException">Невозможно изменить общее количество задач, так как оно заблокировано и больше изменяться не должно</exception>
        </member>
        <member name="M:Intermech.UI.VariableTaskCountProgressUpdater.LockTotalTasks">
            <summary>
            Блокирует общее количество задач, из которых состоит процесс. Метод используется в том случае, когда общее количество задач установлено окончательно и больше изменяться не должно.
            Это позволяет алгоритму точнее обновлять индикатор готовности процесса.
            </summary>
        </member>
        <member name="T:Intermech.UI.ViewModel">
            <summary>
            Базовый класс для всех моделей вида.
            </summary>
        </member>
        <member name="M:Intermech.UI.ViewModel.RaisePropertyChanged(System.String)">
            <summary>
            Запускает событие изменения свойства модели вида.
            </summary>
            <param name="propertyName">Имя свойства модели вида</param>
        </member>
        <member name="E:Intermech.UI.ViewModel.PropertyChanged">
            <summary>
            Событие изменения свойства модели вида.
            </summary>
        </member>
        <member name="T:Intermech.UI.ViewModelCommand">
            <summary>
            Базовый класс для команд моделей вида.
            </summary>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.#ctor">
            <summary>
            Создает объект.
            </summary>
        </member>
        <member name="P:Intermech.UI.ViewModelCommand.Enabled">
            <summary>
            Возвращает или задает признак, что команда включена и может быть использована.
            </summary>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.IsHandlerSet">
            <summary>
            Проверяет, назначен ли обработчик для команды.
            </summary>
            <returns>true - если обработчик назначен; flase - если обработчик не назначен</returns>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.CanExecute(System.Object)">
            <summary>
            Проверяет, можно ли выполнить команду.
            </summary>
            <param name="parameter">Параметр выполнения команды</param>
            <returns>true - если команда может быть выполнена; false - если команда не может быть выполнена</returns>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.Execute(System.Object)">
            <summary>
            Выполняет команду.
            </summary>
            <param name="parameter">Параметр выполнения команды</param>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.DoExecute(System.Object)">
            <summary>
            Выполняет команду.
            </summary>
            <param name="parameter">Параметр выполнения команды</param>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.DoCleanup">
            <summary>
            Очищает внутреннее состояние команды после выполнения.
            Метод вызывается даже в случае падения необработанного исключения при выполнении команды.
            </summary>
        </member>
        <member name="E:Intermech.UI.ViewModelCommand.CanExecuteChanged">
            <summary>
            Событие изменения доступности команды для выполнения.
            </summary>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.RaiseCanExecuteChanged">
            <summary>
            Запускает событие изменения доступности команды для выполнения.
            </summary>
        </member>
        <member name="M:Intermech.UI.ViewModelCommand.RaisePropertyChanged(System.String)">
            <summary>
            Запускает событие изменения свойства команды.
            </summary>
            <param name="propertyName">Имя свойства команды</param>
        </member>
        <member name="E:Intermech.UI.ViewModelCommand.PropertyChanged">
            <summary>
            Событие изменения свойства команды.
            </summary>
        </member>
    </members>
</doc>
